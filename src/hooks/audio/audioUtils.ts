// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ArrayBuffer –≤ base64
export const arrayBufferToBase64 = (buffer: ArrayBuffer): string => {
  let binary = '';
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è blob URL –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
export const convertBlobToBase64 = async (url: string): Promise<string> => {
  if (!url.startsWith('blob:')) {
    return url;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const base64 = arrayBufferToBase64(arrayBuffer);
    const mimeType = response.headers.get('content-type') || 'audio/mpeg';
    return `data:${mimeType};base64,${base64}`;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ blob URL:`, error);
    return url; // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const getPlaybackRate = (): number => {
  const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
  return savedSpeed ? parseFloat(savedSpeed) : 1.0;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á —è—á–µ–π–∫–æ–π
export const isCellKey = (key: string): boolean => {
  return key.includes('cell-') || key.includes('—è—á–µ–π–∫–∞') || /^\d+$/.test(key);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —è—á–µ–µ–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤
export const getCellKeys = (files: {[key: string]: string}): string[] => {
  return Object.keys(files).filter(isCellKey);
};

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —è—á–µ–π–∫–∏
export const diagnoseCellAudio = (audioKey: string, customAudioFiles: {[key: string]: string}): void => {
  if (isCellKey(audioKey)) {
    console.log(`üè† === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ß–ï–ô–ö–ò ===`);
    console.log(`üìç –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —è—á–µ–π–∫–∞: "${audioKey}"`);
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —è—á–µ–µ–∫: ${getCellKeys(customAudioFiles).length}`);
    
    const cellKeys = getCellKeys(customAudioFiles);
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏:`, cellKeys);
    
    console.log(`‚ùì –û–¢–ö–£–î–ê –≠–¢–û–¢ –ù–û–ú–ï–†? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–∏–∂–µ:`);
    console.trace();
  }
};