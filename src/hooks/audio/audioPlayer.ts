import { getPlaybackRate, diagnoseCellAudio, isCellKey } from './audioUtils';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —è—á–µ–µ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const generateCellMappings = (): {[key: string]: string[]} => {
  const cellMappings: {[key: string]: string[]} = {};
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —è—á–µ–µ–∫ A1-A99, B1-B99, C1-C99
  const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
  const numbers = Array.from({length: 99}, (_, i) => i + 1);
  
  letters.forEach(letter => {
    numbers.forEach(number => {
      const cellNumber = `${letter}${number}`;
      cellMappings[`cell-${cellNumber}`] = [
        cellNumber,                           // "A1"
        `cell-${cellNumber}`,                // "cell-A1"
        `—è—á–µ–π–∫–∞-${cellNumber}`,              // "—è—á–µ–π–∫–∞-A1" 
        `–Ø—á–µ–π–∫–∞ ${cellNumber}`,              // "–Ø—á–µ–π–∫–∞ A1"
        `delivery-cell-${cellNumber}`,       // "delivery-cell-A1"
        `audio_${cellNumber}`,               // "audio_A1"
        `cell_${cellNumber}`,                // "cell_A1"
        `${cellNumber}.mp3`,                 // "A1.mp3"
        cellNumber.toLowerCase()             // "a1"
      ];
    });
  });
  
  console.log(`üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${Object.keys(cellMappings).length} —è—á–µ–µ–∫`);
  return cellMappings;
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
const KEY_MAPPINGS: {[key: string]: string[]} = {
  // === –ú–ê–ü–ü–ò–ù–ì –ù–ê –†–ï–ê–õ–¨–ù–´–ï –†–£–°–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ===
  'discount': [
    '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
    'delivery-–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
    '—Å–∫–∏–¥–∫–∞', '–∫–æ—à–µ–ª–µ–∫', 'check-discount-wallet'
  ],
  
  'check-product': [
    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
    'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä', 'check-product-camera'
  ],
  
  'check-product-camera': [
    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
    '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä'
  ],
  
  'rate-service': [
    '–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    'delivery-–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    '–æ—Ü–µ–Ω–∏—Ç–µ', 'rate-pickup-point'
  ],
  
  'cell-number': ['cell-number', '—è—á–µ–π–∫–∞'],
  
  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ö–õ–Æ–ß–ò ===
  'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', '–Ω–∞—á–∞–ª–æ'],
  'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'],
  'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', '–Ω–∞—á–∞–ª–æ'],
  'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', '–∑–∞–≤–µ—Ä—à–µ–Ω'],
  
  // === –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –Ø–ß–ï–ô–ö–ò ===
  ...generateCellMappings()
};

// –†—É—Å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
const RUSSIAN_KEYWORDS: {[key: string]: string[]} = {
  'discount': ['—Å–∫–∏–¥–∫', '–∫–æ—à–µ–ª', '—Ç–æ–≤–∞—Ä—ã'],
  'check-product': ['—Ç–æ–≤–∞—Ä', '–∫–∞–º–µ—Ä', '–ø—Ä–æ–≤–µ—Ä'],  
  'rate-service': ['–æ—Ü–µ–Ω–∏', '–ø–≤–∑', '–ø—Ä–∏–ª–æ–∂–µ–Ω']
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
const getPossibleKeys = (audioKey: string): string[] => {
  const possibleKeys = [
    audioKey, // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    `delivery-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º delivery
    `acceptance-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º acceptance 
    `returns-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º returns
    `general-${audioKey}` // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º general
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
  if (KEY_MAPPINGS[audioKey]) {
    possibleKeys.push(...KEY_MAPPINGS[audioKey]);
  }
  
  // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö
  // –ï—Å–ª–∏ –∫–ª—é—á –ø–æ—Ö–æ–∂ –Ω–∞ —è—á–µ–π–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "A1", "B5", etc.)
  const cellMatch = audioKey.match(/^([A-Z])(\d+)$/i);
  if (cellMatch) {
    const cellNumber = cellMatch[0].toUpperCase();
    console.log(`üè† –û–ë–ù–ê–†–£–ñ–ï–ù–ê –Ø–ß–ï–ô–ö–ê: ${cellNumber}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —è—á–µ–π–∫–∏
    const cellVariants = [
      cellNumber,                           // "A1"
      `cell-${cellNumber}`,                // "cell-A1"
      `—è—á–µ–π–∫–∞-${cellNumber}`,              // "—è—á–µ–π–∫–∞-A1" 
      `–Ø—á–µ–π–∫–∞ ${cellNumber}`,              // "–Ø—á–µ–π–∫–∞ A1"
      `delivery-cell-${cellNumber}`,       // "delivery-cell-A1"
      `audio_${cellNumber}`,               // "audio_A1"
      `cell_${cellNumber}`,                // "cell_A1"
      `${cellNumber}.mp3`,                 // "A1.mp3"
      cellNumber.toLowerCase(),            // "a1"
      `cell_audio_${cellNumber}`,          // "cell_audio_A1" (–Ω–∞—à –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    ];
    
    possibleKeys.push(...cellVariants);
    console.log(`üîß –î–æ–±–∞–≤–ª–µ–Ω–æ ${cellVariants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
  }
  
  return possibleKeys;
};

// –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
const smartSearch = (audioKey: string, availableKeys: string[]): string | null => {
  console.log(`üîç –ó–ê–ü–£–°–ö–ê–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö –¥–ª—è "${audioKey}"...`);
  
  // –ò—â–µ–º –∫–ª—é—á–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏–∑ –∏—Å–∫–æ–º–æ–≥–æ
  const searchWords = audioKey.toLowerCase().split('-');
  console.log(`üî§ –ò—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º:`, searchWords);
  
  for (const availKey of availableKeys) {
    const availKeyLower = availKey.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    for (const word of searchWords) {
      if (word.length > 2 && availKeyLower.includes(word)) {
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${word}"`);
        return availKey;
      }
    }
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const keywords = RUSSIAN_KEYWORDS[audioKey] || [];
  console.log(`üî§ –ò—â–µ–º –ø–æ —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–∞–º –¥–ª—è "${audioKey}":`, keywords);
  
  for (const availKey of availableKeys) {
    const availKeyLower = availKey.toLowerCase();
    
    for (const keyword of keywords) {
      if (availKeyLower.includes(keyword)) {
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –ü–û –†–£–°–°–ö–û–ú–£ –°–õ–û–í–£: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${keyword}"`);
        return availKey;
      }
    }
  }
  
  return null;
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
const playAudioFile = async (audioUrl: string, foundKey: string): Promise<void> => {
  console.log(`üéµ –ù–ê–ô–î–ï–ù –§–ê–ô–õ "${foundKey}"`);
  console.log(`üîó URL:`, audioUrl.substring(0, 50) + '...');
  
  try {
    const audio = new Audio(audioUrl);
    audio.volume = 0.8;
    audio.playbackRate = getPlaybackRate();
    
    console.log(`‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...`);
    await audio.play();
    console.log(`‚úÖ –ó–í–£–ö –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${foundKey}`);
  } catch (audioError) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${foundKey}":`, audioError);
    console.error(`‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:`, {
      name: audioError.name,
      message: audioError.message,
      audioUrl: audioUrl.substring(0, 100)
    });
    throw audioError;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
export const playAudio = async (audioKey: string, customAudioFiles: {[key: string]: string}): Promise<void> => {
  try {
    console.log(`üîä === –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò ===`);
    console.log(`üéØ –ö–õ–Æ–ß: "${audioKey}"`);
    
    // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö
    diagnoseCellAudio(audioKey, customAudioFiles);
    
    console.log(`üìÅ –í–°–ï–ì–û –§–ê–ô–õ–û–í:`, Object.keys(customAudioFiles).length);
    console.log(`üíæ –ü–ï–†–í–´–ï 10 –ö–õ–Æ–ß–ï–ô:`, Object.keys(customAudioFiles).slice(0, 10));
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===`);
    console.log(`üéØ –ò–©–ï–ú –ö–õ–Æ–ß: "${audioKey}"`);
    console.log(`üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ö–õ–Æ–ß–ò (${Object.keys(customAudioFiles).length} —à—Ç.):`);
    Object.keys(customAudioFiles).forEach((key, index) => {
      const isExact = key === audioKey;
      const includes = key.includes(audioKey) || audioKey.includes(key);
      console.log(`  ${index + 1}. "${key}" ${isExact ? 'üéØ –¢–û–ß–ù–û–ï!' : includes ? 'üîç –ü–û–•–û–ñ–ï–ï!' : ''}`);
    });
    console.log(`üíæ –°–û–î–ï–†–ñ–ò–ú–û–ï localStorage:`, localStorage.getItem('wb-audio-files')?.substring(0, 200) + '...');
    
    // –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
    if (customAudioFiles[audioKey]) {
      console.log(`üéµ –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${audioKey}"`);
      await playAudioFile(customAudioFiles[audioKey], audioKey);
      return;
    }

    const possibleKeys = getPossibleKeys(audioKey);
    console.log(`üîç –ü–†–û–í–ï–†–Ø–Æ –ö–õ–Æ–ß–ò:`, possibleKeys);
    
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
    let foundKey = null;
    let audioUrl = null;
    
    for (const key of possibleKeys) {
      if (customAudioFiles[key]) {
        foundKey = key;
        audioUrl = customAudioFiles[key];
        break;
      }
    }
    
    // –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù - –ü–†–û–ë–£–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö
    if (!audioUrl || !foundKey) {
      const availableKeys = Object.keys(customAudioFiles);
      const smartFoundKey = smartSearch(audioKey, availableKeys);
      
      if (smartFoundKey) {
        foundKey = smartFoundKey;
        audioUrl = customAudioFiles[smartFoundKey];
      }
    }

    if (audioUrl && foundKey) {
      await playAudioFile(audioUrl, foundKey);
      return;
    } else {
      // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö  
      if (isCellKey(audioKey)) {
        console.warn(`üè† –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${audioKey}" –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        console.log(`üí° –£ –≤–∞—Å –µ—Å—Ç—å ${Object.keys(customAudioFiles).filter(k => isCellKey(k)).length} –æ–∑–≤—É—á–µ–∫ —è—á–µ–µ–∫, –Ω–æ –Ω–µ –¥–ª—è —ç—Ç–æ–π`);
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫`);
        return;
      }
      
      console.log(`‚ö†Ô∏è –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù –î–õ–Ø "${audioKey}"`);
      console.log(`üîç –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò:`, possibleKeys);
      console.log(`üìã –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´ (–ø–µ—Ä–≤—ã–µ 10):`, Object.keys(customAudioFiles).slice(0, 10));
      console.log(`‚ùå –ó–í–£–ö –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è "${audioKey}" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${audioKey}":`, error);
  }
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —è—á–µ–π–∫–∏
export const playCellAudio = async (cellNumber: string, customAudioFiles: {[key: string]: string}): Promise<void> => {
  try {
    console.log(`üîä === –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ===`);
    console.log(`üéØ –Ø—á–µ–π–∫–∞: ${cellNumber}`);
    
    // –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú –ù–û–í–´–ô –ù–ê–î–ï–ñ–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–†
    try {
      const { audioManager } = await import('@/utils/simpleAudioManager');
      console.log(`üîß –ü—Ä–æ–±—É—é –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ...`);
      const success = await audioManager.playCellAudio(cellNumber);
      if (success) {
        console.log(`‚úÖ –ù–û–í–´–ô –ú–ï–ù–ï–î–ñ–ï–† –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–õ –Ø–ß–ï–ô–ö–£ ${cellNumber}`);
        return;
      }
    } catch (newManagerError) {
      console.log(`‚ö†Ô∏è –ù–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É:`, newManagerError);
    }
    
    // –†–ï–ó–ï–†–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (–°–¢–ê–†–ê–Ø)
    console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${Object.keys(customAudioFiles).length}`);
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–û–í –Ø–ß–ï–ï–ö
    if (Object.keys(customAudioFiles).length === 0) {
      console.log(`‚ö†Ô∏è –§–ê–ô–õ–´ –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´! –ü–û–ü–´–¢–ö–ê –ê–í–ê–†–ò–ô–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø...`);
      const backupSources = [
        'wb-pvz-cell-audio-settings-permanent',
        'wb-pvz-cell-audio-IMMEDIATE', 
        'wb-pvz-cell-audio-cement',
        'wb-NEVER-LOSE-CELLS-BACKUP'
      ];
      
      for (const source of backupSources) {
        const backupData = localStorage.getItem(source);
        if (backupData) {
          try {
            const backupFiles = JSON.parse(backupData);
            console.log(`üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –ò–°–¢–û–ß–ù–ò–ö ${source}: ${Object.keys(backupFiles).length} —Ñ–∞–π–ª–æ–≤`);
            Object.assign(customAudioFiles, backupFiles);
            break;
          } catch (err) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ ${source}:`, err);
          }
        }
      }
    }
    
    const cellFiles = Object.keys(customAudioFiles).filter(key => 
      key.startsWith('cell-') || key.includes('—è—á–µ–π–∫–∞') || /^\d+$/.test(key)
    );
    console.log(`üè† –§–∞–π–ª—ã —è—á–µ–µ–∫ (${cellFiles.length}):`, cellFiles);
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ —è—á–µ–π–∫–∏
    const possibleCellKeys = [
      `cell-${cellNumber}`,
      `${cellNumber}`, // –ü—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
      `—è—á–µ–π–∫–∞-${cellNumber}`,
      `cells-${cellNumber}`,
      cellNumber.toString()
    ];
    
    console.log(`üîç –ò—â–µ–º —è—á–µ–π–∫—É –ø–æ –∫–ª—é—á–∞–º:`, possibleCellKeys);
    
    let foundKey = null;
    let audioUrl = null;
    
    for (const key of possibleCellKeys) {
      if (customAudioFiles[key]) {
        foundKey = key;
        audioUrl = customAudioFiles[key];
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê –Ø–ß–ï–ô–ö–ê: "${key}" ‚Üí ${audioUrl.substring(0, 50)}...`);
        break;
      }
    }
    
    if (audioUrl && foundKey) {
      console.log(`üéµ –í–û–°–ü–†–û–ò–ó–í–û–ñ–£ –Ø–ß–ï–ô–ö–£: ${foundKey}`);
      await playAudioFile(audioUrl, foundKey);
      console.log(`‚úÖ –Ø–ß–ï–ô–ö–ê ${cellNumber} –£–°–ü–ï–®–ù–û –û–ó–í–£–ß–ï–ù–ê`);
      return;
    }
    
    console.log(`‚ùå –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ${cellNumber} –ù–ï –ù–ê–ô–î–ï–ù–ê`);
    console.log(`üíæ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:`, possibleCellKeys);
    console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, cellFiles);
    console.log(`üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
  }
};