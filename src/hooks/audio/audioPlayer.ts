import { getPlaybackRate, diagnoseCellAudio, isCellKey } from './audioUtils';

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
const KEY_MAPPINGS: {[key: string]: string[]} = {
  // === –ú–ê–ü–ü–ò–ù–ì –ù–ê –†–ï–ê–õ–¨–ù–´–ï –†–£–°–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ===
  'discount': [
    '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
    'delivery-–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
    '—Å–∫–∏–¥–∫–∞', '–∫–æ—à–µ–ª–µ–∫', 'check-discount-wallet'
  ],
  
  'check-product': [
    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
    'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä', 'check-product-camera'
  ],
  
  'check-product-camera': [
    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
    '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä'
  ],
  
  'rate-service': [
    '–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    'delivery-–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
    '–æ—Ü–µ–Ω–∏—Ç–µ', 'rate-pickup-point'
  ],
  
  'cell-number': ['cell-number', '—è—á–µ–π–∫–∞'],
  
  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ö–õ–Æ–ß–ò ===
  'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', '–Ω–∞—á–∞–ª–æ'],
  'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'],
  'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', '–Ω–∞—á–∞–ª–æ'],
  'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', '–∑–∞–≤–µ—Ä—à–µ–Ω']
};

// –†—É—Å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
const RUSSIAN_KEYWORDS: {[key: string]: string[]} = {
  'discount': ['—Å–∫–∏–¥–∫', '–∫–æ—à–µ–ª', '—Ç–æ–≤–∞—Ä—ã'],
  'check-product': ['—Ç–æ–≤–∞—Ä', '–∫–∞–º–µ—Ä', '–ø—Ä–æ–≤–µ—Ä'],  
  'rate-service': ['–æ—Ü–µ–Ω–∏', '–ø–≤–∑', '–ø—Ä–∏–ª–æ–∂–µ–Ω']
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
const getPossibleKeys = (audioKey: string): string[] => {
  const possibleKeys = [
    audioKey, // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    `delivery-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º delivery
    `acceptance-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º acceptance 
    `returns-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º returns
    `general-${audioKey}` // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º general
  ];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
  if (KEY_MAPPINGS[audioKey]) {
    possibleKeys.push(...KEY_MAPPINGS[audioKey]);
  }
  
  return possibleKeys;
};

// –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
const smartSearch = (audioKey: string, availableKeys: string[]): string | null => {
  console.log(`üîç –ó–ê–ü–£–°–ö–ê–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö –¥–ª—è "${audioKey}"...`);
  
  // –ò—â–µ–º –∫–ª—é—á–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏–∑ –∏—Å–∫–æ–º–æ–≥–æ
  const searchWords = audioKey.toLowerCase().split('-');
  console.log(`üî§ –ò—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º:`, searchWords);
  
  for (const availKey of availableKeys) {
    const availKeyLower = availKey.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    for (const word of searchWords) {
      if (word.length > 2 && availKeyLower.includes(word)) {
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${word}"`);
        return availKey;
      }
    }
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const keywords = RUSSIAN_KEYWORDS[audioKey] || [];
  console.log(`üî§ –ò—â–µ–º –ø–æ —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–∞–º –¥–ª—è "${audioKey}":`, keywords);
  
  for (const availKey of availableKeys) {
    const availKeyLower = availKey.toLowerCase();
    
    for (const keyword of keywords) {
      if (availKeyLower.includes(keyword)) {
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –ü–û –†–£–°–°–ö–û–ú–£ –°–õ–û–í–£: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${keyword}"`);
        return availKey;
      }
    }
  }
  
  return null;
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
const playAudioFile = async (audioUrl: string, foundKey: string): Promise<void> => {
  console.log(`üéµ –ù–ê–ô–î–ï–ù –§–ê–ô–õ "${foundKey}"`);
  console.log(`üîó URL:`, audioUrl.substring(0, 50) + '...');
  
  try {
    const audio = new Audio(audioUrl);
    audio.volume = 0.8;
    audio.playbackRate = getPlaybackRate();
    
    console.log(`‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...`);
    await audio.play();
    console.log(`‚úÖ –ó–í–£–ö –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${foundKey}`);
  } catch (audioError) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${foundKey}":`, audioError);
    console.error(`‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:`, {
      name: audioError.name,
      message: audioError.message,
      audioUrl: audioUrl.substring(0, 100)
    });
    throw audioError;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
export const playAudio = async (audioKey: string, customAudioFiles: {[key: string]: string}): Promise<void> => {
  try {
    console.log(`üîä === –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò ===`);
    console.log(`üéØ –ö–õ–Æ–ß: "${audioKey}"`);
    
    // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö
    diagnoseCellAudio(audioKey, customAudioFiles);
    
    console.log(`üìÅ –í–°–ï–ì–û –§–ê–ô–õ–û–í:`, Object.keys(customAudioFiles).length);
    console.log(`üíæ –ü–ï–†–í–´–ï 10 –ö–õ–Æ–ß–ï–ô:`, Object.keys(customAudioFiles).slice(0, 10));
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===`);
    console.log(`üéØ –ò–©–ï–ú –ö–õ–Æ–ß: "${audioKey}"`);
    console.log(`üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ö–õ–Æ–ß–ò (${Object.keys(customAudioFiles).length} —à—Ç.):`);
    Object.keys(customAudioFiles).forEach((key, index) => {
      const isExact = key === audioKey;
      const includes = key.includes(audioKey) || audioKey.includes(key);
      console.log(`  ${index + 1}. "${key}" ${isExact ? 'üéØ –¢–û–ß–ù–û–ï!' : includes ? 'üîç –ü–û–•–û–ñ–ï–ï!' : ''}`);
    });
    console.log(`üíæ –°–û–î–ï–†–ñ–ò–ú–û–ï localStorage:`, localStorage.getItem('wb-audio-files')?.substring(0, 200) + '...');
    
    // –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
    if (customAudioFiles[audioKey]) {
      console.log(`üéµ –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${audioKey}"`);
      await playAudioFile(customAudioFiles[audioKey], audioKey);
      return;
    }

    const possibleKeys = getPossibleKeys(audioKey);
    console.log(`üîç –ü–†–û–í–ï–†–Ø–Æ –ö–õ–Æ–ß–ò:`, possibleKeys);
    
    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
    let foundKey = null;
    let audioUrl = null;
    
    for (const key of possibleKeys) {
      if (customAudioFiles[key]) {
        foundKey = key;
        audioUrl = customAudioFiles[key];
        break;
      }
    }
    
    // –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù - –ü–†–û–ë–£–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö
    if (!audioUrl || !foundKey) {
      const availableKeys = Object.keys(customAudioFiles);
      const smartFoundKey = smartSearch(audioKey, availableKeys);
      
      if (smartFoundKey) {
        foundKey = smartFoundKey;
        audioUrl = customAudioFiles[smartFoundKey];
      }
    }

    if (audioUrl && foundKey) {
      await playAudioFile(audioUrl, foundKey);
      return;
    } else {
      // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö  
      if (isCellKey(audioKey)) {
        console.warn(`üè† –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${audioKey}" –ù–ï –ù–ê–ô–î–ï–ù–ê`);
        console.log(`üí° –£ –≤–∞—Å –µ—Å—Ç—å ${Object.keys(customAudioFiles).filter(k => isCellKey(k)).length} –æ–∑–≤—É—á–µ–∫ —è—á–µ–µ–∫, –Ω–æ –Ω–µ –¥–ª—è —ç—Ç–æ–π`);
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫`);
        return;
      }
      
      console.log(`‚ö†Ô∏è –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù –î–õ–Ø "${audioKey}"`);
      console.log(`üîç –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò:`, possibleKeys);
      console.log(`üìã –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´ (–ø–µ—Ä–≤—ã–µ 10):`, Object.keys(customAudioFiles).slice(0, 10));
      console.log(`‚ùå –ó–í–£–ö –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è "${audioKey}" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${audioKey}":`, error);
  }
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —è—á–µ–π–∫–∏
export const playCellAudio = async (cellNumber: string, customAudioFiles: {[key: string]: string}): Promise<void> => {
  try {
    console.log(`üîä –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏: ${cellNumber}`);
    console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
    const cellKey = `cell-${cellNumber}`;
    const audioUrl = customAudioFiles[cellKey];
    
    if (audioUrl) {
      console.log(`üéµ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
      await playAudioFile(audioUrl, cellKey);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ ${cellNumber}`);
      return;
    } else {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á: ${cellKey})`);
    }
    
    // –í–°–¢–†–û–ï–ù–ù–´–ô –ó–í–£–ö –î–õ–Ø –Ø–ß–ï–ï–ö –¢–û–ñ–ï –û–¢–ö–õ–Æ–ß–ï–ù
    console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
    console.log(`‚ùå –ó–í–£–ö –Ø–ß–ï–ô–ö–ò –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª cell-${cellNumber}.mp3 –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
  }
};