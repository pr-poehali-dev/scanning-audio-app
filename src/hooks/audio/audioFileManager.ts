import { convertBlobToBase64 } from './audioUtils';
import { saveAudioFiles, saveCellSettings, clearAudioStorage } from './audioStorage';

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π blob URL –≤ base64
export const updateAudioFiles = async (
  files: {[key: string]: string},
  customAudioFiles: {[key: string]: string},
  setCustomAudioFiles: (files: {[key: string]: string}) => void
): Promise<void> => {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã. –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:`, Object.keys(files));
  console.log(`üìÑ –¢–∏–ø—ã URL –≤ files:`, Object.entries(files).map(([key, url]) => ({ key, isBlob: url.startsWith('blob:') })));
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob URL –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const permanentFiles: {[key: string]: string} = {};
  
  for (const [key, url] of Object.entries(files)) {
    if (url.startsWith('blob:')) {
      try {
        const base64Url = await convertBlobToBase64(url);
        permanentFiles[key] = base64Url;
        console.log(`‚úÖ –§–∞–π–ª "${key}" –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ base64 –≤–∞–ª–∏–¥–Ω—ã–π
        if (!base64Url.startsWith('data:')) {
          console.error(`‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª "${key}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64!`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ "${key}":`, error);
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ FileReader
        try {
          const response = await fetch(url);
          const blob = await response.blob();
          const reader = new FileReader();
          const base64Promise = new Promise<string>((resolve) => {
            reader.onload = () => resolve(reader.result as string);
            reader.readAsDataURL(blob);
          });
          const base64Url = await base64Promise;
          permanentFiles[key] = base64Url;
          console.log(`‚úÖ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –§–∞–π–ª "${key}" —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ FileReader`);
        } catch (retryError) {
          console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å "${key}":`, retryError);
          permanentFiles[key] = url; // Fallback –∫ blob URL
        }
      }
    } else {
      permanentFiles[key] = url;
    }
  }
  
  const updatedFiles = { ...customAudioFiles, ...permanentFiles };
  
  // üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í –Ø–ß–ï–ï–ö –ü–†–Ø–ú–û –ó–î–ï–°–¨
  console.log('üîß === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —è—á–µ–π–∫–∞–º–∏
  const cellKeys = Object.keys(updatedFiles).filter(key => 
    /^\d+$/.test(key) || 
    key.includes('cell-') || 
    key.includes('—è—á–µ–π–∫–∞') ||
    key.includes('–∫–æ—Ä–æ–±–∫–∞') ||
    key.includes('box')
  );
  
  console.log(`üè† –ù–∞–π–¥–µ–Ω–æ ${cellKeys.length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫:`, cellKeys);
  
  // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –í–û –í–°–ï –§–û–†–ú–ê–¢–´
  const syncedFiles = { ...updatedFiles };
  
  cellKeys.forEach(originalKey => {
    const audioUrl = updatedFiles[originalKey];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (/^\d+$/.test(originalKey)) {
      syncedFiles[originalKey] = audioUrl; // 44
      syncedFiles[`cell-${originalKey}`] = audioUrl; // cell-44  
      syncedFiles[`—è—á–µ–π–∫–∞-${originalKey}`] = audioUrl; // —è—á–µ–π–∫–∞-44
      console.log(`üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê –Ø–ß–ï–ô–ö–ê: ${originalKey} ‚Üí 3 —Ñ–æ—Ä–º–∞—Ç–∞`);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å cell- –ø—Ä–µ—Ñ–∏–∫—Å - —Å–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã  
    if (originalKey.startsWith('cell-')) {
      const number = originalKey.replace('cell-', '');
      syncedFiles[number] = audioUrl; // 44
      syncedFiles[originalKey] = audioUrl; // cell-44
      syncedFiles[`—è—á–µ–π–∫–∞-${number}`] = audioUrl; // —è—á–µ–π–∫–∞-44
      console.log(`üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù CELL-: ${originalKey} ‚Üí 3 —Ñ–æ—Ä–º–∞—Ç–∞`);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —è—á–µ–π–∫–∞- –ø—Ä–µ—Ñ–∏–∫—Å
    if (originalKey.startsWith('—è—á–µ–π–∫–∞-')) {
      const number = originalKey.replace('—è—á–µ–π–∫–∞-', '');
      syncedFiles[number] = audioUrl; // 44
      syncedFiles[`cell-${number}`] = audioUrl; // cell-44  
      syncedFiles[originalKey] = audioUrl; // —è—á–µ–π–∫–∞-44
      console.log(`üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê –Ø–ß–ï–ô–ö–ê-: ${originalKey} ‚Üí 3 —Ñ–æ—Ä–º–∞—Ç–∞`);
    }
  });
  
  console.log(`üîß –ò–¢–û–ì–û –ü–û–°–õ–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: ${Object.keys(syncedFiles).length} —Ñ–∞–π–ª–æ–≤`);
  
  setCustomAudioFiles(syncedFiles);
  
  // üîí –ú–£–õ–¨–¢–ò–°–û–•–†–ê–ù–ï–ù–ò–ï –í 10 –ú–ï–°–¢–ê–• –¥–ª—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫
  const cellFiles = Object.fromEntries(
    Object.entries(syncedFiles).filter(([key]) => 
      /^\d+$/.test(key) || key.includes('cell-') || key.includes('—è—á–µ–π–∫–∞')
    )
  );
  
  if (Object.keys(cellFiles).length > 0) {
    console.log(`üè† –°–æ—Ö—Ä–∞–Ω—è—é ${Object.keys(cellFiles).length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫ –≤ 10 –º–µ—Å—Ç–∞—Ö`);
    
    const cellBackupKeys = [
      'wb-audio-files',
      'wb-audio-files-cells-backup',
      'wb-audio-files-cells-backup-2', 
      'wb-audio-files-cells-backup-3',
      'wb-audio-files-cells-emergency',
      'wb-pvz-cells-permanent',
      'wb-pvz-cells-never-delete',
      'wb-pvz-cells-ultimate-backup',
      'wb-pvz-acceptance-cells',
      'wb-NEVER-LOSE-CELLS-BACKUP'
    ];
    
    cellBackupKeys.forEach(key => {
      try {
        localStorage.setItem(key, JSON.stringify(syncedFiles)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º syncedFiles
        localStorage.setItem(`${key}-timestamp`, new Date().toISOString());
      } catch (err) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è—á–µ–π–∫–∏ –≤ ${key}:`, err);
      }
    });
    
    console.log(`‚úÖ –Ø–ß–ï–ô–ö–ò –°–û–•–†–ê–ù–ï–ù–´ –í ${cellBackupKeys.length} –ú–ï–°–¢–ê–•!`);
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤  
  saveAudioFiles(syncedFiles); // –ò—Å–ø–æ–ª—å–∑—É–µ–º syncedFiles
  saveCellSettings(syncedFiles); // –ò—Å–ø–æ–ª—å–∑—É–µ–º syncedFiles
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
export const removeAudioFile = (
  audioKey: string,
  customAudioFiles: {[key: string]: string},
  setCustomAudioFiles: (files: {[key: string]: string}) => void
): void => {
  const updatedFiles = { ...customAudioFiles };
  delete updatedFiles[audioKey];
  setCustomAudioFiles(updatedFiles);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  saveAudioFiles(updatedFiles);
};

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
export const clearAllAudio = (setCustomAudioFiles: (files: {[key: string]: string}) => void): void => {
  setCustomAudioFiles({});
  clearAudioStorage();
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
export const getLoadedFiles = (customAudioFiles: {[key: string]: string}): string[] => {
  return Object.keys(customAudioFiles);
};