import { useState, useEffect } from 'react';
import { Order } from '@/data/mockOrders';

export interface PvzInfo {
  id: string;
  address: string;
  employeeId: string;
}

export interface AudioSettings {
  speed: number;
  activeTab: string;
  phrases: Record<string, any>;
  enabled: Record<string, boolean>;
}

export const useAppState = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [activeTab, setActiveTab] = useState('acceptance');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showSideMenu, setShowSideMenu] = useState(false);
  const [scannedData, setScannedData] = useState<string>('');

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏
  const [deliveryStep, setDeliveryStep] = useState<'initial' | 'client-scanned' | 'product-scanned' | 'completed'>('initial');
  const [isProductScanned, setIsProductScanned] = useState(false);
  const [currentOrder, setCurrentOrder] = useState<Order | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [expandedMenuItems, setExpandedMenuItems] = useState<{ [key: string]: boolean }>(() => {
    const saved = localStorage.getItem('wb-pvz-expanded-menu');
    return saved ? JSON.parse(saved) : { settings: false };
  });

  const [pvzInfo, setPvzInfo] = useState<PvzInfo>({
    id: localStorage.getItem('wb-pvz-id') || '',
    address: localStorage.getItem('wb-pvz-address') || '',
    employeeId: localStorage.getItem('wb-pvz-employee-id') || ''
  });

  const [audioSettings, setAudioSettings] = useState<AudioSettings>({
    speed: parseFloat(localStorage.getItem('wb-pvz-audio-speed') || '1'),
    activeTab: localStorage.getItem('wb-pvz-audio-tab') || 'delivery',
    phrases: JSON.parse(localStorage.getItem('wb-pvz-audio-phrases') || '{}'),
    enabled: JSON.parse(localStorage.getItem('wb-pvz-audio-enabled') || '{}')
  });

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const savedAudioFiles = localStorage.getItem('wb-pvz-uploaded-audio-files');
    if (savedAudioFiles) {
      try {
        const fileNames = JSON.parse(savedAudioFiles);
        console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${fileNames.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage`);
        // –ó–¥–µ—Å—å –º–æ–≥–ª–∏ –±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã, –Ω–æ URL –æ–±—ä–µ–∫—Ç—ã –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', e);
      }
    }
  }, []);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    activeTab,
    setActiveTab,
    phoneNumber,
    setPhoneNumber,
    isScanning,
    setIsScanning,
    showQRScanner,
    setShowQRScanner,
    showSettings,
    setShowSettings,
    showSideMenu,
    setShowSideMenu,
    scannedData,
    setScannedData,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏
    deliveryStep,
    setDeliveryStep,
    isProductScanned,
    setIsProductScanned,
    currentOrder,
    setCurrentOrder,

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    expandedMenuItems,
    setExpandedMenuItems,
    pvzInfo,
    setPvzInfo,
    audioSettings,
    setAudioSettings,
  };
};