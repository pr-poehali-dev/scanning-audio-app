import { useCallback } from 'react';
import { findOrderByPhone } from '@/data/mockOrders';

interface QRHandlersProps {
  activeTab: string;
  deliveryStep: string;
  customAudioFiles: Record<string, string>;
  playAudio: (key: string) => Promise<void>;
  setIsScanning: (value: boolean) => void;
  setShowQRScanner: (value: boolean) => void;
  setCurrentOrder: (order: any) => void;
  setDeliveryStep: (step: any) => void;
  setScannedData: (data: string) => void;
  setIsProductScanned: (value: boolean) => void;
}

// üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏
export const playCellAudioSafely = async (
  cellNumber: string, 
  playAudio: (key: string) => Promise<void>
): Promise<boolean> => {
  console.log(`üõ°Ô∏è === –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ${cellNumber} ===`);
  
  try {
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–£–Æ –°–ò–°–¢–ï–ú–£
    const { playCellAudio } = await import('@/utils/bulletproofAudio');
    
    const success = await playCellAudio(cellNumber);
    
    if (success) {
      console.log(`‚úÖ –£–°–ü–ï–•! –Ø—á–µ–π–∫–∞ ${cellNumber} –æ–∑–≤—É—á–µ–Ω–∞ –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û!`);
      return true;
    } else {
      console.warn(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –Ø—á–µ–π–∫–∞ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –≤ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–π —Å–∏—Å—Ç–µ–º–µ!`);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã:`, error);
    return false;
  }
};

export const createQRHandlers = (props: QRHandlersProps) => {
  const {
    activeTab, deliveryStep, customAudioFiles, playAudio,
    setIsScanning, setShowQRScanner, setCurrentOrder, setDeliveryStep,
    setScannedData, setIsProductScanned
  } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScan = useCallback(async () => {
    if (activeTab === 'delivery') {
      // –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –≤—ã–¥–∞—á–∏
      setIsScanning(true);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
      const testPhones = ['7589', '4321', '8899', '1144', '3366']; // 7589 = –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
      const randomPhone = testPhones[Math.floor(Math.random() * testPhones.length)];
      const order = findOrderByPhone(randomPhone);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(async () => {
        
        if (order) {
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          setScannedData(`qr-${order.id}-${order.phone}`);
          
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order.customerName, '–Ø—á–µ–π–∫–∞:', order.cellNumber);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –æ—Ç 1 –¥–æ 482
          const randomCellNumber = Math.floor(Math.random() * 482) + 1;
          order.cellNumber = randomCellNumber.toString();
          
          // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏
          console.log(`üè† === –ù–ê–î–ï–ñ–ù–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ${order.cellNumber} ===`);
          
          await playCellAudioSafely(order.cellNumber, playAudio);
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û
          console.log('üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ö–ò–î–ö–ê...');
          try {
            const { playSystemAudio } = await import('@/utils/bulletproofAudio');
            const discountSuccess = await playSystemAudio('discount');
            if (discountSuccess) {
              console.log('‚úÖ –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û: –°–∫–∏–¥–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!');
            } else {
              console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –°–∫–∏–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ');
            }
          } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:', error);
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
          
        } else {
          console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...');
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const testOrder = findOrderByPhone('7589'); // –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
          if (testOrder) {
            setCurrentOrder(testOrder);
            setDeliveryStep('client-scanned');
            
            await playCellAudioSafely(testOrder.cellNumber, playAudio);
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            try {
              await playAudio('discount');
            } catch (error) {
              console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
        }
        
      }, 300); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    } else if (activeTab === 'acceptance') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
        const acceptanceAudios = [
          'acceptance-–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó',
          '–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', 
          'acceptance-scan-success',
          'scan-success',
          'acceptance-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of acceptanceAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –ü–†–ò–ï–ú–ö–ê: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –ü–†–ò–ï–ú–ö–ê: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else if (activeTab === 'returns') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const returnAudios = [
          'returns-–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          '–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          'returns-scan-success', 
          'return-success',
          'returns-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of returnAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –í–û–ó–í–†–ê–¢: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –í–û–ó–í–†–ê–¢: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–∫–∞–Ω–µ—Ä
      setShowQRScanner(true);
    }
  }, [activeTab, playAudio, setIsScanning, setShowQRScanner, setCurrentOrder, setDeliveryStep, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScanResult = useCallback(async (data: string) => {
    console.log('üì± QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:', data);
    setScannedData(data);
    setIsScanning(true);
    
    if (activeTab === 'delivery') {
      if (deliveryStep === 'initial') {
        // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - QR –∫–ª–∏–µ–Ω—Ç–∞/–∫—É—Ä—å–µ—Ä–∞
        console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ QR –∫–æ–¥–∞
        let phoneDigits = '';
        
        // –ò—â–µ–º 4 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        const phoneMatch = data.match(/(\d{4})$/);
        if (phoneMatch) {
          phoneDigits = phoneMatch[1];
        } else {
          // –ò—â–µ–º –ª—é–±—ã–µ 4 —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
          const allDigits = data.replace(/\D/g, '');
          if (allDigits.length >= 4) {
            phoneDigits = allDigits.slice(-4);
          }
        }
        
        console.log('üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneDigits);
        
        // –ò—â–µ–º –∑–∞–∫–∞–∑
        const order = findOrderByPhone(phoneDigits);
        
        if (order) {
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order);
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò
          console.log(`üîä –û–∑–≤—É—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É: ${order.cellNumber}`);
          await playCellAudioSafely(order.cellNumber, playAudio);
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û
          console.log('üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ö–ò–î–ö–ê...');
          try {
            const { playSystemAudio } = await import('@/utils/bulletproofAudio');
            const discountSuccess = await playSystemAudio('discount');
            if (discountSuccess) {
              console.log('‚úÖ –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û: –°–∫–∏–¥–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!');
            } else {
              console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –°–∫–∏–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ');
            }
          } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:', error);
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
          
        } else {
          console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...');
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const testOrder = findOrderByPhone('7589'); // –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
          if (testOrder) {
            setCurrentOrder(testOrder);
            setDeliveryStep('client-scanned');
            
            await playCellAudioSafely(testOrder.cellNumber, playAudio);
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            try {
              await playAudio('discount');
            } catch (error) {
              console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
        }
        
      } else if (deliveryStep === 'client-scanned') {
        // –í—Ç–æ—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
        console.log('üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setDeliveryStep('product-scanned');
        setIsProductScanned(true);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π" –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û
        try {
          const { playSystemAudio } = await import('@/utils/bulletproofAudio');
          const checkSuccess = await playSystemAudio('check-product');
          if (checkSuccess) {
            console.log('‚úÖ –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä" –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!');
          } else {
            console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ');
          }
        } catch (error) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        }
        
        // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
        setIsScanning(false);
      }
    } else if (activeTab === 'receiving') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      try {
        await playAudio('receiving-start');
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
      
    } else if (activeTab === 'returns') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      try {
        await playAudio('return-start');
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
      
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
      let audioKey = 'scan-success';
      
      if (data.includes('check_product') || data.includes('–ø—Ä–æ–≤–µ—Ä—å')) {
        audioKey = 'check-product-camera';
      } else if (data.includes('discount') || data.includes('—Å–∫–∏–¥–∫–∞')) {
        audioKey = 'discount';
      } else if (data.includes('rate') || data.includes('–æ—Ü–µ–Ω–∏—Ç–µ')) {
        audioKey = 'rate-pickup-point';
      } else if (data.includes('client') || data.includes('–∫–ª–∏–µ–Ω—Ç')) {
        audioKey = 'client-found';
      }
      
      try {
        await playAudio(audioKey);
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
    }
  }, [playAudio, activeTab, deliveryStep, customAudioFiles, setScannedData, setIsScanning, setCurrentOrder, setDeliveryStep, setIsProductScanned]);

  return {
    handleQRScan,
    handleQRScanResult
  };
};