import { useCallback } from 'react';
import { findOrderByPhone } from '@/data/mockOrders';

interface QRHandlersProps {
  activeTab: string;
  deliveryStep: string;
  customAudioFiles: Record<string, string>;
  playAudio: (key: string) => Promise<void>;
  setIsScanning: (value: boolean) => void;
  setShowQRScanner: (value: boolean) => void;
  setCurrentOrder: (order: any) => void;
  setDeliveryStep: (step: any) => void;
  setScannedData: (data: string) => void;
  setIsProductScanned: (value: boolean) => void;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
export const playCellAudioSafely = async (
  cellNumber: string, 
  playAudio: (key: string) => Promise<void>
): Promise<boolean> => {
  console.log(`üè† === –ù–ê–ß–ò–ù–ê–Æ –û–ó–í–£–ß–ö–£ –Ø–ß–ï–ô–ö–ò ${cellNumber} ===`);
  
  // –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• –ö–õ–Æ–ß–ï–ô –î–õ–Ø –Ø–ß–ï–ô–ö–ò
  const cellAudioKeys = [
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∞—è –æ–∑–≤—É—á–∫–∞)
    'cell-number',           // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏
    cellNumber,              // "A1", "123"  
    `cell-${cellNumber}`,    // "cell-A1", "cell-123"
    `—è—á–µ–π–∫–∞-${cellNumber}`,  // "—è—á–µ–π–∫–∞-A1", "—è—á–µ–π–∫–∞-123"
    `–Ø—á–µ–π–∫–∞ ${cellNumber}`,  // "–Ø—á–µ–π–∫–∞ A1", "–Ø—á–µ–π–∫–∞ 123"
    `delivery-cell-${cellNumber}`, // "delivery-cell-A1"
    `audio_${cellNumber}`,   // "audio_A1", "audio_123"
    `cell_${cellNumber}`,    // "cell_A1", "cell_123"
    `${cellNumber}.mp3`,     // "A1.mp3", "123.mp3"
    cellNumber.toLowerCase(), // "a1"
    `cell_audio_${cellNumber}`, // "cell_audio_A1" (–Ω–∞—à –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    `${cellNumber}-cell`,    // "A1-cell", "123-cell"
    `–Ω–æ–º–µ—Ä-${cellNumber}`,   // "–Ω–æ–º–µ—Ä-A1"
    `—è—â–∏–∫-${cellNumber}`,    // "—è—â–∏–∫-A1"
  ];
  
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é ${cellAudioKeys.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–ª—é—á–µ–π:`, cellAudioKeys);
  
  for (const key of cellAudioKeys) {
    try {
      console.log(`üß™ –ü—Ä–æ–±—É—é –∫–ª—é—á: "${key}"`);
      await playAudio(key);
      console.log(`‚úÖ –£–°–ü–ï–•! –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò –ù–ê–ô–î–ï–ù–ê –ü–û–î –ö–õ–Æ–ß–û–ú: "${key}"`);
      return true;
    } catch (error) {
      console.log(`‚ùå –ö–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è`);
    }
  }
  
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê - –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö –í LOCALSTORAGE
  console.log(`üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –∏—â—É —Ñ–∞–π–ª—ã –≤ localStorage...`);
  
  try {
    // –ò—â–µ–º –≤ wb-audio-files
    const wbAudioData = localStorage.getItem('wb-audio-files');
    if (wbAudioData) {
      const audioFiles = JSON.parse(wbAudioData);
      const allKeys = Object.keys(audioFiles);
      
      // –ò—â–µ–º –∫–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      const matchingKeys = allKeys.filter(key => 
        key.includes(cellNumber) || 
        key.includes(cellNumber.toLowerCase()) ||
        key.includes(cellNumber.toUpperCase())
      );
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${matchingKeys.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–ª—é—á–µ–π –≤ wb-audio-files:`, matchingKeys);
      
      for (const matchingKey of matchingKeys) {
        try {
          console.log(`üß™ –ü—Ä–æ–±—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á: "${matchingKey}"`);
          await playAudio(matchingKey);
          console.log(`‚úÖ –£–°–ü–ï–•! –ù–ê–ô–î–ï–ù –§–ê–ô–õ –ü–û–î –ö–õ–Æ–ß–û–ú: "${matchingKey}"`);
          return true;
        } catch (error) {
          console.log(`‚ùå –ö–ª—é—á "${matchingKey}" –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è`);
        }
      }
    }
    
    // –ò—â–µ–º –≤ –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª—é—á–∞—Ö localStorage
    const simpleKey = `cell_audio_${cellNumber}`;
    const simpleData = localStorage.getItem(simpleKey);
    if (simpleData) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á: ${simpleKey}`);
      try {
        const audio = new Audio(simpleData);
        audio.volume = 0.8;
        await audio.play();
        console.log(`‚úÖ –£–°–ü–ï–•! –ü–†–û–°–¢–û–ô –ö–õ–Æ–ß –°–†–ê–ë–û–¢–ê–õ: "${simpleKey}"`);
        return true;
      } catch (error) {
        console.log(`‚ùå –ü—Ä–æ—Å—Ç–æ–π –∫–ª—é—á "${simpleKey}" –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:`, error);
      }
    }
    
  } catch (storageError) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ localStorage:`, storageError);
  }
  
  console.warn(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${cellNumber}" –ù–ï –ù–ê–ô–î–ï–ù–ê –ù–ò–ì–î–ï!`);
  console.log(`üí° –†–ï–®–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —á–µ—Ä–µ–∑ –ø–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —è—á–µ–π–∫–∏`);
  return false;
};

export const createQRHandlers = (props: QRHandlersProps) => {
  const {
    activeTab, deliveryStep, customAudioFiles, playAudio,
    setIsScanning, setShowQRScanner, setCurrentOrder, setDeliveryStep,
    setScannedData, setIsProductScanned
  } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScan = useCallback(async () => {
    if (activeTab === 'delivery') {
      // –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –≤—ã–¥–∞—á–∏
      setIsScanning(true);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
      const testPhones = ['7589', '4321', '8899', '1144', '3366']; // 7589 = –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
      const randomPhone = testPhones[Math.floor(Math.random() * testPhones.length)];
      const order = findOrderByPhone(randomPhone);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(async () => {
        
        if (order) {
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          setScannedData(`qr-${order.id}-${order.phone}`);
          
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order.customerName, '–Ø—á–µ–π–∫–∞:', order.cellNumber);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –æ—Ç 1 –¥–æ 482
          const randomCellNumber = Math.floor(Math.random() * 482) + 1;
          order.cellNumber = randomCellNumber.toString();
          
          // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏
          console.log(`üè† === –ù–ê–î–ï–ñ–ù–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ${order.cellNumber} ===`);
          
          await playCellAudioSafely(order.cellNumber, playAudio);
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É
          console.log('üîä –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò –°–ö–ò–î–ö–£...');
          try {
            await playAudio('discount');
          } catch (error) {
            console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
          
        } else {
          console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...');
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const testOrder = findOrderByPhone('7589'); // –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
          if (testOrder) {
            setCurrentOrder(testOrder);
            setDeliveryStep('client-scanned');
            
            await playCellAudioSafely(testOrder.cellNumber, playAudio);
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            try {
              await playAudio('discount');
            } catch (error) {
              console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
        }
        
      }, 300); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    } else if (activeTab === 'acceptance') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
        const acceptanceAudios = [
          'acceptance-–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó',
          '–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', 
          'acceptance-scan-success',
          'scan-success',
          'acceptance-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of acceptanceAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –ü–†–ò–ï–ú–ö–ê: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –ü–†–ò–ï–ú–ö–ê: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else if (activeTab === 'returns') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const returnAudios = [
          'returns-–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          '–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          'returns-scan-success', 
          'return-success',
          'returns-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of returnAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –í–û–ó–í–†–ê–¢: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –í–û–ó–í–†–ê–¢: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–∫–∞–Ω–µ—Ä
      setShowQRScanner(true);
    }
  }, [activeTab, playAudio, setIsScanning, setShowQRScanner, setCurrentOrder, setDeliveryStep, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScanResult = useCallback(async (data: string) => {
    console.log('üì± QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:', data);
    setScannedData(data);
    setIsScanning(true);
    
    if (activeTab === 'delivery') {
      if (deliveryStep === 'initial') {
        // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - QR –∫–ª–∏–µ–Ω—Ç–∞/–∫—É—Ä—å–µ—Ä–∞
        console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ QR –∫–æ–¥–∞
        let phoneDigits = '';
        
        // –ò—â–µ–º 4 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        const phoneMatch = data.match(/(\d{4})$/);
        if (phoneMatch) {
          phoneDigits = phoneMatch[1];
        } else {
          // –ò—â–µ–º –ª—é–±—ã–µ 4 —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
          const allDigits = data.replace(/\D/g, '');
          if (allDigits.length >= 4) {
            phoneDigits = allDigits.slice(-4);
          }
        }
        
        console.log('üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneDigits);
        
        // –ò—â–µ–º –∑–∞–∫–∞–∑
        const order = findOrderByPhone(phoneDigits);
        
        if (order) {
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order);
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò
          console.log(`üîä –û–∑–≤—É—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É: ${order.cellNumber}`);
          await playCellAudioSafely(order.cellNumber, playAudio);
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É
          console.log('üîä –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò –°–ö–ò–î–ö–£...');
          try {
            await playAudio('discount');
          } catch (error) {
            console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
          
        } else {
          console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...');
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const testOrder = findOrderByPhone('7589'); // –ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
          if (testOrder) {
            setCurrentOrder(testOrder);
            setDeliveryStep('client-scanned');
            
            await playCellAudioSafely(testOrder.cellNumber, playAudio);
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            try {
              await playAudio('discount');
            } catch (error) {
              console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
          }
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
          setIsScanning(false);
        }
        
      } else if (deliveryStep === 'client-scanned') {
        // –í—Ç–æ—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
        console.log('üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setDeliveryStep('product-scanned');
        setIsProductScanned(true);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
        try {
          await playAudio('check-product-camera');
        } catch (error) {
          try {
            await playAudio('check-product');
          } catch (error2) {
            console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }
        }
        
        // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°
        setIsScanning(false);
      }
    } else if (activeTab === 'receiving') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      try {
        await playAudio('receiving-start');
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
      
    } else if (activeTab === 'returns') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      try {
        await playAudio('return-start');
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
      
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
      let audioKey = 'scan-success';
      
      if (data.includes('check_product') || data.includes('–ø—Ä–æ–≤–µ—Ä—å')) {
        audioKey = 'check-product-camera';
      } else if (data.includes('discount') || data.includes('—Å–∫–∏–¥–∫–∞')) {
        audioKey = 'discount';
      } else if (data.includes('rate') || data.includes('–æ—Ü–µ–Ω–∏—Ç–µ')) {
        audioKey = 'rate-pickup-point';
      } else if (data.includes('client') || data.includes('–∫–ª–∏–µ–Ω—Ç')) {
        audioKey = 'client-found';
      }
      
      try {
        await playAudio(audioKey);
      } catch (error) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      setIsScanning(false);
    }
  }, [playAudio, activeTab, deliveryStep, customAudioFiles, setScannedData, setIsScanning, setCurrentOrder, setDeliveryStep, setIsProductScanned]);

  return {
    handleQRScan,
    handleQRScanResult
  };
};