import { useCallback } from 'react';
import { playCellAudio } from '@/utils/simpleAudioManager';

interface CellAudioHandlersProps {
  playAudio: (key: string) => Promise<void>;
}

export const createCellAudioHandlers = (props: CellAudioHandlersProps) => {
  const { playAudio } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (cellNumber: string) => {
    console.log(`üè† === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –Ø–ß–ï–ô–ö–ï: "${cellNumber}" ===`);
    
    // –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–£–î–ò–û –ö–û–ù–¢–ï–ö–°–¢–ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤)
    try {
      console.log(`üîä –ê–∫—Ç–∏–≤–∏—Ä—É—é –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç...`);
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
      if (AudioContext) {
        const audioContext = new AudioContext();
        if (audioContext.state === 'suspended') {
          await audioContext.resume();
          console.log(`‚úÖ –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        }
      }
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–≤—É–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const testAudio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAAA=');
      testAudio.volume = 0.01;
      await testAudio.play().catch(() => {});
      testAudio.pause();
      console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∑–≤—É–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
    } catch (activationError) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, activationError);
    }
    
    // –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú OBJECT URL –ú–ï–ù–ï–î–ñ–ï–† (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
    console.log(`üîß –ü—Ä–æ–±—É—é Object URL –º–µ–Ω–µ–¥–∂–µ—Ä...`);
    try {
      const { objectUrlAudioManager } = await import('@/utils/objectUrlAudioManager');
      const objectUrlSuccess = await objectUrlAudioManager.playCellAudio(cellNumber);
      if (objectUrlSuccess) {
        console.log(`‚úÖ OBJECT URL –ú–ï–ù–ï–î–ñ–ï–† –°–†–ê–ë–û–¢–ê–õ!`);
        return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
      } else {
        console.warn(`‚ùå OBJECT URL –ú–ï–ù–ï–î–ñ–ï–† –ù–ï –ù–ê–®–ï–õ –§–ê–ô–õ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}"`);
      }
    } catch (objectUrlError) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê OBJECT URL –ú–ï–ù–ï–î–ñ–ï–†–ê:`, objectUrlError);
    }
    
    // –ó–ê–¢–ï–ú –ü–†–û–ë–£–ï–ú DATA URL –ú–ï–ù–ï–î–ñ–ï–†
    console.log(`üîß –ü—Ä–æ–±—É—é Data URL –º–µ–Ω–µ–¥–∂–µ—Ä...`);
    try {
      const success = await playCellAudio(cellNumber);
      if (success) {
        console.log(`‚úÖ DATA URL –ú–ï–ù–ï–î–ñ–ï–† –°–†–ê–ë–û–¢–ê–õ!`);
        return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
      } else {
        console.warn(`‚ùå DATA URL –ú–ï–ù–ï–î–ñ–ï–† –ù–ï –ù–ê–®–ï–õ –§–ê–ô–õ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}"`);
      }
    } catch (dataUrlError) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê DATA URL –ú–ï–ù–ï–î–ñ–ï–†–ê:`, dataUrlError);
    }
    
    // –†–ï–ó–ï–†–í–ù–´–ô –ü–õ–ê–ù - –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–û–ö–ê–õ–°–¢–û–†–ï–ô–î–ñ–ê
    console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä—è—é localStorage –Ω–∞–ø—Ä—è–º—É—é...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const unifiedStorage = localStorage.getItem('wb-audio-files-unified');
    if (unifiedStorage) {
      try {
        const storage = JSON.parse(unifiedStorage);
        console.log(`üîß –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...`);
        
        const cellKeys = [`cell-${cellNumber}`, cellNumber, cellNumber.toString()];
        for (const key of cellKeys) {
          if (storage.cells && storage.cells[key]) {
            console.log(`‚úÖ –ù–ê–ô–î–ï–ù –§–ê–ô–õ –í –ù–û–í–û–ú –•–†–ê–ù–ò–õ–ò–©–ï: ${key}`);
            const audioFile = storage.cells[key];
            
            try {
              const audio = new Audio(audioFile.url);
              audio.volume = 0.8;
              await audio.play();
              console.log(`‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ò–ó –ù–û–í–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê –£–°–ü–ï–®–ù–û!`);
              setTimeout(() => audio.pause(), 2000);
              return;
            } catch (playError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:`, playError);
            }
          }
        }
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:`, parseError);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const mainFiles = localStorage.getItem('wb-audio-files');
    if (mainFiles) {
      const files = JSON.parse(mainFiles);
      const keys = Object.keys(files);
      console.log(`üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ wb-audio-files: ${keys.length}`);
      console.log(`üìã –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π:`, keys.slice(0, 10));
      
      // –ò—â–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫
      const cellKeys = keys.filter(k => k.includes('cell-') || k.includes(cellNumber) || /^\d+$/.test(k));
      console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π —è—á–µ–µ–∫: ${cellKeys.length}`, cellKeys);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –Ω–∞—à –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      const exactKeys = keys.filter(k => k.includes(cellNumber));
      console.log(`üéØ –ö–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "${cellNumber}":`, exactKeys);
      
      if (exactKeys.length > 0) {
        console.log(`üéµ –ü–†–û–ë–£–Æ –ü–†–Ø–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ü–ï–†–í–û–ì–û –ù–ê–ô–î–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê...`);
        const key = exactKeys[0];
        const url = files[key];
        console.log(`üîó URL: ${url.substring(0, 50)}...`);
        
        try {
          const audio = new Audio(url);
          audio.volume = 0.8;
          await audio.play();
          console.log(`‚úÖ –ü–†–Ø–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û!`);
          setTimeout(() => audio.pause(), 2000);
          return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
        } catch (directError) {
          console.error(`‚ùå –ü—Ä—è–º–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ:`, directError);
          console.error(`‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
            name: directError.name,
            message: directError.message,
            code: (directError as any).code
          });
        }
      }
    } else {
      console.error(`‚ùå wb-audio-files –ü–£–°–¢–û–ï!`);
    }
    
    console.warn(`‚ùå –í–°–ï –ü–û–ü–´–¢–ö–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –ü–†–û–í–ê–õ–ò–õ–ò–°–¨ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}"`);
    console.warn(`üìã –†–ï–®–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º "cell-${cellNumber}.mp3" —á–µ—Ä–µ–∑ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –≤ —à–∞–ø–∫–µ`);
  }, []);

  return {
    handleCellClick
  };
};