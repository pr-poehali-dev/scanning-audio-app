import { useCallback } from 'react';
import { playCellAudio } from '@/utils/simpleCellAudio';

interface CellAudioHandlersProps {
  playAudio: (key: string) => Promise<void>;
}

export const createCellAudioHandlers = (props: CellAudioHandlersProps) => {
  const { playAudio } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (cellNumber: string) => {
    console.log(`üè† –ö–õ–ò–ö –ü–û –Ø–ß–ï–ô–ö–ï: "${cellNumber}"`);
    
    // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É
    const success = await playCellAudio(cellNumber);
    if (success) {
      console.log(`‚úÖ –Ø–ß–ï–ô–ö–ê ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É!`);
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    console.log(`‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é...`);
    
    const cellAudioKeys = [
      'cell-number',        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
      cellNumber,           // 123
      `cell-${cellNumber}`, // cell-123  
      `—è—á–µ–π–∫–∞-${cellNumber}` // —è—á–µ–π–∫–∞-123
    ];
    
    for (const key of cellAudioKeys) {
      try {
        await playAudio(key);
        console.log(`‚úÖ –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò –ù–ê–ô–î–ï–ù–ê —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É: ${key}`);
        return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á: ${key}`);
      }
    }
    
    console.warn(`‚ùå –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${cellNumber}" –ù–ï –ù–ê–ô–î–ï–ù–ê –ù–ò –í –û–î–ù–û–ô –°–ò–°–¢–ï–ú–ï!`);
  }, [playAudio]);

  return {
    handleCellClick
  };
};