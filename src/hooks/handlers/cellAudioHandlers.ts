import { useCallback } from 'react';
import { playCellAudio } from '@/utils/simpleAudioManager';

interface CellAudioHandlersProps {
  playAudio: (key: string) => Promise<void>;
}

export const createCellAudioHandlers = (props: CellAudioHandlersProps) => {
  const { playAudio } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (cellNumber: string) => {
    console.log(`üè† === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –Ø–ß–ï–ô–ö–ï: "${cellNumber}" ===`);
    
    // –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–û–ö–ê–õ–°–¢–û–†–ï–ô–î–ñ–ê
    console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä—è—é localStorage –Ω–∞–ø—Ä—è–º—É—é...`);
    const mainFiles = localStorage.getItem('wb-audio-files');
    if (mainFiles) {
      const files = JSON.parse(mainFiles);
      const keys = Object.keys(files);
      console.log(`üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ wb-audio-files: ${keys.length}`);
      console.log(`üìã –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π:`, keys.slice(0, 10));
      
      // –ò—â–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫
      const cellKeys = keys.filter(k => k.includes('cell-') || k.includes(cellNumber) || /^\d+$/.test(k));
      console.log(`üè† –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π —è—á–µ–µ–∫: ${cellKeys.length}`, cellKeys);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –Ω–∞—à –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      const exactKeys = keys.filter(k => k.includes(cellNumber));
      console.log(`üéØ –ö–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "${cellNumber}":`, exactKeys);
      
      if (exactKeys.length > 0) {
        console.log(`üéµ –ü–†–û–ë–£–Æ –ü–†–Ø–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ü–ï–†–í–û–ì–û –ù–ê–ô–î–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê...`);
        const key = exactKeys[0];
        const url = files[key];
        console.log(`üîó URL: ${url.substring(0, 50)}...`);
        
        try {
          const audio = new Audio(url);
          await audio.play();
          console.log(`‚úÖ –ü–†–Ø–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û!`);
          setTimeout(() => audio.pause(), 2000);
          return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
        } catch (directError) {
          console.error(`‚ùå –ü—Ä—è–º–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ:`, directError);
        }
      }
    } else {
      console.error(`‚ùå wb-audio-files –ü–£–°–¢–û–ï!`);
    }
    
    // –¢–ï–ü–ï–†–¨ –ü–†–û–ë–£–ï–ú –ß–ï–†–ï–ó –°–ò–°–¢–ï–ú–£
    console.log(`üîß –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ playCellAudio...`);
    try {
      const success = await playCellAudio(cellNumber);
      if (success) {
        console.log(`‚úÖ –°–ò–°–¢–ï–ú–ê playCellAudio –°–†–ê–ë–û–¢–ê–õ–ê!`);
      } else {
        console.warn(`‚ùå –°–ò–°–¢–ï–ú–ê playCellAudio –ù–ï –ù–ê–®–õ–ê –§–ê–ô–õ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}"`);
        console.warn(`üìã –†–ï–®–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º "cell-${cellNumber}.mp3" —á–µ—Ä–µ–∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –§—Ä–∞–∑—ã –¥–ª—è –æ–∑–≤—É—á–∫–∏ ‚Üí –í—ã–¥–∞—á–∞`);
      }
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´ playCellAudio:`, error);
    }
  }, []);

  return {
    handleCellClick
  };
};