import { useCallback } from 'react';
import { playCellAudio } from '@/utils/cellAudioPlayer';

interface CellAudioHandlersProps {
  playAudio: (key: string) => Promise<void>;
}

export const createCellAudioHandlers = (props: CellAudioHandlersProps) => {
  const { playAudio } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (cellNumber: string) => {
    console.log(`üè† –ö–õ–ò–ö –ü–û –Ø–ß–ï–ô–ö–ï: "${cellNumber}"`);
    
    try {
      const success = await playCellAudio(cellNumber);
      if (success) {
        console.log(`‚úÖ –Ø–ß–ï–ô–ö–ê ${cellNumber} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!`);
      } else {
        console.warn(`‚ùå –û–∑–≤—É—á–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –§—Ä–∞–∑—ã –¥–ª—è –æ–∑–≤—É—á–∫–∏ ‚Üí –í—ã–¥–∞—á–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª "cell-${cellNumber}.mp3"`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ "${cellNumber}":`, error);
    }
  }, []);

  return {
    handleCellClick
  };
};