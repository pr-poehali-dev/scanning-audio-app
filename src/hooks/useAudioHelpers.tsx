import { useCallback } from 'react';

export const useAudioHelpers = (updateAudioFiles: (files: Record<string, string>) => void, customAudioFiles: Record<string, string>) => {
  
  const getTabName = useCallback((tabId: string) => {
    const names: { [key: string]: string } = {
      'delivery': '–í—ã–¥–∞—á–∞',
      'acceptance': '–ü—Ä–∏–µ–º–∫–∞', 
      'returns': '–í–æ–∑–≤—Ä–∞—Ç',
      'general': '–û–±—â–∏–µ'
    };
    return names[tabId] || tabId;
  }, []);

  const handleFolderUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>, tabType: string) => {
    const files = event.target.files;
    console.log('–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è', tabType, ':', files?.length);
    
    if (!files) return;

    const audioFiles: { [key: string]: string } = { ...customAudioFiles };
    let newFilesCount = 0;
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª:', file.name, '–¢–∏–ø:', file.type);
      
      if (file.type.startsWith('audio/')) {
        const baseFileName = file.name.replace(/\.[^/.]+$/, '');
        const audioUrl = URL.createObjectURL(file);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤–∫–ª–∞–¥–∫–∏
        const prefixedFileName = `${tabType}-${baseFileName}`;
        audioFiles[prefixedFileName] = audioUrl;
        
        // –¢–ê–ö–ñ–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        audioFiles[baseFileName] = audioUrl;
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª:`, {
          withPrefix: prefixedFileName,
          global: baseFileName,
          url: audioUrl
        });
        
        newFilesCount++;
      }
    }

    if (newFilesCount > 0) {
      updateAudioFiles(audioFiles);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ localStorage –¥–ª—è –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      try {
        const audioFilesToStore = { ...audioFiles };
        // –£–¥–∞–ª—è–µ–º URL –æ–±—ä–µ–∫—Ç—ã –∏–∑ localStorage (–æ–Ω–∏ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        const fileNames = Object.keys(audioFiles).filter(key => !key.includes('blob:'));
        localStorage.setItem('wb-pvz-uploaded-audio-files', JSON.stringify(fileNames));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${fileNames.length} –Ω–∞–∑–≤–∞–Ω–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage`);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage:', e);
      }
      
      alert(`–î–ª—è –≤–∫–ª–∞–¥–∫–∏ "${getTabName(tabType)}" –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${newFilesCount} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.\n\n‚úÖ –§–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`);
    } else {
      alert('–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp3, .wav, .ogg –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏');
    }

    if (event.target) {
      event.target.value = '';
    }
  }, [updateAudioFiles, customAudioFiles, getTabName]);

  const getPhrasesByTab = useCallback((tabId: string) => {
    const phrases: { [key: string]: string[] } = {
      'delivery': ['–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏!', '–í–µ—Ä–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É'],
      'acceptance': ['–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', '–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∫–∏', '–Ø—á–µ–π–∫–∞ 1', '–Ø—á–µ–π–∫–∞ 2', '–Ø—á–µ–π–∫–∞ 3'],
      'returns': ['–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω', '–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞'],
      'general': ['–û–±—â–∏–π —Å–∏–≥–Ω–∞–ª', '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã']
    };
    return phrases[tabId] || [];
  }, []);

  const getDescriptionsByTab = useCallback((tabId: string) => {
    const descriptions: { [key: string]: { text: string; enabled: boolean }[] } = {
      'delivery': [
        { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É', enabled: true },
        { text: '–°–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–∫–∏', enabled: false }
      ],
      'acceptance': [
        { text: '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞', enabled: true },
        { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ', enabled: true },
        { text: '–û–∑–≤—É—á–∫–∞ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)', enabled: true },
        { text: '–û–∑–≤—É—á–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏ (—Ä–µ–∑–µ—Ä–≤)', enabled: true },
        { text: '–û–∑–≤—É—á–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏ (—Ä–µ–∑–µ—Ä–≤)', enabled: true }
      ],
      'returns': [
        { text: '–£—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞', enabled: true },
        { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ', enabled: false }
      ],
      'general': [
        { text: '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', enabled: true },
        { text: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏', enabled: true }
      ]
    };
    return descriptions[tabId] || [];
  }, []);

  const togglePhraseEnabled = useCallback((tabId: string, phraseIndex: number, audioSettings: any, updateAudioSetting: (key: string, value: any) => void) => {
    const currentEnabled = audioSettings.enabled[`${tabId}-${phraseIndex}`] || false;
    const newEnabled = {
      ...audioSettings.enabled,
      [`${tabId}-${phraseIndex}`]: !currentEnabled
    };
    updateAudioSetting('enabled', newEnabled);
  }, []);

  return {
    getTabName,
    handleFolderUpload,
    getPhrasesByTab,
    getDescriptionsByTab,
    togglePhraseEnabled,
  };
};