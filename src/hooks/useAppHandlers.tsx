import { useCallback } from 'react';
import { findOrderByPhone } from '@/data/mockOrders';
import { PvzInfo, AudioSettings } from './useAppState';

interface UseAppHandlersProps {
  activeTab: string;
  deliveryStep: string;
  currentOrder: any;
  customAudioFiles: Record<string, string>;
  expandedMenuItems: Record<string, boolean>;
  audioSettings: AudioSettings;
  playAudio: (key: string) => Promise<void>;
  updateAudioFiles: (files: Record<string, string>) => void;
  setIsScanning: (value: boolean) => void;
  setShowQRScanner: (value: boolean) => void;
  setCurrentOrder: (order: any) => void;
  setDeliveryStep: (step: any) => void;
  setScannedData: (data: string) => void;
  setIsProductScanned: (value: boolean) => void;
  setPhoneNumber: (value: string) => void;
  setExpandedMenuItems: (items: Record<string, boolean>) => void;
  setPvzInfo: (info: PvzInfo) => void;
  setAudioSettings: (settings: AudioSettings) => void;
}

export const useAppHandlers = (props: UseAppHandlersProps) => {
  const {
    activeTab, deliveryStep, currentOrder, customAudioFiles, expandedMenuItems, audioSettings,
    playAudio, updateAudioFiles, setIsScanning, setShowQRScanner, setCurrentOrder, 
    setDeliveryStep, setScannedData, setIsProductScanned, setPhoneNumber,
    setExpandedMenuItems, setPvzInfo, setAudioSettings
  } = props;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScan = useCallback(async () => {
    if (activeTab === 'delivery') {
      // –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –≤—ã–¥–∞—á–∏
      setIsScanning(true);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
      const testPhones = ['5667', '3321', '8899', '1144', '3366'];
      const randomPhone = testPhones[Math.floor(Math.random() * testPhones.length)];
      const order = findOrderByPhone(randomPhone);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(async () => {
        
        if (order) {
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          setScannedData(`qr-${order.id}-${order.phone}`);
          
          console.log('–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order.customerName, '–Ø—á–µ–π–∫–∞:', order.cellNumber);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –æ—Ç 1 –¥–æ 482
          const randomCellNumber = Math.floor(Math.random() * 482) + 1;
          order.cellNumber = randomCellNumber.toString();
          
          // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏
          console.log(`üè† === –ù–ê–î–ï–ñ–ù–ê–Ø –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò ${order.cellNumber} ===`);
          
          // –ü–†–û–°–¢–û–ô –ø–æ–∏—Å–∫: —Å–Ω–∞—á–∞–ª–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞, –ø–æ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è
          const cellSearchOrder = [
            'cell-number',                      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
            order.cellNumber,                   // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (123)
            `cell-${order.cellNumber}`,        // cell-123
            `—è—á–µ–π–∫–∞-${order.cellNumber}`,      // —è—á–µ–π–∫–∞-123
          ];
          
          let cellAudioPlayed = false;
          console.log(`üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:`, cellSearchOrder);
          console.log(`üì¶ –î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–æ:`, Object.keys(customAudioFiles).length);
          
          for (const audioKey of cellSearchOrder) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é: "${audioKey}"`);
            
            if (customAudioFiles[audioKey]) {
              console.log(`‚úÖ –ù–ê–ô–î–ï–ù –§–ê–ô–õ: "${audioKey}"`);
              console.log(`üîó URL: ${customAudioFiles[audioKey].substring(0, 50)}...`);
              
              // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
              try {
                const audio = new Audio(customAudioFiles[audioKey]);
                audio.volume = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
                
                const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
                if (savedSpeed) {
                  audio.playbackRate = parseFloat(savedSpeed);
                }
                
                // –ü—Ä–æ–º–∏—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                const playPromise = new Promise((resolve, reject) => {
                  audio.onended = resolve;
                  audio.onerror = reject;
                  audio.oncanplaythrough = () => {
                    audio.play().then(resolve).catch(reject);
                  };
                });
                
                await playPromise;
                console.log(`üéµ ‚úÖ –Ø–ß–ï–ô–ö–ê ${order.cellNumber} –£–°–ü–ï–®–ù–û –û–ó–í–£–ß–ï–ù–ê: "${audioKey}"`);
                cellAudioPlayed = true;
                break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                
              } catch (error) {
                console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${audioKey}":`, error);
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ
                continue;
              }
            } else {
              console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù: "${audioKey}"`);
            }
          }
          
          if (cellAudioPlayed) {
            console.log(`‚úÖ –Ø–ß–ï–ô–ö–ê ${order.cellNumber} –£–°–ü–ï–®–ù–û –û–ó–í–£–ß–ï–ù–ê`);
            await new Promise(resolve => setTimeout(resolve, 1500)); // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
          } else {
            console.warn(`‚ö†Ô∏è –Ø–ß–ï–ô–ö–ê ${order.cellNumber} –ù–ï –û–ó–í–£–ß–ï–ù–ê - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!`);
            console.log('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Object.keys(customAudioFiles).slice(0, 20));
            console.log('');
            console.log('üéØ === –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ ===');
            console.log('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:');
            console.log('  1. "cell-number" - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –¥–ª—è –í–°–ï–• —è—á–µ–µ–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
            console.log(`  2. "${order.cellNumber}" - –æ–∑–≤—É—á–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —è—á–µ–π–∫–∏ ${order.cellNumber}`);
            console.log(`  3. "cell-${order.cellNumber}" - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
            console.log('‚öôÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–∑–≤—É—á–∫–∞ ‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª');
            console.log('');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (typeof window !== 'undefined' && window.navigator?.vibrate) {
              window.navigator.vibrate([200, 100, 200]); // –°–∏–≥–Ω–∞–ª –æ –ø—Ä–æ–±–ª–µ–º–µ
            }
          }
          
          // –£–º–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
          const discountAudioOptions = [
            'discount',
            'delivery-—Å–∫–∏–¥–∫–∞', 
            '—Å–∫–∏–¥–∫–∞',
            'delivery-discount',
            '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫'
          ];
          
          let discountAudioPlayed = false;
          for (const discountAudioName of discountAudioOptions) {
            if (customAudioFiles[discountAudioName]) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ –¥–ª—è —Å–∫–∏–¥–∫–∏: "${discountAudioName}"`);
              try {
                await playAudio(discountAudioName);
                discountAudioPlayed = true;
                break;
              } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ —Å–∫–∏–¥–∫–∏:`, error);
              }
            }
          }
          
          if (!discountAudioPlayed) {
            console.log('‚ùå –ê—É–¥–∏–æ –¥–ª—è —Å–∫–∏–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }
        }
        
        setIsScanning(false);
      }, 300); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    } else if (activeTab === 'acceptance') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
        const acceptanceAudios = [
          'acceptance-–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó',
          '–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', 
          'acceptance-scan-success',
          'scan-success',
          'acceptance-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of acceptanceAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –ü–†–ò–ï–ú–ö–ê: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –ü–†–ò–ï–ú–ö–ê: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else if (activeTab === 'returns') {
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —É–º–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –§–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
      setIsScanning(true);
      
      setTimeout(async () => {
        console.log('‚úÖ –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–∑–≤—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É–¥–∏–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const returnAudios = [
          'returns-–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          '–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
          'returns-scan-success', 
          'return-success',
          'returns-—Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω'
        ];
        
        let audioPlayed = false;
        for (const audioKey of returnAudios) {
          if (customAudioFiles[audioKey]) {
            await playAudio(audioKey);
            audioPlayed = true;
            console.log(`üîä –í–û–ó–í–†–ê–¢: –ü—Ä–æ–∏–≥—Ä–∞–ª –∞—É–¥–∏–æ "${audioKey}"`);
            break;
          }
        }
        
        if (!audioPlayed) {
          console.log('‚ö†Ô∏è –í–û–ó–í–†–ê–¢: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        setIsScanning(false);
      }, 2000);
      
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–∫–∞–Ω–µ—Ä
      setShowQRScanner(true);
    }
  }, [activeTab, playAudio, setIsScanning, setShowQRScanner, setCurrentOrder, setDeliveryStep, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleQRScanResult = useCallback(async (data: string) => {
    console.log('üì± QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:', data);
    setScannedData(data);
    setIsScanning(true);
    
    if (activeTab === 'delivery') {
      if (deliveryStep === 'initial') {
        // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - QR –∫–ª–∏–µ–Ω—Ç–∞/–∫—É—Ä—å–µ—Ä–∞
        console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ QR –∫–æ–¥–∞
        let phoneDigits = '';
        
        // –ò—â–µ–º 4 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        const phoneMatch = data.match(/(\d{4})$/);
        if (phoneMatch) {
          phoneDigits = phoneMatch[1];
        } else {
          // –ò—â–µ–º –ª—é–±—ã–µ 4 —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ
          const allDigits = data.replace(/\D/g, '');
          if (allDigits.length >= 4) {
            phoneDigits = allDigits.slice(-4);
          }
        }
        
        console.log('üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneDigits);
        
        // –ò—â–µ–º –∑–∞–∫–∞–∑
        const order = findOrderByPhone(phoneDigits);
        
        if (order) {
          console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', order);
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ —Å–∫–∏–¥–∫—É
          console.log('üîä –û–∑–≤—É—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É:', order.cellNumber);
          
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          console.log('üîä –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò –°–ö–ò–î–ö–£...');
          console.log('üìÅ customAudioFiles:', customAudioFiles);
          await playAudio('discount');
          
          await new Promise(resolve => setTimeout(resolve, 1000));
          await playAudio(`cell-${order.cellNumber}`);
        } else {
          console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞...');
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
          const testOrder = findOrderByPhone('5667');
          if (testOrder) {
            setCurrentOrder(testOrder);
            setDeliveryStep('client-scanned');
            
            await playAudio(`cell-${testOrder.cellNumber}`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            await playAudio('discount');
          }
        }
        
      } else if (deliveryStep === 'client-scanned') {
        // –í—Ç–æ—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
        console.log('üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setDeliveryStep('product-scanned');
        setIsProductScanned(true);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
        await playAudio('check-product-camera');
      }
    } else if (activeTab === 'receiving') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
      console.log('üì¶ –ü–†–ò–ï–ú–ö–ê: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      await playAudio('receiving-start');
      
    } else if (activeTab === 'returns') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
      console.log('‚Ü©Ô∏è –í–û–ó–í–†–ê–¢: –¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      await playAudio('return-start');
      
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
      let audioKey = 'scan-success';
      
      if (data.includes('check_product') || data.includes('–ø—Ä–æ–≤–µ—Ä—å')) {
        audioKey = 'check-product-camera';
      } else if (data.includes('discount') || data.includes('—Å–∫–∏–¥–∫–∞')) {
        audioKey = 'discount';
      } else if (data.includes('rate') || data.includes('–æ—Ü–µ–Ω–∏—Ç–µ')) {
        audioKey = 'rate-pickup-point';
      } else if (data.includes('client') || data.includes('–∫–ª–∏–µ–Ω—Ç')) {
        audioKey = 'client-found';
      }
      
      await playAudio(audioKey);
    }
    
    setTimeout(() => {
      setIsScanning(false);
    }, 2000);
  }, [playAudio, activeTab, deliveryStep, customAudioFiles, setScannedData, setIsScanning, setCurrentOrder, setDeliveryStep, setIsProductScanned]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const handlePhoneSubmit = useCallback(async (lastFourDigits: string) => {
    const order = findOrderByPhone(lastFourDigits);
    if (order) {
      setCurrentOrder(order);
      setDeliveryStep('client-scanned');
      
      // –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ —Å–∫–∏–¥–∫—É
      // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —è—á–µ–π–∫–∏
      try {
        await playAudio(order.cellNumber); // A12, B05, C07, D13, E09
      } catch {
        try {
          await playAudio(`cell-${order.cellNumber}`); // cell-A12
        } catch {
          await playAudio(`—è—á–µ–π–∫–∞-${order.cellNumber}`); // —è—á–µ–π–∫–∞-A12
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('üîä –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò –°–ö–ò–î–ö–£...');
      console.log('üìÅ customAudioFiles:', customAudioFiles);
      await playAudio('discount');
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      setPhoneNumber('');
    } else {
      alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }, [playAudio, setPhoneNumber, setCurrentOrder, setDeliveryStep, customAudioFiles]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = useCallback(async (cellNumber: string) => {
    console.log(`üè† –ö–õ–ò–ö –ü–û –Ø–ß–ï–ô–ö–ï: "${cellNumber}"`);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
    const cellAudioKeys = [
      cellNumber,           // 123
      `cell-${cellNumber}`, // cell-123  
      `—è—á–µ–π–∫–∞-${cellNumber}`, // —è—á–µ–π–∫–∞-123
      `${cellNumber}.mp3`,    // 123.mp3
      `${cellNumber}.wav`     // 123.wav
    ];
    
    console.log(`üéØ –ü—Ä–æ–±—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —è—á–µ–π–∫–∏:`, cellAudioKeys);
    
    for (const key of cellAudioKeys) {
      try {
        await playAudio(key);
        console.log(`‚úÖ –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò –ù–ê–ô–î–ï–ù–ê: ${key}`);
        return; // –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á: ${key}`);
      }
    }
    
    console.warn(`‚ùå –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${cellNumber}" –ù–ï –ù–ê–ô–î–ï–ù–ê!`);
  }, [playAudio]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const handleScanProduct = useCallback(async () => {
    // –≠–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    setIsProductScanned(true);
    if (currentOrder) {
      setScannedData(currentOrder.items.map((item: any) => item.barcode).join(','));
    }
    
    // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
    await playAudio('check-product');
  }, [currentOrder, playAudio, setIsProductScanned, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
  const handleDeliverProduct = useCallback(async () => {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ —Å –æ–∑–≤—É—á–∫–æ–π "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ü–í–ó"
    await playAudio('rate-service');
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setDeliveryStep('initial');
      setCurrentOrder(null);
      setIsProductScanned(false);
      setScannedData('');
    }, 3000);
  }, [playAudio, setDeliveryStep, setCurrentOrder, setIsProductScanned, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = useCallback((tab: string) => {
    if (tab !== 'delivery') {
      setDeliveryStep('initial');
      setCurrentOrder(null);
      setIsProductScanned(false);
      setScannedData('');
    }
  }, [setDeliveryStep, setCurrentOrder, setIsProductScanned, setScannedData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const toggleMenuItem = useCallback((item: string) => {
    const newExpanded = {
      ...expandedMenuItems,
      [item]: !expandedMenuItems[item]
    };
    setExpandedMenuItems(newExpanded);
    localStorage.setItem('wb-pvz-expanded-menu', JSON.stringify(newExpanded));
  }, [expandedMenuItems, setExpandedMenuItems]);

  const updatePvzInfo = useCallback((field: string, value: string) => {
    setPvzInfo(prev => {
      const updated = { ...prev, [field]: value };
      localStorage.setItem(`wb-pvz-${field.replace(/([A-Z])/g, '-$1').toLowerCase()}`, value);
      return updated;
    });
  }, [setPvzInfo]);

  const updateAudioSetting = useCallback((key: string, value: any) => {
    setAudioSettings(prev => {
      const updated = { ...prev, [key]: value };
      localStorage.setItem(`wb-pvz-audio-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`, 
        typeof value === 'object' ? JSON.stringify(value) : String(value)
      );
      return updated;
    });
  }, [setAudioSettings]);

  return {
    handleQRScan,
    handleQRScanResult,
    handlePhoneSubmit,
    handleCellClick,
    handleScanProduct,
    handleDeliverProduct,
    handleTabChange,
    toggleMenuItem,
    updatePvzInfo,
    updateAudioSetting,
  };
};