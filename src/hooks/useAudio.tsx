import { useCallback, useRef, useState, useEffect } from 'react';
import { AudioSettings } from './useAppState';
import { audioStorage } from '@/utils/audioStorage';
import { cloudAudioStorage } from '@/utils/cloudAudioStorage';
import { defaultAudioGenerator } from '@/utils/defaultAudioGenerator';

interface UseAudioProps {
  audioSettings: AudioSettings;
}

const AUDIO_FILE_MAP: { [key: string]: string } = {
  'delivery-cell-info': '/audio/cell-info.mp3',
  'delivery-scan-items': '/audio/scan-items.mp3',
  'delivery-check-product': '/audio/check-product.mp3',
  'delivery-thanks': '/audio/thanks.mp3',
  'receiving-start': '/audio/receiving-start.mp3',
  'receiving-scan': '/audio/receiving-scan.mp3',
  'receiving-next': '/audio/receiving-next.mp3',
  'receiving-complete': '/audio/receiving-complete.mp3',
  'return-start': '/audio/return-start.mp3',
  'return-scan-product': '/audio/return-scan.mp3',
  'return-confirm': '/audio/return-confirm.mp3',
  'return-success': '/audio/return-success.mp3',
};

export const useAudio = ({ audioSettings }: UseAudioProps) => {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<{ [key: string]: string }>({});
  const [isLoading, setIsLoading] = useState(true);
  const uploadedFilesRef = useRef<{ [key: string]: string }>({});
  const audioContextInitialized = useRef(false);

  useEffect(() => {
    uploadedFilesRef.current = uploadedFiles;
  }, [uploadedFiles]);

  useEffect(() => {
    let isMounted = true;
    
    const loadAudioFiles = async () => {
      try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
        try {
          const cloudFiles = await cloudAudioStorage.getAllFiles();
          console.log('‚òÅÔ∏è –§–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞–∫–µ:', Object.keys(cloudFiles).length);
          console.log('‚òÅÔ∏è –ö–ª—é—á–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', Object.keys(cloudFiles));
          
          if (!isMounted) return;
          
          if (Object.keys(cloudFiles).length > 0) {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –æ–±–ª–∞–∫–∞:', Object.keys(cloudFiles).length);
            const files = { ...cloudFiles };
            setUploadedFiles(files);
            uploadedFilesRef.current = files;
            if (isMounted) setIsLoading(false);
            return;
          }
        } catch (cloudError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞, –∑–∞–≥—Ä—É–∂–∞—é –ª–æ–∫–∞–ª—å–Ω–æ:', cloudError);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        console.log('üìÇ –ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...');
        const files = await audioStorage.getAllFiles();
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', Object.keys(files).length);
        console.log('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:', Object.keys(files));
        
        if (!isMounted) return;
        
        const localFiles = { ...files };
        setUploadedFiles(localFiles);
        uploadedFilesRef.current = localFiles;
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        if (!isMounted) return;
        setUploadedFiles({});
        uploadedFilesRef.current = {};
      }
      
      if (isMounted) {
        setIsLoading(false);
      }
    };

    loadAudioFiles();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const initAudioContext = () => {
      if (!audioContextInitialized.current) {
        console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ');
        const tempAudio = new Audio();
        tempAudio.volume = 0.01;
        tempAudio.src = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADhAC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU4LjEzAAAAAAAAAAAAAAAAJAAAAAAAAAAAA4SRUbpxAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy4xMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/+xDEDwPAAAGkAAAAIAAANIAAAARMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
        tempAudio.play().then(() => {
          console.log('‚úÖ –ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          audioContextInitialized.current = true;
        }).catch((err) => {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):', err);
        });
      }
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    document.addEventListener('touchstart', initAudioContext, { once: true });
    document.addEventListener('click', initAudioContext, { once: true });
    
    return () => {
      document.removeEventListener('touchstart', initAudioContext);
      document.removeEventListener('click', initAudioContext);
      isMounted = false;
    };
  }, []);

  const playAudio = useCallback((phraseKey: string, cellNumber?: number, itemCount?: number) => {
    const currentFiles = uploadedFilesRef.current;
    const variant = audioSettings.variant || 'v1';
    console.log('üéµ ========== –ó–ê–ü–†–û–° –û–ó–í–£–ß–ö–ò ==========');
    console.log('‚ñ∂Ô∏è –ö–ª—é—á:', phraseKey);
    console.log('üéõÔ∏è –í–ê–†–ò–ê–ù–¢ –û–ó–í–£–ß–ö–ò:', variant, '(–∏–∑ audioSettings.variant:', audioSettings.variant, ')');
    console.log('üì¶ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:', Object.keys(currentFiles).length);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã V1:', Object.keys(currentFiles).filter(k => k.includes('_v1_') || k === 'goods' || k === 'payment_on_delivery').length);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã V2:', Object.keys(currentFiles).filter(k => k.includes('_v2_') || k === 'checkWBWallet' || k === 'scanAfterQrClient').length);
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?', audioSettings.enabled[phraseKey]);
    console.log('üîä –ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω?', audioContextInitialized.current);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if (phraseKey === 'delivery-complete-sequence') {
      const successAudio = currentFiles['success_sound'];
      const thanksAudio = currentFiles['thanks_for_order_rate_pickpoint'];
      const sequence: string[] = [];
      
      console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
      console.log('  success_sound:', successAudio ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
      console.log('  thanks_for_order_rate_pickpoint:', thanksAudio ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
      console.log('  –í—Å–µ —Ñ–∞–π–ª—ã:', Object.keys(currentFiles));
      
      if (successAudio) sequence.push(successAudio);
      if (thanksAudio) sequence.push(thanksAudio);
      
      if (sequence.length > 0) {
        console.log('‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑', sequence.length, '–∑–≤—É–∫–æ–≤');
        playSequentialAudio(sequence, 500);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      }
      return;
    }
    
    const isEnabled = audioSettings.enabled[phraseKey];
    if (!isEnabled) {
      console.log('‚ùå –û–ó–í–£–ß–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê –í –ù–ê–°–¢–†–û–ô–ö–ê–•');
      return;
    }

    // –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const keyMapping: { [key: string]: string } = {
      'delivery-cell-info': variant === 'v1' ? 'goods' : 'checkWBWallet',
      'delivery-check-product': 'please_check_good_under_camera',
      'check-product-under-camera': 'please_check_good_under_camera',
      'delivery-thanks': variant === 'v1' ? 'thanks_for_order_rate_pickpoint' : 'askRatePickPoint',
      'payment_on_delivery': variant === 'v1' ? 'payment_on_delivery' : 'scanAfterQrClient',
      'box_accepted': 'box_accepted',
      'success_sound': 'success_sound'
    };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è delivery-thanks (–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏)
    if (phraseKey === 'delivery-thanks') {
      const audioSequence: string[] = [];
      
      if (variant === 'v1') {
        // V1: success_sound + thanks_for_order_rate_pickpoint
        const successSound = currentFiles['success_sound'];
        const thanksAudio = currentFiles['thanks_for_order_rate_pickpoint'];
        
        if (successSound) audioSequence.push(successSound);
        if (thanksAudio) audioSequence.push(thanksAudio);
      } else {
        // V2: —Ç–æ–ª—å–∫–æ askRatePickPoint
        const askRate = currentFiles['askRatePickPoint'];
        if (askRate) audioSequence.push(askRate);
      }
      
      if (audioSequence.length > 0) {
        console.log(`üéµ –û–∑–≤—É—á–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (${variant}):`, audioSequence.length, '—Ñ–∞–π–ª–æ–≤');
        playSequentialAudio(audioSequence);
        return;
      }
      
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏');
      return;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏
    if (phraseKey === 'cell-number' && cellNumber !== undefined) {
      const cellKey = `cell_${variant}_${cellNumber}`;
      const cellAudio = currentFiles[cellKey];
      
      if (cellAudio) {
        console.log(`üéµ –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ ${cellNumber} (–≤–∞—Ä–∏–∞–Ω—Ç ${variant})`);
        playSequentialAudio([cellAudio]);
        return;
      }
      
      console.log(`‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (${cellKey})`);
      return;
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è delivery-cell-info —Å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
    if (phraseKey === 'delivery-cell-info' && cellNumber !== undefined) {
      console.log('üìÇ –í–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', Object.keys(currentFiles));
      console.log('üéµ –í–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏:', variant);
      
      const audioSequence: string[] = [];
      
      // 1. –û–∑–≤—É—á–∫–∞ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞)
      const cellKey = `cell_${variant}_${cellNumber}`;
      const cellAudio = currentFiles[cellKey];
      
      // 2. –û–∑–≤—É—á–∫–∞ "—Ç–æ–≤–∞—Ä—ã" –∏–ª–∏ "checkWBWallet"
      const goodsKey = variant === 'v1' ? 'goods' : 'checkWBWallet';
      const goodsAudio = currentFiles[goodsKey];
      
      // 3. –û–∑–≤—É—á–∫–∞ "–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏" –∏–ª–∏ "scanAfterQrClient"
      const paymentKey = variant === 'v1' ? 'payment_on_delivery' : 'scanAfterQrClient';
      const paymentAudio = currentFiles[paymentKey];

      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      if (cellAudio) audioSequence.push(cellAudio);
      if (goodsAudio) audioSequence.push(goodsAudio);
      if (paymentAudio) audioSequence.push(paymentAudio);

      console.log('üéµ –°–æ—Å—Ç–∞–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞:', {
        variant,
        cellKey,
        cell: !!cellAudio,
        goodsKey,
        goods: !!goodsAudio,
        paymentKey,
        payment: !!paymentAudio,
        total: audioSequence.length
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª - –∏–≥—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      if (audioSequence.length > 0) {
        playSequentialAudio(audioSequence);
        return;
      }
      
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–∑–≤—É—á–∫–∏');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–ª—é—á –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const mappedKey = keyMapping[phraseKey] || phraseKey;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª
    let audioUrl = currentFiles[mappedKey];
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ /public/audio
    if (!audioUrl) {
      audioUrl = AUDIO_FILE_MAP[phraseKey];
    }
    
    console.log('üéµ –ò—â–µ–º:', phraseKey, '‚Üí', mappedKey, '‚Üí', audioUrl ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!audioUrl) {
      console.log('‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
    }

    console.log('üîä –°–û–ó–î–ê–Æ –ê–£–î–ò–û –û–ë–™–ï–ö–¢');
    console.log('üìè –†–∞–∑–º–µ—Ä URL:', audioUrl.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    const audio = new Audio();
    audio.preload = 'auto';
    audio.volume = 1.0;
    audio.src = audioUrl;
    audio.playbackRate = audioSettings.speed;
    audioRef.current = audio;
    setIsPlaying(true);

    console.log('‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...');
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    const playWithRetry = async (retries = 5) => {
      for (let i = 0; i < retries; i++) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${i + 1}/${retries}`);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
          await audio.load();
          console.log('‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é play()');
          
          await audio.play();
          console.log('‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ù–ê–ß–ê–õ–û–°–¨ (–ø–æ–ø—ã—Ç–∫–∞', i + 1, ')');
          return;
        } catch (err: any) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);
          console.warn('–¢–∏–ø –æ—à–∏–±–∫–∏:', err.name);
          console.warn('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
          
          if (i === retries - 1) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', err);
            console.error('–î–µ—Ç–∞–ª–∏:', err.message, err.name);
            setIsPlaying(false);
          } else {
            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 200 * (i + 1)));
          }
        }
      }
    };
    
    playWithRetry();

    audio.onended = () => {
      console.log('‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
      setIsPlaying(false);
      audioRef.current = null;
    };

    audio.onerror = (e) => {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ê–£–î–ò–û "${phraseKey}":`, e);
      console.error('Audio error event:', audio.error);
      setIsPlaying(false);
      audioRef.current = null;
    };
  }, [audioSettings]);

  const playSequentialAudio = useCallback((audioUrls: string[], delayMs: number = 500) => {
    if (audioUrls.length === 0) return;

    console.log('üé¨ –ù–ê–ß–ê–õ–û –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò:', audioUrls);
    let currentIndex = 0;
    setIsPlaying(true);

    const playNext = () => {
      if (currentIndex >= audioUrls.length) {
        console.log('üèÅ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ó–ê–í–ï–†–®–ï–ù–ê');
        setIsPlaying(false);
        audioRef.current = null;
        return;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (audioRef.current) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫');
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
        audioRef.current = null;
      }

      const audio = new Audio();
      audio.preload = 'auto';
      audio.volume = 1.0;
      audio.src = audioUrls[currentIndex];
      audio.playbackRate = audioSettings.speed;
      audioRef.current = audio;

      console.log(`üîä –ß–∞—Å—Ç—å ${currentIndex + 1}/${audioUrls.length}:`, audioUrls[currentIndex]);
      console.log(`‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: ${audioSettings.speed}x`);

      const playWithRetry = async (retries = 3) => {
        for (let i = 0; i < retries; i++) {
          try {
            await audio.load();
            await audio.play();
            console.log(`‚ñ∂Ô∏è –ß–∞—Å—Ç—å ${currentIndex + 1} –ò–ì–†–ê–ï–¢`);
            return;
          } catch (err) {
            console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err);
            if (i === retries - 1) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∞—Å—Ç–∏', currentIndex + 1);
              currentIndex++;
              setTimeout(() => playNext(), delayMs);
            } else {
              await new Promise(resolve => setTimeout(resolve, 100));
            }
          }
        }
      };
      
      playWithRetry();

      audio.onended = () => {
        console.log(`‚úÖ –ß–∞—Å—Ç—å ${currentIndex + 1} –ó–ê–í–ï–†–®–ï–ù–ê, –ø–∞—É–∑–∞ ${delayMs}–º—Å`);
        currentIndex++;
        setTimeout(() => playNext(), delayMs);
      };

      audio.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —á–∞—Å—Ç–∏', currentIndex + 1);
        currentIndex++;
        setTimeout(() => playNext(), delayMs);
      };
    };

    playNext();
  }, [audioSettings]);

  const stopAudio = useCallback(() => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
      setIsPlaying(false);
    }
  }, []);

  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
    };
  }, []);

  return {
    playAudio,
    stopAudio,
    isPlaying,
    uploadedFiles,
    setUploadedFiles
  };
};