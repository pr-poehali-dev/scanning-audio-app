import { useCallback, useRef, useState, useEffect } from 'react';

const STORAGE_KEY = 'wb-audio-files';

export const useAudio = () => {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [customAudioFiles, setCustomAudioFiles] = useState<{[key: string]: string}>({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    try {
      const savedFiles = localStorage.getItem(STORAGE_KEY);
      if (savedFiles) {
        const parsedFiles = JSON.parse(savedFiles);
        setCustomAudioFiles(parsedFiles);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ localStorage:', error);
    }
  }, []);

  const playAudio = useCallback(async (audioKey: string) => {
    try {
      console.log(`üîä –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò: "${audioKey}"`);
      console.log(`üìÅ –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´:`, Object.keys(customAudioFiles));
      console.log(`üíæ –†–ê–ó–ú–ï–† –•–†–ê–ù–ò–õ–ò–©–ê:`, Object.keys(customAudioFiles).length, '—Ñ–∞–π–ª–æ–≤');
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
      console.log(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===`);
      console.log(`üéØ –ò–©–ï–ú –ö–õ–Æ–ß: "${audioKey}"`);
      console.log(`üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ö–õ–Æ–ß–ò (${Object.keys(customAudioFiles).length} —à—Ç.):`);
      Object.keys(customAudioFiles).forEach((key, index) => {
        const isExact = key === audioKey;
        const includes = key.includes(audioKey) || audioKey.includes(key);
        console.log(`  ${index + 1}. "${key}" ${isExact ? 'üéØ –¢–û–ß–ù–û–ï!' : includes ? 'üîç –ü–û–•–û–ñ–ï–ï!' : ''}`);
      });
      console.log(`üíæ –°–û–î–ï–†–ñ–ò–ú–û–ï localStorage:`, localStorage.getItem('wb-audio-files')?.substring(0, 200) + '...');
      
      // –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
      if (customAudioFiles[audioKey]) {
        console.log(`üéµ –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${audioKey}"`);
        try {
          const audio = new Audio(customAudioFiles[audioKey]);
          audio.volume = 0.8;
          await audio.play();
          console.log(`‚úÖ –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${audioKey}`);
          return;
        } catch (error) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${audioKey}":`, error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
      const possibleKeys = [
        audioKey, // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        `delivery-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º delivery
        `acceptance-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º acceptance 
        `returns-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º returns
        `general-${audioKey}` // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º general
      ];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
      const keyMappings: {[key: string]: string[]} = {
        // –ö–†–ò–¢–ò–ß–ù–û: –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏ ‚Üí –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        'discount': ['check-discount-wallet', '—Å–∫–∏–¥–∫–∞', 'discount'],
        'check-product': ['check-product-camera', '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä', 'check-product'],
        'check-product-camera': ['check-product', '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä'],
        'rate-service': ['rate-pickup-point', '–æ—Ü–µ–Ω–∏—Ç–µ', 'rate-service'],
        'cell-number': ['cell-number', '—è—á–µ–π–∫–∞'],
        
        // –ò –æ–±—Ä–∞—Ç–Ω–æ - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ‚Üí —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏  
        'check-discount-wallet': ['discount', '—Å–∫–∏–¥–∫–∞'],
        'check-product-camera': ['check-product', '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä'],
        'rate-pickup-point': ['rate-service', '–æ—Ü–µ–Ω–∏—Ç–µ'],
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', '–Ω–∞—á–∞–ª–æ'],
        'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'],
        'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', '–Ω–∞—á–∞–ª–æ'],
        'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', '–∑–∞–≤–µ—Ä—à–µ–Ω']
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
      if (keyMappings[audioKey]) {
        possibleKeys.push(...keyMappings[audioKey]);
      }
      
      console.log(`üîç –ü–†–û–í–ï–†–Ø–Æ –ö–õ–Æ–ß–ò:`, possibleKeys);
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
      let foundKey = null;
      let audioUrl = null;
      
      for (const key of possibleKeys) {
        if (customAudioFiles[key]) {
          foundKey = key;
          audioUrl = customAudioFiles[key];
          break;
        }
      }
      
      if (audioUrl && foundKey) {
        console.log(`üéµ –ù–ê–ô–î–ï–ù –§–ê–ô–õ "${foundKey}" –î–õ–Ø "${audioKey}"`);
        console.log(`üîó URL:`, audioUrl.substring(0, 50) + '...');
        try {
          const audio = new Audio(audioUrl);
          audio.volume = 0.8;
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
          const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
          if (savedSpeed) {
            audio.playbackRate = parseFloat(savedSpeed);
          }
          
          console.log(`‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...`);
          await audio.play();
          console.log(`‚úÖ –ó–í–£–ö –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${foundKey}`);
          return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
        } catch (audioError) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${foundKey}":`, audioError);
          console.error(`‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:`, {
            name: audioError.name,
            message: audioError.message,
            audioUrl: audioUrl.substring(0, 100)
          });
        }
      } else {
        console.log(`‚ö†Ô∏è –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù –î–õ–Ø "${audioKey}"`);
        console.log(`üîç –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò:`, possibleKeys);
        console.log(`üìã –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´:`, Object.keys(customAudioFiles));
      }
      
      // –í–°–¢–†–û–ï–ù–ù–´–ô –ó–í–£–ö –û–¢–ö–õ–Æ–ß–ï–ù - —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∞–π–ª—ã
      console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ customAudioFiles:`, Object.keys(customAudioFiles));
      console.log(`‚ùå –ó–í–£–ö –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è "${audioKey}" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
      return;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${audioKey}":`, error);
    }
  }, [customAudioFiles]);

  const playCellAudio = useCallback(async (cellNumber: string) => {
    try {
      console.log(`üîä –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏: ${cellNumber}`);
      console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
      const cellKey = `cell-${cellNumber}`;
      const audioUrl = customAudioFiles[cellKey];
      
      if (audioUrl) {
        console.log(`üéµ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        try {
          const audio = new Audio(audioUrl);
          audio.volume = 0.8;
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
          const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
          if (savedSpeed) {
            audio.playbackRate = parseFloat(savedSpeed);
          }
          
          await audio.play();
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ ${cellNumber}`);
          return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
        } catch (audioError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏ ${cellNumber}:`, audioError);
        }
      } else {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á: ${cellKey})`);
      }
      
      // –í–°–¢–†–û–ï–ù–ù–´–ô –ó–í–£–ö –î–õ–Ø –Ø–ß–ï–ï–ö –¢–û–ñ–ï –û–¢–ö–õ–Æ–ß–ï–ù
      console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
      console.log(`‚ùå –ó–í–£–ö –Ø–ß–ï–ô–ö–ò –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª cell-${cellNumber}.mp3 –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
      return;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    }
  }, [customAudioFiles]);

  const updateAudioFiles = useCallback(async (files: {[key: string]: string}) => {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã. –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:`, Object.keys(files));
    console.log(`üìÑ –¢–∏–ø—ã URL –≤ files:`, Object.entries(files).map(([key, url]) => ({ key, isBlob: url.startsWith('blob:') })));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob URL –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const permanentFiles: {[key: string]: string} = {};
    
    for (const [key, url] of Object.entries(files)) {
      if (url.startsWith('blob:')) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
          const response = await fetch(url);
          const arrayBuffer = await response.arrayBuffer();
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
          const base64 = arrayBufferToBase64(arrayBuffer);
          const mimeType = response.headers.get('content-type') || 'audio/mpeg';
          permanentFiles[key] = `data:${mimeType};base64,${base64}`;
          
          console.log(`‚úÖ –§–∞–π–ª "${key}" –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ "${key}":`, error);
          permanentFiles[key] = url; // Fallback –∫ blob URL
        }
      } else {
        permanentFiles[key] = url;
      }
    }
    
    const updatedFiles = { ...customAudioFiles, ...permanentFiles };
    setCustomAudioFiles(updatedFiles);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedFiles));
      console.log(`üíæ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –ü–û–°–¢–û–Ø–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`, Object.keys(updatedFiles));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage:', error);
    }
  }, [customAudioFiles]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ArrayBuffer –≤ base64
  const arrayBufferToBase64 = (buffer: ArrayBuffer): string => {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    const len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  };

  const removeAudioFile = useCallback((audioKey: string) => {
    const updatedFiles = { ...customAudioFiles };
    delete updatedFiles[audioKey];
    setCustomAudioFiles(updatedFiles);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedFiles));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage:', error);
    }
  }, [customAudioFiles]);

  const clearAllAudio = useCallback(() => {
    setCustomAudioFiles({});
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ localStorage:', error);
    }
  }, []);

  const getLoadedFiles = useCallback(() => {
    return Object.keys(customAudioFiles);
  }, [customAudioFiles]);

  return { 
    playAudio, 
    playCellAudio,
    updateAudioFiles, 
    removeAudioFile, 
    clearAllAudio, 
    getLoadedFiles,
    customAudioFiles 
  };
};