import { useCallback, useRef, useState, useEffect } from 'react';
import { AudioSettings } from './useAppState';
import { audioStorage } from '@/utils/audioStorage';

interface UseAudioProps {
  audioSettings: AudioSettings;
}

const AUDIO_FILE_MAP: { [key: string]: string } = {
  'delivery-cell-info': '/audio/cell-info.mp3',
  'delivery-scan-items': '/audio/scan-items.mp3',
  'delivery-check-product': '/audio/check-product.mp3',
  'delivery-thanks': '/audio/thanks.mp3',
  'receiving-start': '/audio/receiving-start.mp3',
  'receiving-scan': '/audio/receiving-scan.mp3',
  'receiving-next': '/audio/receiving-next.mp3',
  'receiving-complete': '/audio/receiving-complete.mp3',
  'return-start': '/audio/return-start.mp3',
  'return-scan-product': '/audio/return-scan.mp3',
  'return-confirm': '/audio/return-confirm.mp3',
  'return-success': '/audio/return-success.mp3',
};

export const useAudio = ({ audioSettings }: UseAudioProps) => {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<{ [key: string]: string }>({});
  const [isLoading, setIsLoading] = useState(true);
  const uploadedFilesRef = useRef<{ [key: string]: string }>({});
  const audioContextInitialized = useRef(false);

  useEffect(() => {
    uploadedFilesRef.current = uploadedFiles;
  }, [uploadedFiles]);

  useEffect(() => {
    const loadAudioFiles = async () => {
      const files = await audioStorage.getAllFiles();
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', Object.keys(files).length);
      console.log('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:', Object.keys(files));
      setUploadedFiles(files);
      uploadedFilesRef.current = files;
      setIsLoading(false);
    };

    loadAudioFiles();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const initAudioContext = () => {
      if (!audioContextInitialized.current) {
        console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ');
        const tempAudio = new Audio();
        tempAudio.src = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADhAC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU4LjEzAAAAAAAAAAAAAAAAJAAAAAAAAAAAA4SRUbpxAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy4xMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/+xDEDwPAAAGkAAAAIAAANIAAAARMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
        tempAudio.play().then(() => {
          console.log('‚úÖ –ê—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          audioContextInitialized.current = true;
        }).catch(() => {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
        });
      }
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    document.addEventListener('touchstart', initAudioContext, { once: true });
    document.addEventListener('click', initAudioContext, { once: true });
    
    return () => {
      document.removeEventListener('touchstart', initAudioContext);
      document.removeEventListener('click', initAudioContext);
    };
  }, []);

  const playAudio = useCallback((phraseKey: string, cellNumber?: number, itemCount?: number) => {
    const currentFiles = uploadedFilesRef.current;
    console.log('üéµ ========== –ó–ê–ü–†–û–° –û–ó–í–£–ß–ö–ò ==========');
    console.log('‚ñ∂Ô∏è –ö–ª—é—á:', phraseKey);
    console.log('üì¶ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:', Object.keys(currentFiles).length);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:', Object.keys(currentFiles));
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?', audioSettings.enabled[phraseKey]);
    
    const isEnabled = audioSettings.enabled[phraseKey];
    if (!isEnabled) {
      console.log('‚ùå –û–ó–í–£–ß–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê –í –ù–ê–°–¢–†–û–ô–ö–ê–•');
      return;
    }

    // –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const keyMapping: { [key: string]: string } = {
      'delivery-cell-info': 'goods',
      'delivery-check-product': 'please_check_good_under_camera',
      'check-product-under-camera': 'please_check_good_under_camera',
      'delivery-thanks': 'thanks_for_order_rate_pickpoint',
      'payment-cod': 'payment_on_delivery'
    };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è delivery-cell-info —Å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π
    if (phraseKey === 'delivery-cell-info' && cellNumber !== undefined) {
      const audioSequence: string[] = [];
      
      // 1. –û–∑–≤—É—á–∫–∞ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ (–ø–µ—Ä–≤–∞—è!)
      const cellAudio = currentFiles[`cell-${cellNumber}`];
      
      // 2. –û–∑–≤—É—á–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ)
      const countAudio = itemCount ? currentFiles[`count-${itemCount}`] : null;
      
      // 3. –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞ "—Ç–æ–≤–∞—Ä–æ–≤"
      const wordItemsAudio = currentFiles['word-items'];
      
      // 4. –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
      const paymentAudio = currentFiles['payment-cod'];

      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —è—á–µ–π–∫–∞ ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí "—Ç–æ–≤–∞—Ä–æ–≤" ‚Üí –æ–ø–ª–∞—Ç–∞
      if (cellAudio) audioSequence.push(cellAudio);
      if (countAudio) audioSequence.push(countAudio);
      if (wordItemsAudio) audioSequence.push(wordItemsAudio);
      if (paymentAudio) audioSequence.push(paymentAudio);

      console.log('üéµ –°–æ—Å—Ç–∞–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞:', {
        cell: !!cellAudio,
        count: !!countAudio,
        wordItems: !!wordItemsAudio,
        payment: !!paymentAudio,
        total: audioSequence.length
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª - –∏–≥—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      if (audioSequence.length > 0) {
        playSequentialAudio(audioSequence);
        return;
      }
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π –æ–∑–≤—É—á–∫–∏');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–ª—é—á –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const mappedKey = keyMapping[phraseKey] || phraseKey;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª
    let audioUrl = currentFiles[mappedKey];
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ /public/audio
    if (!audioUrl) {
      audioUrl = AUDIO_FILE_MAP[phraseKey];
    }
    
    console.log('üéµ –ò—â–µ–º:', phraseKey, '‚Üí', mappedKey, '‚Üí', audioUrl ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!audioUrl) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', mappedKey);
      return;
    }

    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
    }

    console.log('üîä –°–û–ó–î–ê–Æ –ê–£–î–ò–û –û–ë–™–ï–ö–¢');
    console.log('üìè –†–∞–∑–º–µ—Ä URL:', audioUrl.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    const audio = new Audio();
    audio.preload = 'auto';
    audio.src = audioUrl;
    audio.playbackRate = audioSettings.speed;
    audioRef.current = audio;
    setIsPlaying(true);

    console.log('‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...');
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    const playWithRetry = async (retries = 3) => {
      for (let i = 0; i < retries; i++) {
        try {
          await audio.play();
          console.log('‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ù–ê–ß–ê–õ–û–°–¨ (–ø–æ–ø—ã—Ç–∫–∞', i + 1, ')');
          return;
        } catch (err: any) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);
          if (i === retries - 1) {
            console.error('‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø:', err);
            console.error('–î–µ—Ç–∞–ª–∏:', err.message, err.name);
            setIsPlaying(false);
          } else {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
          }
        }
      }
    };
    
    playWithRetry();

    audio.onended = () => {
      console.log('‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
      setIsPlaying(false);
      audioRef.current = null;
    };

    audio.onerror = (e) => {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ê–£–î–ò–û "${phraseKey}":`, e);
      console.error('Audio error event:', audio.error);
      setIsPlaying(false);
      audioRef.current = null;
    };
  }, [audioSettings]);

  const playSequentialAudio = useCallback((audioUrls: string[]) => {
    if (audioUrls.length === 0) return;

    let currentIndex = 0;
    setIsPlaying(true);

    const playNext = () => {
      if (currentIndex >= audioUrls.length) {
        setIsPlaying(false);
        audioRef.current = null;
        return;
      }

      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }

      const audio = new Audio();
      audio.preload = 'auto';
      audio.src = audioUrls[currentIndex];
      audio.playbackRate = audioSettings.speed;
      audioRef.current = audio;

      console.log(`üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏ ${currentIndex + 1}/${audioUrls.length}`);

      const playWithRetry = async () => {
        try {
          await audio.play();
          console.log(`‚úÖ –ß–∞—Å—Ç—å ${currentIndex + 1} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è`);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err);
          currentIndex++;
          playNext();
        }
      };
      
      playWithRetry();

      audio.onended = () => {
        currentIndex++;
        playNext();
      };

      audio.onerror = () => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ');
        currentIndex++;
        playNext();
      };
    };

    playNext();
  }, [audioSettings]);

  const stopAudio = useCallback(() => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
      setIsPlaying(false);
    }
  }, []);

  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
    };
  }, []);

  return {
    playAudio,
    stopAudio,
    isPlaying,
    uploadedFiles,
    setUploadedFiles
  };
};