import { useCallback, useRef, useState, useEffect } from 'react';

const STORAGE_KEY = 'wb-audio-files';

export const useAudio = () => {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [customAudioFiles, setCustomAudioFiles] = useState<{[key: string]: string}>({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  useEffect(() => {
    try {
      console.log('üîÑ === –ó–ê–ì–†–£–ó–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–´–• –ê–£–î–ò–û–§–ê–ô–õ–û–í ===');
      const savedFiles = localStorage.getItem(STORAGE_KEY);
      const timestamp = localStorage.getItem(`${STORAGE_KEY}-timestamp`);
      const count = localStorage.getItem(`${STORAGE_KEY}-count`);
      
      if (savedFiles) {
        const parsedFiles = JSON.parse(savedFiles);
        
        // üîì –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê –ó–ê–©–ò–©–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö –Ø–ß–ï–ï–ö –ò –ü–†–ò–ï–ú–ö–ò
        try {
          const protectedCellFiles = localStorage.getItem('wb-pvz-cell-audio-settings-permanent');
          const cellLock = localStorage.getItem('wb-pvz-cell-audio-lock');
          
          if (protectedCellFiles && cellLock === 'LOCKED') {
            const cellSettings = JSON.parse(protectedCellFiles);
            console.log('üîì –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê –ó–ê–©–ò–©–ï–ù–ù–´–• –§–ê–ô–õ–û–í:', Object.keys(cellSettings));
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ—Ä–∂–∏–º –í–°–ï –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            Object.keys(cellSettings).forEach(key => {
              parsedFiles[key] = cellSettings[key];
              console.log(`üîì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${key}`);
            });
            
            console.log('üîì –ò–¢–û–ì–û –ü–û–°–õ–ï –ú–ï–†–ñ–ê:', Object.keys(parsedFiles).length, '—Ñ–∞–π–ª–æ–≤');
          } else {
            console.warn('‚ö†Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
        
        setCustomAudioFiles(parsedFiles);
        
        const cellFiles = Object.keys(parsedFiles).filter(k => /^\d+$/.test(k) || k.includes('cell-') || k.includes('—è—á–µ–π–∫–∞'));
        
        console.log('‚úÖ –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê –£–°–ü–ï–®–ù–ê!');
        console.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(parsedFiles).length} —Ñ–∞–π–ª–æ–≤`);
        console.log(`üè† –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cellFiles.length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫:`, cellFiles);
        console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:`, timestamp || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.log(`üìä –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤:`, count || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.log(`üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è—á–µ–µ–∫: ${Object.keys(localStorage.getItem('wb-pvz-cell-audio-settings-permanent') || '{}').length}`);
        
        if (cellFiles.length === 0) {
          console.warn('‚ö†Ô∏è –§–ê–ô–õ–´ –Ø–ß–ï–ï–ö –ù–ï –ù–ê–ô–î–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
        }
      } else {
        console.log('‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫');
      }
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', error);
      console.log('üîß –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      try {
        localStorage.removeItem(STORAGE_KEY);
        localStorage.removeItem(`${STORAGE_KEY}-timestamp`);
        localStorage.removeItem(`${STORAGE_KEY}-count`);
        console.log('‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      } catch (clearError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', clearError);
      }
    }
  }, []);

  const playAudio = useCallback(async (audioKey: string) => {
    try {
      console.log(`üîä === –ü–û–ü–´–¢–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–°–¢–ò ===`);
      console.log(`üéØ –ö–õ–Æ–ß: "${audioKey}"`);
      
      // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö
      if (audioKey.includes('cell-') || audioKey.includes('—è—á–µ–π–∫–∞') || /^\d+$/.test(audioKey)) {
        console.log(`üè† === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ß–ï–ô–ö–ò ===`);
        console.log(`üìç –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —è—á–µ–π–∫–∞: "${audioKey}"`);
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —è—á–µ–µ–∫: ${Object.keys(customAudioFiles).filter(k => k.includes('cell-') || /^\d+$/.test(k)).length}`);
        
        const cellKeys = Object.keys(customAudioFiles).filter(k => k.includes('cell-') || /^\d+$/.test(k));
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏:`, cellKeys);
        
        // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫—É–¥–∞ –≤–∑—è–ª—Å—è –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏?
        console.log(`‚ùì –û–¢–ö–£–î–ê –≠–¢–û–¢ –ù–û–ú–ï–†? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–∏–∂–µ:`);
        console.trace();
      }
      
      console.log(`üìÅ –í–°–ï–ì–û –§–ê–ô–õ–û–í:`, Object.keys(customAudioFiles).length);
      console.log(`üíæ –ü–ï–†–í–´–ï 10 –ö–õ–Æ–ß–ï–ô:`, Object.keys(customAudioFiles).slice(0, 10));
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
      console.log(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===`);
      console.log(`üéØ –ò–©–ï–ú –ö–õ–Æ–ß: "${audioKey}"`);
      console.log(`üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ö–õ–Æ–ß–ò (${Object.keys(customAudioFiles).length} —à—Ç.):`);
      Object.keys(customAudioFiles).forEach((key, index) => {
        const isExact = key === audioKey;
        const includes = key.includes(audioKey) || audioKey.includes(key);
        console.log(`  ${index + 1}. "${key}" ${isExact ? 'üéØ –¢–û–ß–ù–û–ï!' : includes ? 'üîç –ü–û–•–û–ñ–ï–ï!' : ''}`);
      });
      console.log(`üíæ –°–û–î–ï–†–ñ–ò–ú–û–ï localStorage:`, localStorage.getItem('wb-audio-files')?.substring(0, 200) + '...');
      
      // –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï - –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
      if (customAudioFiles[audioKey]) {
        console.log(`üéµ –ü–†–Ø–ú–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${audioKey}"`);
        try {
          const audio = new Audio(customAudioFiles[audioKey]);
          audio.volume = 0.8;
          await audio.play();
          console.log(`‚úÖ –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${audioKey}`);
          return;
        } catch (error) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${audioKey}":`, error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
      const possibleKeys = [
        audioKey, // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        `delivery-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º delivery
        `acceptance-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º acceptance 
        `returns-${audioKey}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º returns
        `general-${audioKey}` // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º general
      ];
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ –†–ï–ê–õ–¨–ù–´–ï –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const keyMappings: {[key: string]: string[]} = {
        // === –ú–ê–ü–ü–ò–ù–ì –ù–ê –†–ï–ê–õ–¨–ù–´–ï –†–£–°–°–ö–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ===
        'discount': [
          '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
          'delivery-–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
          '—Å–∫–∏–¥–∫–∞', '–∫–æ—à–µ–ª–µ–∫', 'check-discount-wallet'
        ],
        
        'check-product': [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
          'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
          '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä', 'check-product-camera'
        ],
        
        'check-product-camera': [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
          'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', 
          '–∫–∞–º–µ—Ä–∞', '—Ç–æ–≤–∞—Ä'
        ],
        
        'rate-service': [
          '–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          'delivery-–û—Ü–µ–Ω–∏—Ç–µ –ü–í–ó –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          '–æ—Ü–µ–Ω–∏—Ç–µ', 'rate-pickup-point'
        ],
        
        'cell-number': ['cell-number', '—è—á–µ–π–∫–∞'],
        
        // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ò–°–¢–ï–ú–ù–´–ï –ö–õ–Æ–ß–ò ===
        'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', '–Ω–∞—á–∞–ª–æ'],
        'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'],
        'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', '–Ω–∞—á–∞–ª–æ'],
        'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', '–∑–∞–≤–µ—Ä—à–µ–Ω']
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
      if (keyMappings[audioKey]) {
        possibleKeys.push(...keyMappings[audioKey]);
      }
      
      console.log(`üîç –ü–†–û–í–ï–†–Ø–Æ –ö–õ–Æ–ß–ò:`, possibleKeys);
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
      let foundKey = null;
      let audioUrl = null;
      
      for (const key of possibleKeys) {
        if (customAudioFiles[key]) {
          foundKey = key;
          audioUrl = customAudioFiles[key];
          break;
        }
      }
      
      // –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù - –ü–†–û–ë–£–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö
      if (!audioUrl || !foundKey) {
        console.log(`üîç –ó–ê–ü–£–°–ö–ê–ï–ú –£–ú–ù–´–ô –ü–û–ò–°–ö –¥–ª—è "${audioKey}"...`);
        const availableKeys = Object.keys(customAudioFiles);
        
        // –ò—â–µ–º –∫–ª—é—á–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏–∑ –∏—Å–∫–æ–º–æ–≥–æ
        const searchWords = audioKey.toLowerCase().split('-');
        console.log(`üî§ –ò—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º:`, searchWords);
        
        for (const availKey of availableKeys) {
          const availKeyLower = availKey.toLowerCase();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
          for (const word of searchWords) {
            if (word.length > 2 && availKeyLower.includes(word)) {
              console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${word}"`);
              foundKey = availKey;
              audioUrl = customAudioFiles[availKey];
              break;
            }
          }
          
          if (foundKey) break;
        }
        
        // –ï—â—ë –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if (!foundKey) {
          const russianKeywords = {
            'discount': ['—Å–∫–∏–¥–∫', '–∫–æ—à–µ–ª', '—Ç–æ–≤–∞—Ä—ã'],
            'check-product': ['—Ç–æ–≤–∞—Ä', '–∫–∞–º–µ—Ä', '–ø—Ä–æ–≤–µ—Ä'],  
            'rate-service': ['–æ—Ü–µ–Ω–∏', '–ø–≤–∑', '–ø—Ä–∏–ª–æ–∂–µ–Ω']
          };
          
          const keywords = russianKeywords[audioKey] || [];
          console.log(`üî§ –ò—â–µ–º –ø–æ —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–∞–º –¥–ª—è "${audioKey}":`, keywords);
          
          for (const availKey of availableKeys) {
            const availKeyLower = availKey.toLowerCase();
            
            for (const keyword of keywords) {
              if (availKeyLower.includes(keyword)) {
                console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –ü–û –†–£–°–°–ö–û–ú–£ –°–õ–û–í–£: "${availKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${keyword}"`);
                foundKey = availKey;
                audioUrl = customAudioFiles[availKey];
                break;
              }
            }
            
            if (foundKey) break;
          }
        }
      }

      if (audioUrl && foundKey) {
        console.log(`üéµ –ù–ê–ô–î–ï–ù –§–ê–ô–õ "${foundKey}" –î–õ–Ø "${audioKey}"`);
        console.log(`üîó URL:`, audioUrl.substring(0, 50) + '...');
        try {
          const audio = new Audio(audioUrl);
          audio.volume = 0.8;
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
          const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
          if (savedSpeed) {
            audio.playbackRate = parseFloat(savedSpeed);
          }
          
          console.log(`‚ñ∂Ô∏è –ù–ê–ß–ò–ù–ê–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...`);
          await audio.play();
          console.log(`‚úÖ –ó–í–£–ö –£–°–ü–ï–®–ù–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${foundKey}`);
          return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
        } catch (audioError) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${foundKey}":`, audioError);
          console.error(`‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:`, {
            name: audioError.name,
            message: audioError.message,
            audioUrl: audioUrl.substring(0, 100)
          });
        }
      } else {
        // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –Ø–ß–ï–ï–ö  
        if (audioKey.includes('cell-') || audioKey.includes('—è—á–µ–π–∫–∞') || /^cell-\d+$/.test(audioKey)) {
          console.warn(`üè† –û–ó–í–£–ß–ö–ê –î–õ–Ø –Ø–ß–ï–ô–ö–ò "${audioKey}" –ù–ï –ù–ê–ô–î–ï–ù–ê`);
          console.log(`üí° –£ –≤–∞—Å –µ—Å—Ç—å ${Object.keys(customAudioFiles).filter(k => k.includes('cell-') || /^\d+$/.test(k)).length} –æ–∑–≤—É—á–µ–∫ —è—á–µ–µ–∫, –Ω–æ –Ω–µ –¥–ª—è —ç—Ç–æ–π`);
          console.log(`üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ –≤: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫`);
          
          // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É - –ø—Ä–æ—Å—Ç–æ —Ç–∏—Ö–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
          return;
        }
        
        console.log(`‚ö†Ô∏è –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù –î–õ–Ø "${audioKey}"`);
        console.log(`üîç –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò:`, possibleKeys);
        console.log(`üìã –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´ (–ø–µ—Ä–≤—ã–µ 10):`, Object.keys(customAudioFiles).slice(0, 10));
        console.log(`‚ùå –ó–í–£–ö –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è "${audioKey}" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
      }
      return;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${audioKey}":`, error);
    }
  }, [customAudioFiles]);

  const playCellAudio = useCallback(async (cellNumber: string) => {
    try {
      console.log(`üîä –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏: ${cellNumber}`);
      console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
      const cellKey = `cell-${cellNumber}`;
      const audioUrl = customAudioFiles[cellKey];
      
      if (audioUrl) {
        console.log(`üéµ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        try {
          const audio = new Audio(audioUrl);
          audio.volume = 0.8;
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
          const savedSpeed = localStorage.getItem('wb-pvz-audio-speed');
          if (savedSpeed) {
            audio.playbackRate = parseFloat(savedSpeed);
          }
          
          await audio.play();
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ ${cellNumber}`);
          return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
        } catch (audioError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏ ${cellNumber}:`, audioError);
        }
      } else {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á: ${cellKey})`);
      }
      
      // –í–°–¢–†–û–ï–ù–ù–´–ô –ó–í–£–ö –î–õ–Ø –Ø–ß–ï–ï–ö –¢–û–ñ–ï –û–¢–ö–õ–Æ–ß–ï–ù
      console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫:`, Object.keys(customAudioFiles).filter(key => key.startsWith('cell-')));
      console.log(`‚ùå –ó–í–£–ö –Ø–ß–ï–ô–ö–ò –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù - –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª cell-${cellNumber}.mp3 –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`);
      return;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    }
  }, [customAudioFiles]);

  const updateAudioFiles = useCallback(async (files: {[key: string]: string}) => {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã. –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:`, Object.keys(files));
    console.log(`üìÑ –¢–∏–ø—ã URL –≤ files:`, Object.entries(files).map(([key, url]) => ({ key, isBlob: url.startsWith('blob:') })));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob URL –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const permanentFiles: {[key: string]: string} = {};
    
    for (const [key, url] of Object.entries(files)) {
      if (url.startsWith('blob:')) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
          const response = await fetch(url);
          const arrayBuffer = await response.arrayBuffer();
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
          const base64 = arrayBufferToBase64(arrayBuffer);
          const mimeType = response.headers.get('content-type') || 'audio/mpeg';
          permanentFiles[key] = `data:${mimeType};base64,${base64}`;
          
          console.log(`‚úÖ –§–∞–π–ª "${key}" –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ "${key}":`, error);
          permanentFiles[key] = url; // Fallback –∫ blob URL
        }
      } else {
        permanentFiles[key] = url;
      }
    }
    
    const updatedFiles = { ...customAudioFiles, ...permanentFiles };
    setCustomAudioFiles(updatedFiles);
    
    // üîí –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è—á–µ–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏ (–ù–ê–í–°–ï–ì–î–ê!)
    const cellFiles = Object.entries(updatedFiles).filter(([key]) => 
      key.includes('cell-') || 
      key.includes('—è—á–µ–π–∫–∞') || 
      /^\d+$/.test(key) ||
      key.includes('acceptance-')
    );
    
    if (cellFiles.length > 0) {
      try {
        const cellSettings = Object.fromEntries(cellFiles);
        localStorage.setItem('wb-pvz-cell-audio-settings-permanent', JSON.stringify(cellSettings));
        localStorage.setItem('wb-pvz-cell-audio-timestamp', new Date().toISOString());
        localStorage.setItem('wb-pvz-cell-audio-lock', 'LOCKED'); // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
        
        console.log(`üè† üîí –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –Ø–ß–ï–ï–ö: ${cellFiles.length} —Ñ–∞–π–ª–æ–≤`);
        console.log('üíé –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è—á–µ–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ù–ê–í–°–ï–ì–î–ê –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –∫–ª—é—á–µ!');
        console.log('üîê –ö–ª—é—á–∏ —è—á–µ–µ–∫:', cellFiles.map(([key]) => key));
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫:', error);
      }
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    try {
      const jsonData = JSON.stringify(updatedFiles);
      const sizeInMB = (jsonData.length / (1024 * 1024)).toFixed(2);
      
      localStorage.setItem(STORAGE_KEY, jsonData);
      localStorage.setItem(`${STORAGE_KEY}-timestamp`, new Date().toISOString());
      localStorage.setItem(`${STORAGE_KEY}-count`, Object.keys(updatedFiles).length.toString());
      
      const cellFiles = Object.keys(updatedFiles).filter(k => /^\d+$/.test(k) || k.includes('cell-') || k.includes('—è—á–µ–π–∫–∞'));
      
      console.log('‚úÖ === –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${Object.keys(updatedFiles).length} —Ñ–∞–π–ª–æ–≤ (${sizeInMB} –ú–ë)`);
      console.log(`üè† –§–∞–π–ª–æ–≤ —è—á–µ–µ–∫: ${cellFiles.length}`, cellFiles);
      console.log(`‚è∞ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, new Date().toLocaleString('ru-RU'));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
      const verification = localStorage.getItem(STORAGE_KEY);
      if (verification && JSON.parse(verification)) {
        console.log('‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê: –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ localStorage');
      } else {
        console.error('‚ùå –ü–†–û–í–ï–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê: –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
      }
      
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø:', error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ base64
      try {
        const emergencyFiles = Object.fromEntries(
          Object.entries(updatedFiles).filter(([_, url]) => !url.startsWith('data:'))
        );
        localStorage.setItem(STORAGE_KEY + '-emergency', JSON.stringify(emergencyFiles));
        console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï:', Object.keys(emergencyFiles).length, '—Ñ–∞–π–ª–æ–≤');
      } catch (emergencyError) {
        console.error('‚ùå –î–∞–∂–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å:', emergencyError);
      }
    }
  }, [customAudioFiles]);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ArrayBuffer –≤ base64
  const arrayBufferToBase64 = (buffer: ArrayBuffer): string => {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    const len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  };

  const removeAudioFile = useCallback((audioKey: string) => {
    const updatedFiles = { ...customAudioFiles };
    delete updatedFiles[audioKey];
    setCustomAudioFiles(updatedFiles);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedFiles));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage:', error);
    }
  }, [customAudioFiles]);

  const clearAllAudio = useCallback(() => {
    setCustomAudioFiles({});
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ localStorage:', error);
    }
  }, []);

  const getLoadedFiles = useCallback(() => {
    return Object.keys(customAudioFiles);
  }, [customAudioFiles]);

  return { 
    playAudio, 
    playCellAudio,
    updateAudioFiles, 
    removeAudioFile, 
    clearAllAudio, 
    getLoadedFiles,
    customAudioFiles 
  };
};