import { useState, useEffect } from 'react';
import { useAudio } from './useAudio';
import { findOrderByPhone } from '@/data/mockOrders';

export interface Product {
  id: string;
  article: string;
  name: string;
  size: string;
  color: string;
  barcode: string;
  currentPrice: number;
  originalPrice: number;
}

export interface AudioFiles {
  delivery: File[];
  receiving: File[];
  return: File[];
  cells: File[];
}

export const useWarehouseApp = () => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeTab, setActiveTab] = useState('delivery');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [showAudioSettings, setShowAudioSettings] = useState(false);
  const [showAudioManager, setShowAudioManager] = useState(false);
  const [audioFiles, setAudioFiles] = useState<AudioFiles>({
    delivery: [],
    receiving: [],
    return: [],
    cells: []
  });
  
  const [isProcessing, setIsProcessing] = useState(false);
  const [audioEnabled, setAudioEnabled] = useState(() => {
    const saved = localStorage.getItem('audioEnabled');
    return saved !== null ? JSON.parse(saved) : true;
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏
  const [cellNumber, setCellNumber] = useState(() => Math.floor(Math.random() * 482) + 1);
  const [currentOrder, setCurrentOrder] = useState(null);
  const [currentStep, setCurrentStep] = useState('scan');
  const [itemsCount] = useState(() => Math.floor(Math.random() * 8) + 1);
  const [customerPhone] = useState(() => {
    const codes = ['9', '8', '7', '6', '5'];
    const code = codes[Math.floor(Math.random() * codes.length)];
    const digits = Math.floor(Math.random() * 9000) + 1000;
    return `+7 (...) ... ${code}${digits.toString().slice(0, 1)} ${digits.toString().slice(1, 3)}`;
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
  const [receivingStep, setReceivingStep] = useState(1);
  const [receivingBarcode, setReceivingBarcode] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  const [returnStep, setReturnStep] = useState(1);
  const [returnReason, setReturnReason] = useState('');
  
  // –ê—É–¥–∏–æ —Ö—É–∫
  const { playAudio, playCellAudio, updateAudioFiles, removeAudioFile, clearAllAudio, customAudioFiles } = useAudio();
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
  const productNames = [
    'Nike / –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ Air Max',
    'Adidas / –§—É—Ç–±–æ–ª–∫–∞ –∂–µ–Ω—Å–∫–∞—è Originals',
    'Zara / –î–∂–∏–Ω—Å—ã –∂–µ–Ω—Å–∫–∏–µ slim fit',
    'H&M / –ü–ª–∞—Ç—å–µ –≤–µ—á–µ—Ä–Ω–µ–µ —á—ë—Ä–Ω–æ–µ',
    'Uniqlo / –†—É–±–∞—à–∫–∞ –º—É–∂—Å–∫–∞—è –±–µ–ª–∞—è',
    'Levi\'s / –ö—É—Ä—Ç–∫–∞ –¥–∂–∏–Ω—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è',
    'Calvin Klein / –¢—Ä—É—Å—ã –º—É–∂—Å–∫–∏–µ –Ω–∞–±–æ—Ä 3—à—Ç',
    'Tommy Hilfiger / –ü–æ–ª–æ –º—É–∂—Å–∫–æ–µ —Å–∏–Ω–µ–µ',
    'Apple / –ß–µ—Ö–æ–ª –¥–ª—è iPhone 14 Pro',
    'Samsung / –ù–∞—É—à–Ω–∏–∫–∏ Galaxy Buds Pro',
    'Xiaomi / Powerbank 20000mAh',
    'Logitech / –ú—ã—à—å –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è MX Master',
    '–¢–ï–õ–û–î–í–ò–ñ–ï–ù–ò–Ø / –•—É–¥–∏ —É–Ω–∏—Å–µ–∫—Å —á–µ—Ä–Ω–æ–µ',
    '–¢–ï–õ–û–î–í–ò–ñ–ï–ù–ò–Ø / –°–≤–∏—Ç—à–æ—Ç –∂–µ–Ω—Å–∫–∏–π —Ä–æ–∑–æ–≤—ã–π',
    '–¢–ï–õ–û–î–í–ò–ñ–ï–ù–ò–Ø / –õ–æ–Ω–≥—Å–ª–∏–≤ –º—É–∂—Å–∫–æ–π —Å–µ—Ä—ã–π'
  ];

  const generatePrices = () => {
    const originalPrice = Math.floor(Math.random() * 8000) + 500;
    const discountPercent = Math.floor(Math.random() * 70) + 10;
    const currentPrice = Math.floor(originalPrice * (100 - discountPercent) / 100);
    return { currentPrice, originalPrice };
  };

  const mockProducts: Product[] = Array.from({ length: itemsCount }, (_, index) => {
    const { currentPrice, originalPrice } = generatePrices();
    return {
      id: `16466782${Math.floor(Math.random() * 9000) + 1000}${index}`,
      article: `${Math.floor(Math.random() * 9000) + 1000}`,
      name: productNames[Math.floor(Math.random() * productNames.length)],
      size: ['XS', 'S', 'M', 'L', 'XL', '42', '43', '44', '46', '48', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'][Math.floor(Math.random() * 11)],
      color: ['–ß–µ—Ä–Ω—ã–π', '–ë–µ–ª—ã–π', '–°–µ—Ä—ã–π', '–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–ó–µ–ª—ë–Ω—ã–π', '–ñ—ë–ª—Ç—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–†–æ–∑–æ–≤—ã–π', '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π'][Math.floor(Math.random() * 10)],
      barcode: `${Math.floor(Math.random() * 900000000000) + 100000000000}`,
      currentPrice,
      originalPrice
    };
  });

  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  useEffect(() => {
    localStorage.setItem('audioEnabled', JSON.stringify(audioEnabled));
  }, [audioEnabled]);
  
  useEffect(() => {
    if (isProcessing) {
      const timeoutId = setTimeout(() => {
        console.warn('‚ö†Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å isProcessing');
        setIsProcessing(false);
      }, 3000);
      
      return () => clearTimeout(timeoutId);
    }
  }, [isProcessing]);

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
  const enableAudio = () => {
    if (!audioEnabled) {
      setAudioEnabled(true);
      const silent = new Audio('data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAAAMAC4AAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
      silent.play().catch(() => {});
      console.log('üîä –ê—É–¥–∏–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–¥–∞—á–∏
  const handleQRScan = async () => {
    enableAudio();
    if (activeTab === 'delivery' && !isProcessing) {
      setIsProcessing(true);
      setIsScanning(true);
      
      try {
        console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï QR!');
        
        // –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
        setIsScanning(false);
        setCurrentStep('manager-scan');
        
        // –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ (–±–µ–∑ await —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
        if (audioEnabled) {
          playCellAudio(String(cellNumber)).catch(audioError => {
            console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏:', audioError);
          });
        }
        
        // –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î –ö –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Æ –ú–ï–ù–ï–î–ñ–ï–†–ê
        handleManagerScan();
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        setIsScanning(false);
        setIsProcessing(false);
      }
    }
  };

  const handleManagerScan = async () => {
    if (isProcessing && currentStep === 'manager-scan') {
      try {
        console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê!');
        
        // –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
        setCurrentStep('check');
        
        // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –í–´–î–ê–ß–ê –¢–û–í–ê–†–ê
        handleGiveItem();
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
        setIsProcessing(false);
      }
    }
  };

  const handleGiveItem = async () => {
    if (isProcessing) return;
    
    enableAudio();
    setIsProcessing(true);
    console.log('‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –í–´–î–ê–ß–ê –¢–û–í–ê–†–ê!');
    setCurrentStep('payment');
    
    try {
      // –û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–±–µ–∑ await —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
      if (audioEnabled) {
        playAudio('delivery-complete').catch(audioError => {
          console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', audioError);
        });
      }
      
      // –ú–ì–ù–û–í–ï–ù–ù–´–ô –°–ë–†–û–° –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
      setCurrentStep('scan');
      setPhoneNumber('');
      setCurrentOrder(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
      setIsProcessing(false);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–¥–∞—á–∏:', error);
      setIsProcessing(false);
    }
  };

  const handleConfirmCode = () => {
    if (phoneNumber.length === 4) {
      // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const foundOrder = findOrderByPhone(phoneNumber);
      
      if (foundOrder) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É –∏–∑ –∑–∞–∫–∞–∑–∞
        const cellNumberFromOrder = parseInt(foundOrder.cellNumber);
        setCellNumber(cellNumberFromOrder);
        setCurrentOrder(foundOrder);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phoneNumber}, —è—á–µ–π–∫–∞: ${cellNumberFromOrder}`);
      } else {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —è—á–µ–π–∫—É
        const randomCellNumber = Math.floor(Math.random() * 400) + 50;  // –û—Ç 50 –¥–æ 450
        setCellNumber(randomCellNumber);
        console.log(`üì¶ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phoneNumber}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —è—á–µ–π–∫—É: ${randomCellNumber}`);
      }
      
      handleQRScan();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
  const handleReceivingStart = async () => {
    enableAudio();
    setReceivingStep(2);
    
    if (audioEnabled) {
      try {
        await playAudio('receiving-start');
      } catch (audioError) {
        console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∫–∏:', audioError);
      }
    }
  };

  const handleReceivingNext = async () => {
    if (receivingStep < 4) {
      const nextStep = receivingStep + 1;
      setReceivingStep(nextStep);
      
      if (audioEnabled) {
        try {
          await playAudio('receiving-scan');
        } catch (audioError) {
          console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –ø—Ä–∏–µ–º–∫–∏:', audioError);
        }
      }
    }
  };

  const handleReceivingReset = () => {
    setReceivingStep(1);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  const handleReturnStart = () => {
    setReturnStep(2);
  };

  const handleReturnComplete = async () => {
    setReturnStep(1);
    
    if (audioEnabled) {
      try {
        await playAudio('return-complete');
      } catch (audioError) {
        console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', audioError);
      }
    }
  };

  const handleReturnReasonSelect = (reason: string) => {
    setReturnReason(reason);
  };

  const handleReturnStepChange = (step: number) => {
    setReturnStep(step);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ
  const handleAudioManagerUpdate = (newFiles: { [key: string]: string }) => {
    updateAudioFiles(newFiles);
    console.log('–û–∑–≤—É—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ AudioManager:', Object.keys(newFiles));
  };

  const handleTestAudio = async () => {
    enableAudio();
    try {
      await playAudio('delivery-complete');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
    }
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    activeTab,
    phoneNumber,
    isScanning,
    showAudioSettings,
    showAudioManager,
    audioFiles,
    isProcessing,
    audioEnabled,
    cellNumber,
    currentOrder,
    currentStep,
    itemsCount,
    customerPhone,
    receivingStep,
    receivingBarcode,
    returnStep,
    returnReason,
    mockProducts,
    customAudioFiles,
    
    // –°–µ—Ç—Ç–µ—Ä—ã
    setActiveTab,
    setPhoneNumber,
    setShowAudioSettings,
    setShowAudioManager,
    setAudioFiles,
    setAudioEnabled,
    setReceivingBarcode,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handleQRScan,
    handleConfirmCode,
    handleReceivingStart,
    handleReceivingNext,
    handleReceivingReset,
    handleReturnStart,
    handleReturnComplete,
    handleReturnReasonSelect,
    handleReturnStepChange,
    handleAudioManagerUpdate,
    handleTestAudio,
    clearAllAudio,
    removeAudioFile
  };
};