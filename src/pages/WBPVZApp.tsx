import { useEffect } from 'react';
import QRScanner from '@/components/QRScanner';
import Header from '@/components/Header';
import SideMenu from '@/components/SideMenu';
import TabContent from '@/components/TabContent';
import SettingsModal from '@/components/SettingsModal';
import Footer from '@/components/Footer';

import { useAudio } from '@/hooks/useAudio';
import { useAppState } from '@/hooks/useAppState';
import { useAppHandlers } from '@/hooks/useAppHandlers';
import { useAudioHelpers } from '@/hooks/useAudioHelpers';


const WBPVZApp = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const appState = useAppState();
  const { playAudio, updateAudioFiles, customAudioFiles, clearAllAudio } = useAudio();
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const appHandlers = useAppHandlers({
    activeTab: appState.activeTab,
    deliveryStep: appState.deliveryStep,
    currentOrder: appState.currentOrder,
    customAudioFiles,
    expandedMenuItems: appState.expandedMenuItems,
    audioSettings: appState.audioSettings,
    playAudio,
    updateAudioFiles,
    setIsScanning: appState.setIsScanning,
    setShowQRScanner: appState.setShowQRScanner,
    setCurrentOrder: appState.setCurrentOrder,
    setDeliveryStep: appState.setDeliveryStep,
    setScannedData: appState.setScannedData,
    setIsProductScanned: appState.setIsProductScanned,
    setPhoneNumber: appState.setPhoneNumber,
    setExpandedMenuItems: appState.setExpandedMenuItems,
    setPvzInfo: appState.setPvzInfo,
    setAudioSettings: appState.setAudioSettings,
  });

  // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—É–¥–∏–æ
  const audioHelpers = useAudioHelpers(updateAudioFiles, customAudioFiles);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–∑–≤—É—á–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const restoreVariantAudio = (variantKey: string) => {
      try {
        const storageKey = `wb-pvz-${variantKey}-audio-base64`;
        const savedData = localStorage.getItem(storageKey);
        
        if (savedData) {
          const base64Files = JSON.parse(savedData);
          const restoredFiles: { [key: string]: string } = {};
          
          Object.entries(base64Files).forEach(([fileName, base64Data]) => {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ blob URL
            const byteCharacters = atob((base64Data as string).split(',')[1]);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
              byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], { type: 'audio/mpeg' });
            const audioUrl = URL.createObjectURL(blob);
            
            restoredFiles[fileName] = audioUrl;
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
          updateAudioFiles(prev => ({ ...prev, ...restoredFiles }));
          
          console.log(`üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù –í–ê–†–ò–ê–ù–¢ ${variantKey}: ${Object.keys(restoredFiles).length} —Ñ–∞–π–ª–æ–≤`);
        }
      } catch (e) {
        console.warn(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${variantKey}:`, e);
      }
    };
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    restoreVariantAudio('variant-variant1');
    restoreVariantAudio('variant-variant2');
  }, [updateAudioFiles]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ–∑–≤—É—á–∫–∏
  const handleClearAllAudio = () => {
    if (confirm('‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –í–°–Æ –æ–∑–≤—É—á–∫—É?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ MP3 —Ñ–∞–π–ª—ã —è—á–µ–µ–∫ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏.')) {
      clearAllAudio();
      
      // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      localStorage.removeItem('wb-pvz-variant-variant1-audio-base64');
      localStorage.removeItem('wb-pvz-variant-variant1-files');
      localStorage.removeItem('wb-pvz-variant-variant2-audio-base64');
      localStorage.removeItem('wb-pvz-variant-variant2-files');
      
      alert('‚úÖ –í—Å—è –æ–∑–≤—É—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.');
    }
  };



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏ —Å —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const handleTabChange = (tab: string) => {
    appState.setActiveTab(tab);
    appHandlers.handleTabChange(tab);
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è togglePhraseEnabled —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const handleTogglePhraseEnabled = (tabId: string, phraseIndex: number) => {
    audioHelpers.togglePhraseEnabled(tabId, phraseIndex, appState.audioSettings, appHandlers.updateAudioSetting);
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <Header
        onMenuOpen={() => appState.setShowSideMenu(true)}
        onSettingsOpen={() => appState.setShowSettings(true)}
        activeTab={appState.activeTab}
        setActiveTab={handleTabChange}
      />

      <div className="flex-1 p-6">
        <TabContent
          activeTab={appState.activeTab}
          phoneNumber={appState.phoneNumber}
          setPhoneNumber={appState.setPhoneNumber}
          isScanning={appState.isScanning}
          scannedData={appState.scannedData}
          onQRScan={appHandlers.handleQRScan}
          onPhoneSubmit={appHandlers.handlePhoneSubmit}
          deliveryStep={appState.deliveryStep}
          isProductScanned={appState.isProductScanned}
          onCellClick={appHandlers.handleCellClick}
          onScanProduct={appHandlers.handleScanProduct}
          onDeliverProduct={appHandlers.handleDeliverProduct}
          currentOrder={appState.currentOrder}
          playAudio={playAudio}
          customAudioFiles={customAudioFiles}
        />
      </div>

      <Footer />

      <SideMenu
        isOpen={appState.showSideMenu}
        onClose={() => appState.setShowSideMenu(false)}
        onSettingsOpen={() => appState.setShowSettings(true)}
        pvzInfo={appState.pvzInfo}
        updatePvzInfo={appHandlers.updatePvzInfo}
        expandedMenuItems={appState.expandedMenuItems}
        toggleMenuItem={appHandlers.toggleMenuItem}
        handleDiscountAudio={appHandlers.handleDiscountAudio}
        handleCheckProductAudio={appHandlers.handleCheckProductAudio}
        handleRatePvzAudio={appHandlers.handleRatePvzAudio}
        handleCashOnDeliveryAudio={appHandlers.handleCashOnDeliveryAudio}
        handleClearAllAudio={handleClearAllAudio}
      />

      <SettingsModal
        isOpen={appState.showSettings}
        onClose={() => appState.setShowSettings(false)}
        audioSettings={appState.audioSettings}
        customAudioFiles={customAudioFiles}
        updateAudioSetting={appHandlers.updateAudioSetting}
        playAudio={playAudio}
        handleFolderUpload={audioHelpers.handleFolderUpload}
        getTabName={audioHelpers.getTabName}
        getPhrasesByTab={audioHelpers.getPhrasesByTab}
        getDescriptionsByTab={audioHelpers.getDescriptionsByTab}
        togglePhraseEnabled={handleTogglePhraseEnabled}
      />

      <QRScanner
        isOpen={appState.showQRScanner}
        onScan={appHandlers.handleQRScanResult}
        onClose={() => appState.setShowQRScanner(false)}
      />


    </div>
  );
};

export default WBPVZApp;