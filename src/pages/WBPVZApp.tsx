import { useState, useCallback, useEffect } from 'react';
import { useAudio } from '@/hooks/useAudio';
import QRScanner from '@/components/QRScanner';
import Header from '@/components/Header';
import SideMenu from '@/components/SideMenu';
import TabContent from '@/components/TabContent';
import SettingsModal from '@/components/SettingsModal';
import Footer from '@/components/Footer';
import { findOrderByPhone, Order } from '@/data/mockOrders';

const WBPVZApp = () => {
  const [activeTab, setActiveTab] = useState('acceptance');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showSideMenu, setShowSideMenu] = useState(false);
  const [scannedData, setScannedData] = useState<string>('');
  const [deliveryStep, setDeliveryStep] = useState<'initial' | 'client-scanned' | 'product-scanned' | 'completed'>('initial');
  const [isProductScanned, setIsProductScanned] = useState(false);
  const [currentOrder, setCurrentOrder] = useState<Order | null>(null);
  const [expandedMenuItems, setExpandedMenuItems] = useState<{ [key: string]: boolean }>(() => {
    const saved = localStorage.getItem('wb-pvz-expanded-menu');
    return saved ? JSON.parse(saved) : { settings: false };
  });
  const [pvzInfo, setPvzInfo] = useState({
    id: localStorage.getItem('wb-pvz-id') || '',
    address: localStorage.getItem('wb-pvz-address') || '',
    employeeId: localStorage.getItem('wb-pvz-employee-id') || ''
  });
  const [audioSettings, setAudioSettings] = useState({
    speed: parseFloat(localStorage.getItem('wb-pvz-audio-speed') || '1'),
    activeTab: localStorage.getItem('wb-pvz-audio-tab') || 'delivery',
    phrases: JSON.parse(localStorage.getItem('wb-pvz-audio-phrases') || '{}'),
    enabled: JSON.parse(localStorage.getItem('wb-pvz-audio-enabled') || '{}')
  });
  
  const { playAudio, updateAudioFiles, customAudioFiles } = useAudio();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const savedAudioFiles = localStorage.getItem('wb-pvz-uploaded-audio-files');
    if (savedAudioFiles) {
      try {
        const fileNames = JSON.parse(savedAudioFiles);
        console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${fileNames.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage`);
        // –ó–¥–µ—Å—å –º–æ–≥–ª–∏ –±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã, –Ω–æ URL –æ–±—ä–µ–∫—Ç—ã –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', e);
      }
    }
  }, []);

  const handleQRScan = useCallback(() => {
    setShowQRScanner(true);
  }, []);

  const toggleMenuItem = useCallback((item: string) => {
    const newExpanded = {
      ...expandedMenuItems,
      [item]: !expandedMenuItems[item]
    };
    setExpandedMenuItems(newExpanded);
    localStorage.setItem('wb-pvz-expanded-menu', JSON.stringify(newExpanded));
  }, [expandedMenuItems]);

  const updatePvzInfo = useCallback((field: string, value: string) => {
    setPvzInfo(prev => {
      const updated = { ...prev, [field]: value };
      localStorage.setItem(`wb-pvz-${field.replace(/([A-Z])/g, '-$1').toLowerCase()}`, value);
      return updated;
    });
  }, []);

  const handleQRScanResult = useCallback(async (data: string) => {
    console.log('QR –∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:', data);
    setScannedData(data);
    setIsScanning(true);
    
    if (activeTab === 'delivery') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ - —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞
      if (deliveryStep === 'initial') {
        // –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - QR –∫–ª–∏–µ–Ω—Ç–∞/–∫—É—Ä—å–µ—Ä–∞, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫–∞–∑
        const order = findOrderByPhone('5667'); // —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        if (order) {
          setCurrentOrder(order);
          setDeliveryStep('client-scanned');
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ —Å–∫–∏–¥–∫—É
          await playAudio(`cell-${order.cellNumber}`);
          await new Promise(resolve => setTimeout(resolve, 1000));
          await playAudio('discount');
        }
        
      } else if (deliveryStep === 'client-scanned') {
        // –í—Ç–æ—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
        setDeliveryStep('product-scanned');
        setIsProductScanned(true);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
        await playAudio('check-product');
      }
    } else {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
      let audioKey = 'scan-success';
      
      if (data.includes('check_product') || data.includes('–ø—Ä–æ–≤–µ—Ä—å')) {
        audioKey = 'check-product';
      } else if (data.includes('discount') || data.includes('—Å–∫–∏–¥–∫–∞')) {
        audioKey = 'discount';
      } else if (data.includes('rate') || data.includes('–æ—Ü–µ–Ω–∏—Ç–µ')) {
        audioKey = 'rate-service';
      } else if (data.includes('client') || data.includes('–∫–ª–∏–µ–Ω—Ç')) {
        audioKey = 'client-found';
      }
      
      await playAudio(audioKey);
    }
    
    setTimeout(() => {
      setIsScanning(false);
    }, 2000);
  }, [playAudio, activeTab, deliveryStep]);

  const handlePhoneSubmit = useCallback(async (lastFourDigits: string) => {
    const order = findOrderByPhone(lastFourDigits);
    if (order) {
      setCurrentOrder(order);
      setDeliveryStep('client-scanned');
      
      // –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ —Å–∫–∏–¥–∫—É
      await playAudio(`cell-${order.cellNumber}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      await playAudio('discount');
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      setPhoneNumber('');
    } else {
      alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }, [playAudio, setPhoneNumber]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏
  const handleCellClick = useCallback(async (cellNumber: string) => {
    // –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
    await playAudio(`cell-${cellNumber}`);
  }, [playAudio]);

  const handleScanProduct = useCallback(async () => {
    // –≠–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    setIsProductScanned(true);
    if (currentOrder) {
      setScannedData(currentOrder.items.map(item => item.barcode).join(','));
    }
    
    // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
    await playAudio('check-product');
  }, [currentOrder, playAudio]);

  const handleDeliverProduct = useCallback(async () => {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ —Å –æ–∑–≤—É—á–∫–æ–π "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ü–í–ó"
    await playAudio('rate-service');
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setDeliveryStep('initial');
      setCurrentOrder(null);
      setIsProductScanned(false);
      setScannedData('');
    }, 3000);
  }, [playAudio]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
  const handleTabChange = useCallback((tab: string) => {
    setActiveTab(tab);
    if (tab !== 'delivery') {
      setDeliveryStep('initial');
      setIsProductScanned(false);
      setScannedData('');
    }
  }, []);

  const updateAudioSetting = useCallback((key: string, value: any) => {
    setAudioSettings(prev => {
      const updated = { ...prev, [key]: value };
      localStorage.setItem(`wb-pvz-audio-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`, 
        typeof value === 'object' ? JSON.stringify(value) : String(value)
      );
      return updated;
    });
  }, []);

  const getTabName = (tabId: string) => {
    const names: { [key: string]: string } = {
      'delivery': '–í—ã–¥–∞—á–∞',
      'acceptance': '–ü—Ä–∏–µ–º–∫–∞', 
      'returns': '–í–æ–∑–≤—Ä–∞—Ç',
      'general': '–û–±—â–∏–µ'
    };
    return names[tabId] || tabId;
  };

  const handleFolderUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>, tabType: string) => {
    const files = event.target.files;
    console.log('–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è', tabType, ':', files?.length);
    
    if (!files) return;

    const audioFiles: { [key: string]: string } = { ...customAudioFiles };
    let newFilesCount = 0;
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª:', file.name, '–¢–∏–ø:', file.type);
      
      if (file.type.startsWith('audio/')) {
        const baseFileName = file.name.replace(/\.[^/.]+$/, '');
        const audioUrl = URL.createObjectURL(file);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤–∫–ª–∞–¥–∫–∏
        const prefixedFileName = `${tabType}-${baseFileName}`;
        audioFiles[prefixedFileName] = audioUrl;
        
        // –¢–ê–ö–ñ–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        audioFiles[baseFileName] = audioUrl;
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª:`, {
          withPrefix: prefixedFileName,
          global: baseFileName,
          url: audioUrl
        });
        
        newFilesCount++;
      }
    }

    if (newFilesCount > 0) {
      updateAudioFiles(audioFiles);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ localStorage –¥–ª—è –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      try {
        const audioFilesToStore = { ...audioFiles };
        // –£–¥–∞–ª—è–µ–º URL –æ–±—ä–µ–∫—Ç—ã –∏–∑ localStorage (–æ–Ω–∏ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è)
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        const fileNames = Object.keys(audioFiles).filter(key => !key.includes('blob:'));
        localStorage.setItem('wb-pvz-uploaded-audio-files', JSON.stringify(fileNames));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${fileNames.length} –Ω–∞–∑–≤–∞–Ω–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage`);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ localStorage:', e);
      }
      
      alert(`–î–ª—è –≤–∫–ª–∞–¥–∫–∏ "${getTabName(tabType)}" –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${newFilesCount} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.\n\n‚úÖ –§–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!`);
    } else {
      alert('–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp3, .wav, .ogg –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏');
    }

    if (event.target) {
      event.target.value = '';
    }
  }, [updateAudioFiles, customAudioFiles, getTabName]);

  const getPhrasesByTab = (tabId: string) => {
    const phrases: { [key: string]: string[] } = {
      'delivery': ['–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏!', '–í–µ—Ä–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É'],
      'acceptance': ['–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', '–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∫–∏'],
      'returns': ['–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω', '–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞'],
      'general': ['–û–±—â–∏–π —Å–∏–≥–Ω–∞–ª', '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã']
    };
    return phrases[tabId] || [];
  };

  const getDescriptionsByTab = (tabId: string) => {
    const descriptions: { [key: string]: { text: string; enabled: boolean }[] } = {
      'delivery': [
        { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É', enabled: true },
        { text: '–°–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–∫–∏', enabled: false }
      ],
      'acceptance': [
        { text: '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞', enabled: true },
        { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ', enabled: true }
      ],
      'returns': [
        { text: '–£—Å–ø–µ—à–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞', enabled: true },
        { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ', enabled: false }
      ],
      'general': [
        { text: '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', enabled: true },
        { text: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏', enabled: true }
      ]
    };
    return descriptions[tabId] || [];
  };

  const togglePhraseEnabled = (tabId: string, phraseIndex: number) => {
    const currentEnabled = audioSettings.enabled[`${tabId}-${phraseIndex}`] || false;
    const newEnabled = {
      ...audioSettings.enabled,
      [`${tabId}-${phraseIndex}`]: !currentEnabled
    };
    updateAudioSetting('enabled', newEnabled);
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <Header
        onMenuOpen={() => setShowSideMenu(true)}
        onSettingsOpen={() => setShowSettings(true)}
        activeTab={activeTab}
        setActiveTab={handleTabChange}
      />

      <div className="flex-1 p-6">
        <TabContent
          activeTab={activeTab}
          phoneNumber={phoneNumber}
          setPhoneNumber={setPhoneNumber}
          isScanning={isScanning}
          scannedData={scannedData}
          onQRScan={handleQRScan}
          onPhoneSubmit={handlePhoneSubmit}
          deliveryStep={deliveryStep}
          isProductScanned={isProductScanned}
          onCellClick={handleCellClick}
          onScanProduct={handleScanProduct}
          onDeliverProduct={handleDeliverProduct}
          currentOrder={currentOrder}
        />
      </div>

      <Footer customAudioFiles={customAudioFiles} playAudio={playAudio} />

      <SideMenu
        isOpen={showSideMenu}
        onClose={() => setShowSideMenu(false)}
        onSettingsOpen={() => setShowSettings(true)}
        pvzInfo={pvzInfo}
        updatePvzInfo={updatePvzInfo}
        expandedMenuItems={expandedMenuItems}
        toggleMenuItem={toggleMenuItem}
      />

      <SettingsModal
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
        audioSettings={audioSettings}
        customAudioFiles={customAudioFiles}
        updateAudioSetting={updateAudioSetting}
        playAudio={playAudio}
        handleFolderUpload={handleFolderUpload}
        getTabName={getTabName}
        getPhrasesByTab={getPhrasesByTab}
        getDescriptionsByTab={getDescriptionsByTab}
        togglePhraseEnabled={togglePhraseEnabled}
      />

      <QRScanner
        isOpen={showQRScanner}
        onScan={handleQRScanResult}
        onClose={() => setShowQRScanner(false)}
      />
    </div>
  );
};

export default WBPVZApp;