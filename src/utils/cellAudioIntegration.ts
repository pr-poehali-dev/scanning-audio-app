/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —è—á–µ–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–∑–≤—É—á–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–∑–≤—É—á–∫–∏
 */

import { saveAudioFiles, loadAudioFilesFromStorage, saveCellSettings } from '../hooks/audio/audioStorage';

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∑–≤—É—á–∫—É —è—á–µ–π–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É (wb-audio-files)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø —á—Ç–æ –∏ "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
 */
export const saveCellAudioToMainSystem = async (cellNumber: string, file: File): Promise<boolean> => {
  try {
    console.log(`üíæ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
    console.log(`üìä [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.size} –±–∞–π—Ç, —Ç–∏–ø: ${file.type}`);
    
    // –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è
    const dataUrl = await fileToDataUrl(file);
    console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Data URL (${dataUrl.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    // –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
    try {
      const testAudio = new Audio(dataUrl);
      testAudio.volume = 0.1;
      await testAudio.play();
      testAudio.pause();
      testAudio.currentTime = 0;
      console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –§–∞–π–ª –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è`);
    } catch (testError) {
      console.error(`‚ùå [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –§–∞–π–ª –ù–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:`, testError);
      throw new Error(`–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${testError.message}`);
    }
    
    // –û–°–ù–û–í–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const existingFiles = loadAudioFilesFromStorage();
    console.log(`üì¶ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(existingFiles).length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const cellKeys = [
      cellNumber,                     // "A1"
      `cell-${cellNumber}`,           // "cell-A1" (–æ—Å–Ω–æ–≤–Ω–æ–π)
      `${cellNumber}`,                // "A1" (–¥—É–±–ª—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
      `—è—á–µ–π–∫–∞-${cellNumber}`,         // "—è—á–µ–π–∫–∞-A1"
      `–Ø—á–µ–π–∫–∞ ${cellNumber}`,         // "–Ø—á–µ–π–∫–∞ A1"
      `delivery-cell-${cellNumber}`,  // "delivery-cell-A1"
      cellNumber.toLowerCase(),       // "a1"
      `cell_${cellNumber}`,           // "cell_A1"
      `${cellNumber}.mp3`,            // "A1.mp3"
      `audio_${cellNumber}`,          // "audio_A1"
    ];
    
    console.log(`üîß [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –°–æ—Ö—Ä–∞–Ω—è—é –ø–æ–¥ ${cellKeys.length} –∫–ª—é—á–∞–º–∏:`, cellKeys);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∫—É –ø–æ–¥ –≤—Å–µ–º–∏ –∫–ª—é—á–∞–º–∏
    cellKeys.forEach(key => {
      existingFiles[key] = dataUrl;
      console.log(`üíæ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–ª—é—á: ${key}`);
    });
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    saveAudioFiles(existingFiles);
    console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –í—ã–∑–≤–∞–Ω saveAudioFiles()`);
    
    saveCellSettings(existingFiles);
    console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –í—ã–∑–≤–∞–Ω saveCellSettings()`);
    
    // –ü–†–û–í–ï–†–ö–ê: –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    const verification = loadAudioFilesFromStorage();
    let foundKeys = 0;
    cellKeys.forEach(key => {
      if (verification[key] && verification[key] === dataUrl) {
        foundKeys++;
      }
    });
    
    console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –ü—Ä–æ–≤–µ—Ä–∫–∞: ${foundKeys}/${cellKeys.length} –∫–ª—é—á–µ–π —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
    
    if (foundKeys === 0) {
      throw new Error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–ò –û–î–ò–ù –∫–ª—é—á –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è!');
    }
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const simpleKey = `audio_${cellNumber}`;
    localStorage.setItem(simpleKey, dataUrl);
    console.log(`‚úÖ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á: ${simpleKey}`);
    
    console.log(`üéâ [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –£–°–ü–ï–•! –Ø—á–µ–π–∫–∞ ${cellNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ ${foundKeys} –∫–ª—é—á–∞–º–∏`);
    return true;
    
  } catch (error) {
    console.error(`üí• [–°–£–ü–ï–†-–°–û–•–†–ê–ù–ï–ù–ò–ï] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–∑–≤—É—á–∫—É —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
 */
export const playCellAudioFromMainSystem = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üéµ [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ${cellNumber}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    const files = loadAudioFilesFromStorage();
    console.log(`üì¶ [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(files).length} —Ñ–∞–π–ª–æ–≤`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const allKeys = Object.keys(files);
    console.log(`üìã [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π:`, allKeys.slice(0, 10));
    
    // –ò—â–µ–º –æ–∑–≤—É—á–∫—É —è—á–µ–π–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–∞–º
    const possibleKeys = [
      `cell-${cellNumber}`,
      `${cellNumber}`,
      `—è—á–µ–π–∫–∞-${cellNumber}`,
      `–Ø—á–µ–π–∫–∞ ${cellNumber}`,
      `delivery-cell-${cellNumber}`,
    ];
    
    console.log(`üîç [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ò—â—É –∫–ª—é—á–∏ –¥–ª—è —è—á–µ–π–∫–∏ "${cellNumber}":`, possibleKeys);
    
    let audioUrl: string | null = null;
    let foundKey = '';
    
    for (const key of possibleKeys) {
      const hasKey = files.hasOwnProperty(key);
      const fileContent = files[key];
      console.log(`üîé [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ö–ª—é—á "${key}": ${hasKey ? '–ï–°–¢–¨' : '–ù–ï–¢'}${hasKey ? ` (${fileContent ? fileContent.substring(0, 30) + '...' : '–ü–£–°–¢–û–ô'})` : ''}`);
      
      if (files[key]) {
        audioUrl = files[key];
        foundKey = key;
        console.log(`‚úÖ [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ù–∞–π–¥–µ–Ω –∫–ª—é—á: ${key}`);
        break;
      }
    }
    
    if (!audioUrl) {
      console.warn(`‚ùå [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      const cellKeys = Object.keys(files).filter(k => 
        k.includes('cell-') || k.includes('—è—á–µ–π–∫–∞') || /^\d+$/.test(k)
      );
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏:`, cellKeys);
      return false;
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
    const audio = new Audio(audioUrl);
    audio.volume = 0.8;
    
    try {
      await audio.play();
      console.log(`‚úÖ [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è (–∫–ª—é—á: ${foundKey})`);
      return true;
    } catch (playError) {
      console.error(`‚ùå [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:`, playError);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ —Å –æ–∑–≤—É—á–∫–æ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export const getCellsFromMainSystem = (): string[] => {
  try {
    const files = loadAudioFilesFromStorage();
    console.log(`üì¶ [getCellsFromMainSystem] –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${Object.keys(files).length}`);
    
    const cellNumbers: Set<string> = new Set();
    const validCells: Set<string> = new Set();
    let emptyFiles = 0;
    let validFiles = 0;
    
    Object.keys(files).forEach(key => {
      let cellNumber = '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–ª—é—á–µ–π
      if (key.startsWith('cell-')) {
        cellNumber = key.replace('cell-', '');
      } else if (key.startsWith('—è—á–µ–π–∫–∞-')) {
        cellNumber = key.replace('—è—á–µ–π–∫–∞-', '');
      } else if (key.startsWith('–Ø—á–µ–π–∫–∞ ')) {
        cellNumber = key.replace('–Ø—á–µ–π–∫–∞ ', '');
      } else if (key.startsWith('delivery-cell-')) {
        cellNumber = key.replace('delivery-cell-', '');
      } else if (/^\d+$/.test(key)) {
        cellNumber = key;
      }
      
      if (cellNumber) {
        cellNumbers.add(cellNumber);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        const fileContent = files[key];
        if (fileContent && fileContent.length > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
          validCells.add(cellNumber);
          validFiles++;
        } else {
          emptyFiles++;
        }
      }
    });
    
    const sortedCells = Array.from(validCells).sort((a, b) => {
      const aNum = parseInt(a) || 0;
      const bNum = parseInt(b) || 0;
      return aNum - bNum;
    });
    
    console.log(`üìã [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ù–∞–π–¥–µ–Ω–æ ${cellNumbers.size} –∫–ª—é—á–µ–π —è—á–µ–µ–∫, –∏–∑ –Ω–∏—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validCells.size}`);
    console.log(`üìä [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validFiles}, –ø—É—Å—Ç—ã—Ö: ${emptyFiles}`);
    console.log(`üéØ [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –ü–µ—Ä–≤—ã–µ 10 –≤–∞–ª–∏–¥–Ω—ã—Ö:`, sortedCells.slice(0, 10));
    return sortedCells;
    
  } catch (error) {
    console.error(`‚ùå [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è—á–µ–µ–∫:`, error);
    return [];
  }
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ Data URL
 */
function fileToDataUrl(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —è—á–µ–π–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–∞–ø–ø–∏–Ω–≥–∞ –∫–ª—é—á–µ–π
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é playAudio()
 */
export const addCellsToKeyMapping = (): void => {
  try {
    const cells = getCellsFromMainSystem();
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π
    const dynamicMapping: {[key: string]: string[]} = {};
    
    cells.forEach(cellNumber => {
      const cellKey = `cell-${cellNumber}`;
      dynamicMapping[cellKey] = [
        `cell-${cellNumber}`,
        `${cellNumber}`,
        `—è—á–µ–π–∫–∞-${cellNumber}`,
        `–Ø—á–µ–π–∫–∞ ${cellNumber}`,
        `delivery-cell-${cellNumber}`,
      ];
    });
    
    console.log(`üîß [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${cells.length} —è—á–µ–µ–∫`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ audioPlayer
    (window as any).cellKeyMapping = dynamicMapping;
    
  } catch (error) {
    console.error(`‚ùå [–ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞:`, error);
  }
};

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —è—á–µ–µ–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º –≤ –≥–ª–∞–≤–Ω—É—é
 */
export const migrateCellsToMainSystem = async (): Promise<number> => {
  let migratedCount = 0;
  
  try {
    console.log(`üîÑ [–ú–ò–ì–†–ê–¶–ò–Ø] –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —è—á–µ–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Object URL –º–µ–Ω–µ–¥–∂–µ—Ä
    try {
      const { objectUrlAudioManager } = await import('./objectUrlAudioManager');
      const objectUrlCells = objectUrlAudioManager.getCellsWithAudio();
      
      if (objectUrlCells.length > 0) {
        console.log(`üì¶ [–ú–ò–ì–†–ê–¶–ò–Ø] –ù–∞–π–¥–µ–Ω–æ ${objectUrlCells.length} —è—á–µ–µ–∫ –≤ Object URL –º–µ–Ω–µ–¥–∂–µ—Ä–µ`);
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Object URLs –Ω–µ–ª—å–∑—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ Data URLs,
        // –Ω–æ –º—ã –º–æ–∂–µ–º —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–∞–ø–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è [–ú–ò–ì–†–ê–¶–ò–Ø] Object URL –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π Data URL –º–µ–Ω–µ–¥–∂–µ—Ä
    try {
      const { audioManager } = await import('./simpleAudioManager');
      const dataUrlCells = audioManager.getCellsWithAudio();
      
      if (dataUrlCells.length > 0) {
        console.log(`üì¶ [–ú–ò–ì–†–ê–¶–ò–Ø] –ù–∞–π–¥–µ–Ω–æ ${dataUrlCells.length} —è—á–µ–µ–∫ –≤ Data URL –º–µ–Ω–µ–¥–∂–µ—Ä–µ`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º Data URLs
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è [–ú–ò–ì–†–ê–¶–ò–Ø] Data URL –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π
    addCellsToKeyMapping();
    
    console.log(`‚úÖ [–ú–ò–ì–†–ê–¶–ò–Ø] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è ${migratedCount} —è—á–µ–µ–∫`);
    return migratedCount;
    
  } catch (error) {
    console.error(`‚ùå [–ú–ò–ì–†–ê–¶–ò–Ø] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:`, error);
    return 0;
  }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —è—á–µ–µ–∫
 */
export const initializeCellAudioSystem = async (): Promise<void> => {
  try {
    console.log(`üöÄ [–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø] –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫...`);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏
    await migrateCellsToMainSystem();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π
    addCellsToKeyMapping();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const cells = getCellsFromMainSystem();
    console.log(`‚úÖ [–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø] –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –î–æ—Å—Ç—É–ø–Ω–æ ${cells.length} —è—á–µ–µ–∫`);
    
  } catch (error) {
    console.error(`‚ùå [–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:`, error);
  }
};