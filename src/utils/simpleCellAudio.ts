// –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò –Ø–ß–ï–ï–ö

const STORAGE_KEY = 'SIMPLE_CELL_AUDIO_SYSTEM';

// –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
export const saveCellAudio = async (cellNumber: string, file: File): Promise<boolean> => {
  try {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é —è—á–µ–π–∫—É ${cellNumber}:`, file.name);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const base64 = await fileToBase64(file);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const existing = getCellAudios();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤–æ –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    existing[cellNumber] = base64;
    existing[`cell-${cellNumber}`] = base64;
    existing[`—è—á–µ–π–∫–∞-${cellNumber}`] = base64;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage  
    localStorage.setItem(STORAGE_KEY, JSON.stringify(existing));
    
    console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 3 —Ñ–æ—Ä–º–∞—Ç–∞—Ö`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å —è—á–µ–π–∫–∞–º–∏
export const saveCellFolder = async (files: File[]): Promise<number> => {
  let savedCount = 0;
  
  for (const file of files) {
    const cellNumber = extractCellNumber(file.name);
    if (cellNumber) {
      const success = await saveCellAudio(cellNumber, file);
      if (success) savedCount++;
    }
  }
  
  console.log(`üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫ –∏–∑ ${files.length}`);
  return savedCount;
};

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏
export const playCellAudio = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üîä –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —è—á–µ–π–∫—É: ${cellNumber}`);
    
    const files = getCellAudios();
    
    // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    const keys = [cellNumber, `cell-${cellNumber}`, `—è—á–µ–π–∫–∞-${cellNumber}`];
    
    for (const key of keys) {
      if (files[key]) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª—é—á: ${key}`);
        
        const audio = new Audio(files[key]);
        audio.volume = 0.8;
        
        await audio.play();
        console.log(`üéµ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => audio.pause(), 3000);
        
        return true;
      }
    }
    
    console.warn(`‚ùå –Ø—á–µ–π–∫–∞ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return false;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫
export const getCellAudios = (): Record<string, string> => {
  try {
    const data = localStorage.getItem(STORAGE_KEY);
    return data ? JSON.parse(data) : {};
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫:', error);
    return {};
  }
};

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
export const diagnoseCellSystem = (): void => {
  console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–°–¢–û–ô –°–ò–°–¢–ï–ú–´ ===');
  
  const files = getCellAudios();
  const keys = Object.keys(files);
  const cellKeys = keys.filter(k => /^\d+$/.test(k) || k.includes('cell-') || k.includes('—è—á–µ–π–∫–∞'));
  
  console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${keys.length}`);
  console.log(`üè† –§–∞–π–ª–æ–≤ —è—á–µ–µ–∫: ${cellKeys.length}`);
  console.log(`üìã –ö–ª—é—á–∏ —è—á–µ–µ–∫:`, cellKeys);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
  let validFiles = 0;
  cellKeys.forEach(key => {
    const url = files[key];
    if (url && url.startsWith('data:audio/')) {
      validFiles++;
    }
  });
  
  console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validFiles}/${cellKeys.length}`);
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

const extractCellNumber = (filename: string): string | null => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const match = filename.match(/(\d+)/);
  return match ? match[1] : null;
};