/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ 15+ –∫–ª—é—á–µ–π localStorage –æ–¥–Ω–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
 */

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
const AUDIO_STORAGE_KEY = 'wb-audio-files-unified';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
interface AudioFile {
  url: string;
  name: string;
  size: number;
  uploadDate: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
interface AudioStorage {
  cells: Record<string, AudioFile>;
  delivery: Record<string, AudioFile>;
  acceptance: Record<string, AudioFile>;
  returns: Record<string, AudioFile>;
  version: string;
  lastModified: string;
}

class SimpleAudioManager {
  private static instance: SimpleAudioManager;
  private audioCache: Map<string, HTMLAudioElement> = new Map();

  static getInstance(): SimpleAudioManager {
    if (!SimpleAudioManager.instance) {
      SimpleAudioManager.instance = new SimpleAudioManager();
    }
    return SimpleAudioManager.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –∏–∑ localStorage
   */
  private getStorage(): AudioStorage {
    try {
      const data = localStorage.getItem(AUDIO_STORAGE_KEY);
      if (!data) {
        return this.createEmptyStorage();
      }
      
      const parsed = JSON.parse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!parsed.cells || !parsed.version) {
        console.log('üîÑ –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
        return this.createEmptyStorage();
      }
      
      return parsed;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error);
      return this.createEmptyStorage();
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  private createEmptyStorage(): AudioStorage {
    return {
      cells: {},
      delivery: {},
      acceptance: {},
      returns: {},
      version: '1.0',
      lastModified: new Date().toISOString()
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ localStorage
   */
  private saveStorage(storage: AudioStorage): boolean {
    try {
      storage.lastModified = new Date().toISOString();
      const data = JSON.stringify(storage);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç ~5MB –¥–ª—è localStorage)
      const sizeInMB = new Blob([data]).size / (1024 * 1024);
      if (sizeInMB > 4.5) {
        console.warn(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö ${sizeInMB.toFixed(2)}MB –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É localStorage`);
      }
      
      localStorage.setItem(AUDIO_STORAGE_KEY, data);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (${sizeInMB.toFixed(2)}MB)`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
      if (error.name === 'QuotaExceededError') {
        console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑-–∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è...');
        this.clearOldFiles();
        return this.saveStorage(storage); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      }
      
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
   */
  private clearOldFiles(): void {
    try {
      const storage = this.getStorage();
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - 30);
      
      let cleanedCount = 0;
      
      ['cells', 'delivery', 'acceptance', 'returns'].forEach(category => {
        const files = storage[category as keyof typeof storage] as Record<string, AudioFile>;
        Object.keys(files).forEach(key => {
          const file = files[key];
          if (new Date(file.uploadDate) < cutoffDate) {
            delete files[key];
            cleanedCount++;
          }
        });
      });
      
      if (cleanedCount > 0) {
        this.saveStorage(storage);
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏
   */
  async saveCellAudio(cellNumber: string, file: File): Promise<boolean> {
    try {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, file.name);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Data URL
      const dataUrl = await this.fileToDataUrl(file);
      
      const storage = this.getStorage();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      storage.cells[cellNumber] = {
        url: dataUrl,
        name: file.name,
        size: file.size,
        uploadDate: new Date().toISOString()
      };
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cell- –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      storage.cells[`cell-${cellNumber}`] = storage.cells[cellNumber];
      
      const success = this.saveStorage(storage);
      
      if (success) {
        console.log(`‚úÖ –ê—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏
        this.audioCache.delete(cellNumber);
        this.audioCache.delete(`cell-${cellNumber}`);
      }
      
      return success;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ Data URL
   */
  private fileToDataUrl(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
      const validTypes = ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a', 'audio/aac'];
      const isValidType = validTypes.some(type => file.type === type || file.name.toLowerCase().includes(type.split('/')[1]));
      
      if (!isValidType) {
        console.warn(`‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.type} (${file.name})`);
        // –ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–º–∞–∫—Å–∏–º—É–º 10MB)
      const maxSize = 10 * 1024 * 1024;
      if (file.size > maxSize) {
        reject(new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º ${maxSize})`));
        return;
      }
      
      console.log(`üìÅ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª: ${file.name} (${file.type}, ${Math.round(file.size/1024)}KB)`);
      
      const reader = new FileReader();
      
      reader.onload = () => {
        const result = reader.result as string;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Data URL –≤–∞–ª–∏–¥–Ω—ã–π
        if (!result || !result.startsWith('data:')) {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Data URL'));
          return;
        }
        
        console.log(`‚úÖ Data URL —Å–æ–∑–¥–∞–Ω: ${result.substring(0, 50)}... (${result.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∞—É–¥–∏–æ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        const testAudio = new Audio();
        
        const testPromise = new Promise<void>((testResolve, testReject) => {
          const timeout = setTimeout(() => {
            testReject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ'));
          }, 5000);
          
          testAudio.addEventListener('canplaythrough', () => {
            clearTimeout(timeout);
            console.log(`‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π –∏ –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é`);
            testResolve();
          }, { once: true });
          
          testAudio.addEventListener('error', () => {
            clearTimeout(timeout);
            testReject(new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç'));
          }, { once: true });
          
          testAudio.src = result;
        });
        
        testPromise
          .then(() => resolve(result))
          .catch(testError => {
            console.error(`‚ùå –¢–µ—Å—Ç –∞—É–¥–∏–æ –ø—Ä–æ–≤–∞–ª–µ–Ω:`, testError);
            // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            resolve(result);
          });
      };
      
      reader.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      };
      
      reader.readAsDataURL(file);
    });
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ (discount, check-product –∏ —Ç.–¥.)
   */
  async playSystemAudio(soundKey: string): Promise<boolean> {
    try {
      const storage = this.getStorage();
      
      // –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–≤—É–∫–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
      const soundMappings: Record<string, string[]> = {
        'discount': [
          '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
          'delivery-–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
          '—Å–∫–∏–¥–∫–∞',
          '–∫–æ—à–µ–ª–µ–∫',
          'check-discount-wallet'
        ],
        'check-product': [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
          'delivery-–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
          '–∫–∞–º–µ—Ä–∞',
          '—Ç–æ–≤–∞—Ä',
          'check-product-camera'
        ]
      };
      
      const possibleKeys = soundMappings[soundKey] || [soundKey];
      
      // –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const allFiles = {
        ...storage.cells,
        ...storage.delivery,
        ...storage.acceptance,
        ...storage.returns
      };
      
      for (const key of possibleKeys) {
        if (allFiles[key]) {
          try {
            const audio = new Audio(allFiles[key].url);
            audio.volume = 0.8;
            await audio.play();
            console.log(`‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${soundKey} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∫–∞–∫ ${key}`);
            return true;
          } catch (error) {
            console.warn(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${key}:`, error);
            continue;
          }
        }
      }
      
      console.warn(`‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${soundKey} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ ${soundKey}:`, error);
      return false;
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ —è—á–µ–π–∫–∏
   */
  async playCellAudio(cellNumber: string): Promise<boolean> {
    try {
      const storage = this.getStorage();
      
      // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∫–ª—é—á–∞
      const possibleKeys = [
        cellNumber,
        `cell-${cellNumber}`,
        cellNumber.toString()
      ];
      
      let audioFile: AudioFile | null = null;
      let foundKey = '';
      
      for (const key of possibleKeys) {
        if (storage.cells[key]) {
          audioFile = storage.cells[key];
          foundKey = key;
          break;
        }
      }
      
      if (!audioFile) {
        console.warn(`‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
      }
      
      // –ü—Ä–æ—Å—Ç–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        const audio = new Audio(audioFile.url);
        audio.volume = 0.8;
        await audio.play();
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è`);
      } catch (playError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, playError);
        return false;
      }
      
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å –∞—É–¥–∏–æ
   */
  getCellsWithAudio(): string[] {
    const storage = this.getStorage();
    const cellNumbers: Set<string> = new Set();
    
    Object.keys(storage.cells).forEach(key => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∫–ª—é—á–∞
      if (key.startsWith('cell-')) {
        cellNumbers.add(key.replace('cell-', ''));
      } else if (/^\d+$/.test(key)) {
        cellNumbers.add(key);
      }
    });
    
    return Array.from(cellNumbers).sort((a, b) => parseInt(a) - parseInt(b));
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ —è—á–µ–π–∫–∏
   */
  removeCellAudio(cellNumber: string): boolean {
    try {
      const storage = this.getStorage();
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
      const keysToRemove = [cellNumber, `cell-${cellNumber}`, cellNumber.toString()];
      let removed = false;
      
      keysToRemove.forEach(key => {
        if (storage.cells[key]) {
          delete storage.cells[key];
          this.audioCache.delete(key);
          removed = true;
        }
      });
      
      if (removed) {
        this.saveStorage(storage);
        console.log(`‚úÖ –ê—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber} —É–¥–∞–ª–µ–Ω–æ`);
      }
      
      return removed;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  getStorageInfo(): { totalFiles: number; totalSize: string; cellsCount: number } {
    const storage = this.getStorage();
    let totalSize = 0;
    let totalFiles = 0;
    
    ['cells', 'delivery', 'acceptance', 'returns'].forEach(category => {
      const files = storage[category as keyof typeof storage] as Record<string, AudioFile>;
      Object.values(files).forEach(file => {
        totalSize += file.size;
        totalFiles++;
      });
    });
    
    const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2);
    const cellsCount = Object.keys(storage.cells).length;
    
    return {
      totalFiles,
      totalSize: `${sizeInMB} MB`,
      cellsCount
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
   */
  clearAllAudio(): boolean {
    try {
      localStorage.removeItem(AUDIO_STORAGE_KEY);
      this.audioCache.clear();
      console.log('‚úÖ –í—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:', error);
      return false;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  migrateFromOldSystem(): boolean {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã...');
      
      const storage = this.getStorage();
      let migratedCount = 0;
      
      // –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
      const oldKeys = [
        'wb-audio-files',
        'wb-audio-files-backup', 
        'wb-audio-files-cells-backup',
        'wb-pvz-cell-audio-settings-permanent',
        'customAudioFiles',
        'audioFiles',
        'cellAudios'
      ];
      
      oldKeys.forEach(oldKey => {
        try {
          const oldData = localStorage.getItem(oldKey);
          if (oldData) {
            const parsed = JSON.parse(oldData);
            console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ ${oldKey}: –Ω–∞–π–¥–µ–Ω–æ ${Object.keys(parsed).length} —Ñ–∞–π–ª–æ–≤`);
            
            Object.keys(parsed).forEach(key => {
              const fileUrl = parsed[key];
              
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –±–∏—Ç—ã–π
              if (!fileUrl || typeof fileUrl !== 'string') return;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –∫–ª—é—á—É
              if (key.includes('cell-') || /^\d+$/.test(key) || key.includes('—è—á–µ–π–∫–∞')) {
                // –≠—Ç–æ —Ñ–∞–π–ª —è—á–µ–π–∫–∏
                let cellNumber = key.replace('cell-', '').replace('—è—á–µ–π–∫–∞-', '');
                
                if (!storage.cells[cellNumber] && fileUrl.startsWith('data:audio/')) {
                  storage.cells[cellNumber] = {
                    url: fileUrl,
                    name: `cell-${cellNumber}.mp3`,
                    size: 0,
                    uploadDate: new Date().toISOString()
                  };
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                  storage.cells[`cell-${cellNumber}`] = storage.cells[cellNumber];
                  migratedCount++;
                  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —è—á–µ–π–∫–∞ ${cellNumber}`);
                }
              } else if (key.includes('—Å–∫–∏–¥–∫') || key.includes('–∫–æ—à–µ–ª–µ–∫') || key.includes('discount')) {
                // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ delivery
                if (!storage.delivery[key] && fileUrl.startsWith('data:audio/')) {
                  storage.delivery[key] = {
                    url: fileUrl,
                    name: key,
                    size: 0,
                    uploadDate: new Date().toISOString()
                  };
                  migratedCount++;
                  console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${key}`);
                }
              }
            });
          }
        } catch (e) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å ${oldKey}:`, e);
        }
      });
      
      if (migratedCount > 0) {
        this.saveStorage(storage);
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedCount} —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã`);
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const audioManager = SimpleAudioManager.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const saveCellAudio = (cellNumber: string, file: File) => audioManager.saveCellAudio(cellNumber, file);
export const playCellAudio = (cellNumber: string) => audioManager.playCellAudio(cellNumber);
export const getCellsWithAudio = () => audioManager.getCellsWithAudio();
export const removeCellAudio = (cellNumber: string) => audioManager.removeCellAudio(cellNumber);
export const getStorageInfo = () => audioManager.getStorageInfo();
export const clearAllAudio = () => audioManager.clearAllAudio();
export const migrateFromOldSystem = () => audioManager.migrateFromOldSystem();