/**
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–∑–≤—É—á–∫–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–≤—É–∫–æ–≤
 */

import { voiceAssistantManager } from './voiceAssistantManager';

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ QR-–∫–æ–¥–∞
 */
export const playErrorSound = async (): Promise<boolean> => {
  console.log('üö® –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏');
  return voiceAssistantManager.playNewAssistantSound('error_sound');
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏
 */
export const playCellNumber = async (cellNumber: string): Promise<boolean> => {
  console.log(`üè† –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏: ${cellNumber}`);
  return voiceAssistantManager.playCellAudio(cellNumber);
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
 */
export const playGoodsCount = async (count: number): Promise<boolean> => {
  console.log(`üì¶ –û–∑–≤—É—á–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ${count}`);
  
  // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏
  if (voiceAssistantManager.getCurrentAssistant() === 'new') {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–≤—É–∫ –¥–ª—è —á–∏—Å–ª–∞
    const success = await voiceAssistantManager.playNewAssistantSound('goods_count', { count });
    if (success) return true;
  }
  
  // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  return playTextToSpeech(count.toString());
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ç–æ–≤–∞—Ä"
 */
export const playGoodsWord = async (count: number): Promise<boolean> => {
  console.log(`üìù –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞ "—Ç–æ–≤–∞—Ä" –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ${count}`);
  
  // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏
  if (voiceAssistantManager.getCurrentAssistant() === 'new') {
    const success = await voiceAssistantManager.playNewAssistantSound('goods_word', { count });
    if (success) return true;
  }
  
  // Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º
  const word = getGoodsWordDeclension(count);
  return playTextToSpeech(word);
};

/**
 * –ü–æ–ª–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
 */
export const playGoodsInfo = async (count: number): Promise<boolean> => {
  console.log(`üìä –ü–æ–ª–Ω–∞—è –æ–∑–≤—É—á–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${count}`);
  
  try {
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countSuccess = await playGoodsCount(count);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å–ª–æ–≤–æ
    const wordSuccess = await playGoodsWord(count);
    
    return countSuccess && wordSuccess;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö:', error);
    return false;
  }
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
 */
export const playPaymentOnDelivery = async (): Promise<boolean> => {
  console.log('üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏');
  
  if (voiceAssistantManager.getCurrentAssistant() === 'new') {
    const success = await voiceAssistantManager.playNewAssistantSound('payment_on_delivery');
    if (success) return true;
  }
  
  // Fallback
  return playTextToSpeech('–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏');
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π
 */
export const playCheckGoodUnderCamera = async (): Promise<boolean> => {
  console.log('üì∑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
  
  if (voiceAssistantManager.getCurrentAssistant() === 'new') {
    const success = await voiceAssistantManager.playNewAssistantSound('please_check_good_under_camera');
    if (success) return true;
  }
  
  // Fallback
  return playTextToSpeech('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
};

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å—å–±—ã –æ—Ü–µ–Ω–∏—Ç—å PickPoint
 */
export const playThanksAndRate = async (): Promise<boolean> => {
  console.log('‚≠ê –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—å–±–∞ –æ—Ü–µ–Ω–∏—Ç—å PickPoint');
  
  if (voiceAssistantManager.getCurrentAssistant() === 'new') {
    const success = await voiceAssistantManager.playNewAssistantSound('thanks_for_order_rate_pickpoint');
    if (success) return true;
  }
  
  // Fallback
  return playTextToSpeech('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É PickPoint');
};

/**
 * –ü–æ–ª–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞
 */
export const playFullDeliveryScenario = async (cellNumber: string, goodsCount: number, hasPaymentOnDelivery: boolean): Promise<boolean> => {
  console.log(`üé¨ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–¥–∞—á–∏: —è—á–µ–π–∫–∞ ${cellNumber}, —Ç–æ–≤–∞—Ä–æ–≤ ${goodsCount}, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: ${hasPaymentOnDelivery}`);
  
  try {
    // 1. –û–∑–≤—É—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É
    await playCellNumber(cellNumber);
    await pause(500);
    
    // 2. –û–∑–≤—É—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    await playGoodsInfo(goodsCount);
    await pause(300);
    
    // 3. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    if (hasPaymentOnDelivery) {
      await playPaymentOnDelivery();
      await pause(300);
    }
    
    // 4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä
    await playCheckGoodUnderCamera();
    await pause(1000);
    
    // 5. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    await playThanksAndRate();
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
    return false;
  }
};

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ç–æ–≤–∞—Ä"
 */
function getGoodsWordDeclension(count: number): string {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 14) {
    return '—Ç–æ–≤–∞—Ä–æ–≤';
  }
  
  if (lastDigit === 1) {
    return '—Ç–æ–≤–∞—Ä';
  } else if (lastDigit >= 2 && lastDigit <= 4) {
    return '—Ç–æ–≤–∞—Ä–∞';
  } else {
    return '—Ç–æ–≤–∞—Ä–æ–≤';
  }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (fallback)
 */
async function playTextToSpeech(text: string): Promise<boolean> {
  return new Promise((resolve) => {
    try {
      if ('speechSynthesis' in window) {
        window.speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        utterance.rate = 0.9;
        utterance.pitch = 1;
        
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isAndroid = /Android/.test(navigator.userAgent);
        
        if (isIOS || isAndroid) {
          utterance.volume = 1;
          utterance.rate = 1.0;
        }
        
        utterance.onend = () => {
          console.log('‚úÖ –û–∑–≤—É—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          resolve(true);
        };
        
        utterance.onerror = (event) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:', event);
          resolve(false);
        };
        
        if (isIOS) {
          setTimeout(() => {
            window.speechSynthesis.speak(utterance);
          }, 100);
        } else {
          window.speechSynthesis.speak(utterance);
        }
      } else {
        console.warn('‚ö†Ô∏è –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        resolve(false);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
      resolve(false);
    }
  });
}

/**
 * –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏
 */
function pause(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –ø–æ–º–æ—â–Ω–∏–∫–µ
 */
export const getCurrentVoiceAssistant = () => {
  return {
    id: voiceAssistantManager.getCurrentAssistant(),
    info: voiceAssistantManager.getAssistantInfo(voiceAssistantManager.getCurrentAssistant()),
    loadedSounds: voiceAssistantManager.getLoadedSounds(),
    storageInfo: voiceAssistantManager.getStorageInfo()
  };
};