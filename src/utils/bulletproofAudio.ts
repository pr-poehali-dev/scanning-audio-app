/**
 * üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò
 * –†–∞–±–æ—Ç–∞–µ—Ç –í–°–ï–ì–î–ê, –ø—Ä–∏ –ª—é–±—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö
 */

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∫–ª—é—á —Ö—Ä–∞–Ω–µ–Ω–∏—è
const BULLETPROOF_KEY = 'bulletproof-audio-system';

interface AudioRecord {
  url: string;
  name: string;
  lastUsed: string;
}

class BulletproofAudio {
  private static instance: BulletproofAudio;
  private audioCache: Map<string, HTMLAudioElement> = new Map();

  static getInstance(): BulletproofAudio {
    if (!BulletproofAudio.instance) {
      BulletproofAudio.instance = new BulletproofAudio();
    }
    return BulletproofAudio.instance;
  }

  /**
   * üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  constructor() {
    this.loadAllAudioFiles();
  }

  /**
   * üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –∏–∑ localStorage
   */
  private loadAllAudioFiles(): Record<string, string> {
    console.log('üõ°Ô∏è === –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –ê–£–î–ò–û ===');
    
    const allFiles: Record<string, string> = {};
    
    // –°–ü–ò–°–û–ö –í–°–ï–• –í–û–ó–ú–û–ñ–ù–´–• –ö–õ–Æ–ß–ï–ô
    const storageKeys = [
      'wb-pvz-cell-audio-settings-permanent',
      'wb-audio-files',
      'wb-audio-files-backup', 
      'wb-audio-files-cells-backup',
      'wb-unified-audio-system',
      'customAudioFiles',
      'audioFiles',
      'cellAudios',
      // –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –í–ê–†–ò–ê–ù–¢–´ –û–ó–í–£–ß–ö–ò
      'wb-pvz-variant-variant1-audio-base64',
      'wb-pvz-variant-variant2-audio-base64',
      BULLETPROOF_KEY
    ];

    let totalLoaded = 0;

    storageKeys.forEach(key => {
      try {
        const data = localStorage.getItem(key);
        if (data) {
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á: ${key}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
          const parsed = JSON.parse(data);
          
          if (key === 'wb-unified-audio-system' && parsed.files) {
            // –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã
            Object.values(parsed.files).forEach((file: any) => {
              if (file.url && file.url.startsWith('data:audio/')) {
                allFiles[file.cellNumber || file.name] = file.url;
                // –î—É–±–ª–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                if (file.cellNumber) {
                  allFiles[file.cellNumber] = file.url;
                  allFiles[`cell-${file.cellNumber}`] = file.url;
                  allFiles[`—è—á–µ–π–∫–∞-${file.cellNumber}`] = file.url;
                }
                totalLoaded++;
              }
            });
          } else if (typeof parsed === 'object') {
            // –û–±—ã—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            Object.entries(parsed).forEach(([fileKey, fileUrl]) => {
              if (typeof fileUrl === 'string' && 
                  (fileUrl.startsWith('data:audio/') || fileUrl.startsWith('blob:'))) {
                allFiles[fileKey] = fileUrl;
                
                // –ï—Å–ª–∏ —ç—Ç–æ —è—á–µ–π–∫–∞ - —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
                const cellMatch = fileKey.match(/(\d+)/);
                if (cellMatch) {
                  const cellNumber = cellMatch[1];
                  allFiles[cellNumber] = fileUrl;
                  allFiles[`cell-${cellNumber}`] = fileUrl;
                  allFiles[`—è—á–µ–π–∫–∞-${cellNumber}`] = fileUrl;
                }
                
                totalLoaded++;
              }
            });
          }
          
          console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ ${key}: ${Object.keys(parsed).length} —Ñ–∞–π–ª–æ–≤`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ ${key}:`, error);
      }
    });

    console.log(`üõ°Ô∏è –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û: ${totalLoaded} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
    console.log(`üõ°Ô∏è –í–°–ï–ì–û –ö–õ–Æ–ß–ï–ô –í –ü–ê–ú–Ø–¢–ò: ${Object.keys(allFiles).length}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this.saveToStorage(allFiles);

    return allFiles;
  }

  /**
   * üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  private saveToStorage(files: Record<string, string>): void {
    try {
      const bulletproofData = {
        files: files,
        lastUpdate: new Date().toISOString(),
        version: 'bulletproof-1.0'
      };
      
      localStorage.setItem(BULLETPROOF_KEY, JSON.stringify(bulletproofData));
      
      // –î–£–ë–õ–ò–†–£–ï–ú –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      localStorage.setItem('wb-audio-files', JSON.stringify(files));
      localStorage.setItem('wb-pvz-cell-audio-settings-permanent', JSON.stringify(files));
      
      console.log('üõ°Ô∏è –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
    }
  }

  /**
   * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
   */
  async playAudio(key: string): Promise<boolean> {
    console.log(`üõ°Ô∏è === –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï: ${key} ===`);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const allFiles = this.loadAllAudioFiles();

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    const possibleKeys = [
      key,
      key.toString(),
      `cell-${key}`,
      `—è—á–µ–π–∫–∞-${key}`,
      key.toLowerCase(),
      key.toUpperCase()
    ];

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–≤—É–∫–æ–≤
    if (key === 'discount') {
      possibleKeys.push(
        '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
        '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
        '—Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–± –∫–æ—à–µ–ª–µ–∫',
        '—Å–∫–∏–¥–∫–∞',
        '–∫–æ—à–µ–ª–µ–∫',
        '–ø–∏–∫ —Ü–∏—Ñ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤' // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      );
    }

    if (key === 'check-product' || key === 'check-product-camera') {
      possibleKeys.push(
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
        '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
        '–∫–∞–º–µ—Ä–∞',
        '—Ç–æ–≤–∞—Ä'
      );
    }

    if (key === 'rate-pvz') {
      possibleKeys.push(
        '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        '—Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –æ—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
        '–æ—Ü–µ–Ω–∏—Ç–µ',
        '–ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
        '–æ—Ç–∑—ã–≤'
      );
    }

    // –ù–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if (key === 'cash-on-delivery') {
      possibleKeys.push(
        '–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
        '–Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
        '–æ–ø–ª–∞—Ç–∞'
      );
    }

    // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –∫–ª—é—á–∞–º
    let audioUrl: string | null = null;
    let foundKey = '';

    for (const searchKey of possibleKeys) {
      if (allFiles[searchKey]) {
        audioUrl = allFiles[searchKey];
        foundKey = searchKey;
        break;
      }
    }

    if (!audioUrl) {
      console.error(`‚ùå –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê: –ê—É–¥–∏–æ "${key}" –ù–ï –ù–ê–ô–î–ï–ù–û`);
      console.log(`üîç –ò—Å–∫–∞–ª–∏ –ø–æ –∫–ª—é—á–∞–º:`, possibleKeys);
      console.log(`üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:`, Object.keys(allFiles).slice(0, 20));
      return false;
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Audio —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const audio = new Audio();
      audio.src = audioUrl;
      audio.volume = 0.8;
      
      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'));
        }, 5000);

        audio.addEventListener('ended', () => {
          clearTimeout(timeout);
          resolve();
        });

        audio.addEventListener('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });

        audio.play().catch(reject);
      });

      console.log(`‚úÖ –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–û: "${key}" –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ (–∫–ª—é—á: ${foundKey})`);
      return true;

    } catch (error) {
      console.error(`‚ùå –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê: –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è "${key}":`, error);
      return false;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats(): { totalFiles: number; cellFiles: number; systemFiles: number } {
    const allFiles = this.loadAllAudioFiles();
    const keys = Object.keys(allFiles);
    
    const cellFiles = keys.filter(key => 
      /^\d+$/.test(key) || key.includes('cell-') || key.includes('—è—á–µ–π–∫–∞-')
    ).length;
    
    const systemFiles = keys.filter(key =>
      key.includes('—Å–∫–∏–¥–∫') || key.includes('–∫–æ—à–µ–ª–µ–∫') || key.includes('–∫–∞–º–µ—Ä') || 
      key.includes('—Ç–æ–≤–∞—Ä') || key.includes('discount') || key.includes('check')
    ).length;

    return {
      totalFiles: keys.length,
      cellFiles: Math.floor(cellFiles / 3), // –î–µ–ª–∏–º –Ω–∞ 3 —Ç.–∫. –∫–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ –≤ 3 —Ñ–æ—Ä–º–∞—Ç–∞—Ö
      systemFiles
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const bulletproofAudio = BulletproofAudio.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const playAudio = (key: string) => bulletproofAudio.playAudio(key);
export const playCellAudio = (cellNumber: string) => bulletproofAudio.playAudio(cellNumber);
export const playSystemAudio = (soundKey: string) => bulletproofAudio.playAudio(soundKey);
export const getAudioStats = () => bulletproofAudio.getStats();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
console.log('üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê');