/**
 * üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò
 * –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø –ü–ê–ú–Ø–¢–ò
 */

class BulletproofAudio {
  private static instance: BulletproofAudio;
  private audioCache: Map<string, HTMLAudioElement> = new Map();
  private maxCacheSize = 3; // –ú–ê–ö–°–ò–ú–£–ú 3 –∞—É–¥–∏–æ –≤ –ø–∞–º—è—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  private currentActiveVariant: string | null = null;

  static getInstance(): BulletproofAudio {
    if (!BulletproofAudio.instance) {
      BulletproofAudio.instance = new BulletproofAudio();
    }
    return BulletproofAudio.instance;
  }

  constructor() {
    this.currentActiveVariant = localStorage.getItem('wb-active-voice-variant');
    console.log('üõ°Ô∏è –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –£–õ–¨–¢–†–ê-–≠–ö–û–ù–û–ú–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
   */
  private findAudioUrl(cellKey: string): string | null {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if (this.currentActiveVariant) {
      const activeStorageKey = `wb-voice-${this.currentActiveVariant}-permanent`;
      try {
        const data = localStorage.getItem(activeStorageKey);
        if (data) {
          const parsed = JSON.parse(data);
          
          // –ò—â–µ–º —Ñ–∞–π–ª –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–∞–º
          const searchKeys = [
            cellKey,
            cellKey.toString(),
            `cell-${cellKey}`,
            `—è—á–µ–π–∫–∞-${cellKey}`
          ];
          
          for (const key of searchKeys) {
            if (parsed[key] && typeof parsed[key] === 'string' && parsed[key].startsWith('data:audio/')) {
              console.log(`üéØ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ ${this.currentActiveVariant}: ${key}`);
              return parsed[key];
            }
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ:`, error);
      }
    }

    // Fallback –ø–æ–∏—Å–∫ –≤ —Å—Ç–∞—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö (–¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–µ 2 –∫–ª—é—á–∞)
    const fallbackKeys = [
      'wb-pvz-cell-audio-settings-permanent',
      'wb-unified-audio-system'
    ];

    for (const storageKey of fallbackKeys) {
      try {
        const data = localStorage.getItem(storageKey);
        if (!data) continue;
        
        const parsed = JSON.parse(data);
        if (typeof parsed === 'object' && parsed !== null) {
          
          if (storageKey === 'wb-unified-audio-system' && parsed.files) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
            const files = Object.values(parsed.files).slice(0, 3);
            for (const file of files) {
              const fileObj = file as any;
              if (fileObj.cellNumber == cellKey && fileObj.url && fileObj.url.startsWith('data:audio/')) {
                console.log(`üîç Fallback –∏–∑ ${storageKey}: —Ñ–∞–π–ª ${cellKey}`);
                return fileObj.url;
              }
            }
          } else {
            // –û–±—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –∫–ª—é—á
            if (parsed[cellKey] && typeof parsed[cellKey] === 'string' && parsed[cellKey].startsWith('data:audio/')) {
              console.log(`üîç Fallback –∏–∑ ${storageKey}: —Ñ–∞–π–ª ${cellKey}`);
              return parsed[cellKey];
            }
          }
        }
      } catch (error) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    console.warn(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cellKey}`);
    return null;
  }

  /**
   * üíæ –õ–ï–ù–ò–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –≤ –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏)
   */
  private loadAudioToMemory(cellKey: string, audioUrl: string): HTMLAudioElement | null {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.audioCache.has(cellKey)) {
      console.log(`üíø –ò–∑ –∫—ç—à–∞: ${cellKey}`);
      return this.audioCache.get(cellKey)!;
    }

    try {
      // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
      if (this.audioCache.size >= this.maxCacheSize) {
        // –£–¥–∞–ª—è–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        const entries = Array.from(this.audioCache.entries());
        for (let i = 0; i < entries.length - 1; i++) {
          const [key, audio] = entries[i];
          audio.pause();
          audio.src = '';
          this.audioCache.delete(key);
        }
        console.log(`üóëÔ∏è –ö—ç—à –û–ß–ò–©–ï–ù: –æ—Å—Ç–∞–≤–ª–µ–Ω 1 —Ñ–∞–π–ª –∏–∑ ${entries.length}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      const audio = new Audio();
      audio.preload = 'none'; // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ
      audio.src = audioUrl;
      this.audioCache.set(cellKey, audio);
      
      console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω –≤ –∫—ç—à: ${cellKey} (—Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${this.audioCache.size})`);
      return audio;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Audio –¥–ª—è ${cellKey}:`, error);
      return null;
    }
  }

  /**
   * üîä –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  async playAudio(cellKey: string): Promise<boolean> {
    console.log(`üéµ –ó–∞–ø—Ä–æ—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${cellKey}`);

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–∞–π–ª –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
    const audioUrl = this.findAudioUrl(cellKey);
    if (!audioUrl) return false;

    // –¢–æ–ª—å–∫–æ –¢–ï–ü–ï–†–¨ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
    const audio = this.loadAudioToMemory(cellKey, audioUrl);
    if (!audio) return false;

    try {
      audio.currentTime = 0;
      await audio.play();
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: ${cellKey}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${cellKey}:`, error);
      return false;
    }
  }

  /**
   * üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  activateVariant(variant: string): boolean {
    try {
      this.currentActiveVariant = variant;
      localStorage.setItem('wb-active-voice-variant', variant);
      
      // –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      this.clearCache();
      
      console.log(`üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: ${variant}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error);
      return false;
    }
  }

  /**
   * üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats(): Record<string, any> {
    return {
      cachedAudio: this.audioCache.size,
      maxCacheSize: this.maxCacheSize,
      activeVariant: this.currentActiveVariant || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    };
  }

  /**
   * üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.audioCache.forEach((audio, key) => {
      audio.pause();
      audio.src = '';
    });
    this.audioCache.clear();
    console.log('üßπ –ö—ç—à –∞—É–¥–∏–æ –ü–û–õ–ù–û–°–¢–¨–Æ –æ—á–∏—â–µ–Ω');
  }
}

// –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
const bulletproofAudio = BulletproofAudio.getInstance();

/**
 * üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø
 */
export async function playCellAudio(cellKey: string | number): Promise<boolean> {
  const key = String(cellKey);
  return await bulletproofAudio.playAudio(key);
}

/**
 * üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏
 */
export function activateVoiceVariant(variant: string): boolean {
  return bulletproofAudio.activateVariant(variant);
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
 */
export function getAudioSystemStats(): Record<string, any> {
  return bulletproofAudio.getStats();
}

/**
 * üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
 */
export function clearAudioCache(): void {
  bulletproofAudio.clearCache();
}

/**
 * üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
 */
export function reloadAudioSystem(): void {
  bulletproofAudio.clearCache();
}

/**
 * üìã –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ–∑–≤—É—á–∫–∏
 */
export function getVoiceVariantsInfo(): Record<string, { count: number; exists: boolean; cells: string[] }> {
  const variants = {
    standard: { count: 0, exists: false, cells: [] as string[] },
    alternative: { count: 0, exists: false, cells: [] as string[] }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ localStorage –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  Object.keys(variants).forEach(variant => {
    const storageKey = `wb-voice-${variant}-permanent`;
    try {
      const data = localStorage.getItem(storageKey);
      if (data) {
        const parsed = JSON.parse(data);
        if (typeof parsed === 'object' && parsed !== null) {
          const cells = Object.keys(parsed).filter(key => /^\d+$/.test(key)).sort((a, b) => parseInt(a) - parseInt(b));
          variants[variant as keyof typeof variants] = {
            count: cells.length,
            exists: cells.length > 0,
            cells: cells.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —è—á–µ–µ–∫
          };
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${variant}:`, error);
    }
  });

  return variants;
}

console.log('üõ°Ô∏è –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê!');