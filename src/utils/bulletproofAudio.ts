/**
 * üõ°Ô∏è –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò
 * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ò –ü–ê–ú–Ø–¢–ò
 */

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∫–ª—é—á —Ö—Ä–∞–Ω–µ–Ω–∏—è
const BULLETPROOF_KEY = 'bulletproof-audio-system';

// –ö–ª—é—á–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–∑–≤—É—á–∫–∏
const VOICE_VARIANT_KEYS = {
  variant1: 'wb-voice-variant1-permanent',
  variant2: 'wb-voice-variant2-permanent',
  standard: 'wb-voice-standard-permanent',
  alternative: 'wb-voice-alternative-permanent'
};

interface AudioRecord {
  url: string;
  name: string;
  lastUsed: string;
}

class BulletproofAudio {
  private static instance: BulletproofAudio;
  private audioCache: Map<string, HTMLAudioElement> = new Map();
  private maxCacheSize = 10; // –ú–∞–∫—Å–∏–º—É–º 10 –∞—É–¥–∏–æ –≤ –ø–∞–º—è—Ç–∏
  private loadedFiles: Record<string, string> = {};

  static getInstance(): BulletproofAudio {
    if (!BulletproofAudio.instance) {
      BulletproofAudio.instance = new BulletproofAudio();
    }
    return BulletproofAudio.instance;
  }

  /**
   * üîÑ –õ–ï–ù–ò–í–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ä–∞–∑—É
   */
  constructor() {
    this.loadFileIndex(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–æ–≤
  }

  /**
   * üìÇ –õ–ï–ù–ò–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  private loadFileIndex(): void {
    console.log('üõ°Ô∏è === –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –î–û–°–¢–£–ü–ù–´–• –ê–£–î–ò–û –§–ê–ô–õ–û–í ===');
    
    // –°–ù–ê–ß–ê–õ–ê –∑–∞–≥—Ä—É–∂–∞–µ–º –ê–ö–¢–ò–í–ù–´–ô –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏
    const activeVariant = localStorage.getItem('wb-active-voice-variant');
    console.log(`üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏: ${activeVariant || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    
    if (activeVariant) {
      const activeStorageKey = `wb-voice-${activeVariant}-permanent`;
      try {
        const activeData = localStorage.getItem(activeStorageKey);
        if (activeData) {
          const parsedActive = JSON.parse(activeData);
          console.log(`üî• –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${activeVariant}: ${Object.keys(parsedActive).length} —Ñ–∞–π–ª–æ–≤`);
          
          // –¢–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
          let count = 0;
          Object.entries(parsedActive).forEach(([fileKey, fileUrl]) => {
            if (typeof fileUrl === 'string' && fileUrl.startsWith('data:audio/') && count < 15) {
              this.loadedFiles[fileKey] = fileUrl;
              count++;
              
              // –ï—Å–ª–∏ —ç—Ç–æ —è—á–µ–π–∫–∞ - —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
              const cellMatch = fileKey.match(/(\d+)/);
              if (cellMatch) {
                const cellNumber = cellMatch[1];
                this.loadedFiles[cellNumber] = fileUrl;
                this.loadedFiles[`cell-${cellNumber}`] = fileUrl;
                this.loadedFiles[`—è—á–µ–π–∫–∞-${cellNumber}`] = fileUrl;
              }
            }
          });
          
          console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ${activeVariant} –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: ${count} —Ñ–∞–π–ª–æ–≤`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${activeVariant}:`, error);
      }
    }
    
    // –ë–´–°–¢–†–ê–Ø –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è fallback —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—É—Å—Ç)
    if (Object.keys(this.loadedFiles).length === 0) {
      console.log('üîç –ü–æ–∏—Å–∫ fallback —Ñ–∞–π–ª–æ–≤...');
      
      const storageKeys = [
        'wb-pvz-cell-audio-settings-permanent',
        'wb-audio-files',
        'wb-unified-audio-system',
        'wb-voice-variant1-permanent',
        'wb-voice-variant2-permanent',
        'wb-voice-standard-permanent',
        'wb-voice-alternative-permanent'
      ];
      
      for (const key of storageKeys.slice(0, 3)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–∞
        try {
          const data = localStorage.getItem(key);
          if (!data) continue;
          
          const parsed = JSON.parse(data);
          if (typeof parsed === 'object' && parsed !== null) {
            let count = 0;
            Object.entries(parsed).forEach(([fileKey, fileUrl]) => {
              if (typeof fileUrl === 'string' && fileUrl.startsWith('data:audio/') && count < 5) {
                this.loadedFiles[fileKey] = fileUrl;
                count++;
                
                // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
                const cellMatch = fileKey.match(/(\d+)/);
                if (cellMatch) {
                  const cellNumber = cellMatch[1];
                  this.loadedFiles[cellNumber] = fileUrl;
                }
              }
            });
            
            if (count > 0) {
              console.log(`‚úÖ Fallback –∏–∑ ${key}: ${count} —Ñ–∞–π–ª–æ–≤`);
              break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            }
          }
        } catch (error) {
          // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
      }
    }
    
    const totalFiles = Object.keys(this.loadedFiles).length;
    console.log(`üéØ –ò–¢–û–ì–û –ò–ù–î–ï–ö–°–ò–†–û–í–ê–ù–û: ${totalFiles} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤`);
    
    if (totalFiles === 0) {
      console.warn('‚ö†Ô∏è –ù–ï–¢ –ê–£–î–ò–û –§–ê–ô–õ–û–í! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ localStorage');
    }
  }

  /**
   * üíæ –õ–ï–ù–ò–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –≤ –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ)
   */
  private loadAudioToMemory(cellKey: string): HTMLAudioElement | null {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.audioCache.has(cellKey)) {
      console.log(`üíø –ò–∑ –∫—ç—à–∞: ${cellKey}`);
      return this.audioCache.get(cellKey)!;
    }

    // –ò—â–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å–µ
    const audioUrl = this.loadedFiles[cellKey];
    if (!audioUrl) {
      console.warn(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ: ${cellKey}`);
      return null;
    }

    try {
      // –£–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–æ–º –∫—ç—à–∞
      if (this.audioCache.size >= this.maxCacheSize) {
        // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)
        const firstKey = this.audioCache.keys().next().value;
        this.audioCache.delete(firstKey);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞: ${firstKey}`);
      }

      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      const audio = new Audio(audioUrl);
      audio.preload = 'auto';
      this.audioCache.set(cellKey, audio);
      
      console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω –≤ –∫—ç—à: ${cellKey} (—Ä–∞–∑–º–µ—Ä –∫—ç—à–∞: ${this.audioCache.size})`);
      return audio;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Audio –¥–ª—è ${cellKey}:`, error);
      return null;
    }
  }

  /**
   * üîä –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  async playAudio(cellKey: string): Promise<boolean> {
    console.log(`üéµ –ó–∞–ø—Ä–æ—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${cellKey}`);

    const audio = this.loadAudioToMemory(cellKey);
    if (!audio) return false;

    try {
      audio.currentTime = 0;
      await audio.play();
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: ${cellKey}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${cellKey}:`, error);
      return false;
    }
  }

  /**
   * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  getStats(): Record<string, any> {
    return {
      indexedFiles: Object.keys(this.loadedFiles).length,
      cachedAudio: this.audioCache.size,
      maxCacheSize: this.maxCacheSize,
      activeVariant: localStorage.getItem('wb-active-voice-variant') || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    };
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.audioCache.clear();
    console.log('üßπ –ö—ç—à –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω');
  }

  /**
   * üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
   */
  reloadIndex(): void {
    this.loadedFiles = {};
    this.clearCache();
    this.loadFileIndex();
  }
}

// –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
const bulletproofAudio = BulletproofAudio.getInstance();

/**
 * üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø
 */
export async function playCellAudio(cellKey: string | number): Promise<boolean> {
  const key = String(cellKey);
  return await bulletproofAudio.playAudio(key);
}

/**
 * üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏
 */
export function activateVoiceVariant(variant: string): boolean {
  try {
    localStorage.setItem('wb-active-voice-variant', variant);
    bulletproofAudio.reloadIndex(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å –Ω–æ–≤—ã–º –∞–∫—Ç–∏–≤–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    console.log(`üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: ${variant}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error);
    return false;
  }
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
 */
export function getAudioSystemStats(): Record<string, any> {
  return bulletproofAudio.getStats();
}

/**
 * üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
 */
export function clearAudioCache(): void {
  bulletproofAudio.clearCache();
}

/**
 * üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
 */
export function reloadAudioSystem(): void {
  bulletproofAudio.reloadIndex();
}

console.log('üõ°Ô∏è –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê –∏ –≥–æ—Ç–æ–≤–∞!');