// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ Web Speech API
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Å–≤–æ–∏ —Ñ–∞–π–ª—ã

class DefaultAudioGenerator {
  private textMap: { [key: string]: string } = {
    // –Ø—á–µ–π–∫–∏ 1-150
    ...Object.fromEntries(
      Array.from({ length: 150 }, (_, i) => [`cell_${i + 1}`, `—è—á–µ–π–∫–∞ ${i + 1}`])
    ),
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    ...Object.fromEntries(
      Array.from({ length: 20 }, (_, i) => [`count_${i + 1}`, `${i + 1}`])
    ),
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    'goods': '—Ç–æ–≤–∞—Ä—ã',
    'word_items': '—Ç–æ–≤–∞—Ä–æ–≤',
    'payment_on_delivery': '–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
    'please_check_good_under_camera': '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    'thanks_for_order_rate_pickpoint': '—Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏',
    'box_accepted': '–∫–æ—Ä–æ–± –ø—Ä–∏–Ω—è—Ç',
    'success_sound': '–≥–æ—Ç–æ–≤–æ'
  };

  speak(key: string, rate: number = 1.0): boolean {
    if (!('speechSynthesis' in window)) {
      console.warn('‚ö†Ô∏è Speech Synthesis API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return false;
    }

    const text = this.textMap[key];
    if (!text) {
      console.warn(`‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
      return false;
    }

    try {
      speechSynthesis.cancel();

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = rate;
      utterance.pitch = 1.0;
      utterance.lang = 'ru-RU';

      const voices = speechSynthesis.getVoices();
      const russianVoice = voices.find(voice => voice.lang.startsWith('ru'));
      if (russianVoice) {
        utterance.voice = russianVoice;
      }

      console.log(`üîä TTS –æ–∑–≤—É—á–∫–∞: "${text}"`);
      speechSynthesis.speak(utterance);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ TTS –¥–ª—è ${key}:`, error);
      return false;
    }
  }

  speakSequence(keys: string[], rate: number = 1.0, delayMs: number = 300) {
    if (!('speechSynthesis' in window)) {
      console.warn('‚ö†Ô∏è Speech Synthesis API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    speechSynthesis.cancel();
    let currentIndex = 0;

    const speakNext = () => {
      if (currentIndex >= keys.length) {
        console.log('üèÅ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å TTS –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return;
      }

      const key = keys[currentIndex];
      const text = this.textMap[key];

      if (!text) {
        console.warn(`‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: ${key}`);
        currentIndex++;
        setTimeout(speakNext, delayMs);
        return;
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = rate;
      utterance.pitch = 1.0;
      utterance.lang = 'ru-RU';

      const voices = speechSynthesis.getVoices();
      const russianVoice = voices.find(voice => voice.lang.startsWith('ru'));
      if (russianVoice) {
        utterance.voice = russianVoice;
      }

      utterance.onend = () => {
        console.log(`‚úÖ TTS —á–∞—Å—Ç—å ${currentIndex + 1}/${keys.length} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        currentIndex++;
        setTimeout(speakNext, delayMs);
      };

      utterance.onerror = (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ TTS –¥–ª—è ${key}:`, error);
        currentIndex++;
        setTimeout(speakNext, delayMs);
      };

      console.log(`üîä TTS —á–∞—Å—Ç—å ${currentIndex + 1}/${keys.length}: "${text}"`);
      speechSynthesis.speak(utterance);
    };

    speakNext();
  }

  stop() {
    if ('speechSynthesis' in window) {
      speechSynthesis.cancel();
    }
  }

  isSupported(): boolean {
    return 'speechSynthesis' in window;
  }
}

export const defaultAudioGenerator = new DefaultAudioGenerator();