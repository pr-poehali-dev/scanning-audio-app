import { audioManager } from './simpleAudioManager';
import { voiceAssistantManager } from './voiceAssistantManager';

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –º–µ–∂–¥—É —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º
 */
export const playCellAudio = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏: ${cellNumber}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
    const success = await voiceAssistantManager.playCellAudio(cellNumber);
    
    if (success) {
      console.log(`‚úÖ –ê—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${voiceAssistantManager.getCurrentAssistant()} –ø–æ–º–æ—â–Ω–∏–∫–∞`);
    } else {
      console.warn(`‚ùå –ê—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ ${voiceAssistantManager.getCurrentAssistant()} –ø–æ–º–æ—â–Ω–∏–∫–∞`);
      
      // –î–ª—è fallback –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
      if (voiceAssistantManager.getCurrentAssistant() === 'old') {
        // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ audioManager
        const availableCells = audioManager.getCellsWithAudio();
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ (${availableCells.length}):`, availableCells.slice(0, 10));
      } else {
        // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏
        const loadedSounds = voiceAssistantManager.getLoadedSounds();
        console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (${loadedSounds.length}):`, loadedSounds);
      }
    }
    
    return success;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ "${cellNumber}":`, error);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏
 */
export const hasCellAudio = (cellNumber: string): boolean => {
  try {
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const hasFiles = audioManager.getCellsWithAudio().length > 0;
    if (!hasFiles) {
      audioManager.migrateFromOldSystem();
    }
    
    const availableCells = audioManager.getCellsWithAudio();
    return availableCells.includes(cellNumber) || availableCells.includes(cellNumber.toUpperCase());
  } catch (error) {
    console.error(`‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
 */
export const getAudioEnabledCells = (): string[] => {
  try {
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const hasFiles = audioManager.getCellsWithAudio().length > 0;
    if (!hasFiles) {
      audioManager.migrateFromOldSystem();
    }
    
    const cells = audioManager.getCellsWithAudio();
    console.log(`üìã [NEW SYSTEM] –ù–∞–π–¥–µ–Ω–æ ${cells.length} –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:`, cells.slice(0, 10));
    return cells;
  } catch (error) {
    console.error('‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:', error);
    return [];
  }
};