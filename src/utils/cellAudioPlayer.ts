import { audioManager } from './simpleAudioManager';

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
 * –ü–†–û–°–¢–û–ï –ò –ù–ê–î–ï–ñ–ù–û–ï –†–ï–®–ï–ù–ò–ï - —Ç–æ–ª—å–∫–æ audioManager
 */
export const playCellAudio = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üîä –ü–†–Ø–ú–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏: ${cellNumber}`);
    
    // –¢–û–õ–¨–ö–û audioManager - –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    const success = await audioManager.playCellAudio(cellNumber);
    
    if (success) {
      console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –£–°–ü–ï–®–ù–û`);
    } else {
      console.warn(`‚ùå –Ø—á–µ–π–∫–∞ ${cellNumber} –ù–ï –ù–ê–ô–î–ï–ù–ê`);
    }
    
    return success;
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ "${cellNumber}":`, error);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏
 */
export const hasCellAudio = (cellNumber: string): boolean => {
  try {
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const hasFiles = audioManager.getCellsWithAudio().length > 0;
    if (!hasFiles) {
      audioManager.migrateFromOldSystem();
    }
    
    const availableCells = audioManager.getCellsWithAudio();
    return availableCells.includes(cellNumber) || availableCells.includes(cellNumber.toUpperCase());
  } catch (error) {
    console.error(`‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
 */
export const getAudioEnabledCells = (): string[] => {
  try {
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const hasFiles = audioManager.getCellsWithAudio().length > 0;
    if (!hasFiles) {
      audioManager.migrateFromOldSystem();
    }
    
    const cells = audioManager.getCellsWithAudio();
    console.log(`üìã [NEW SYSTEM] –ù–∞–π–¥–µ–Ω–æ ${cells.length} –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:`, cells.slice(0, 10));
    return cells;
  } catch (error) {
    console.error('‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:', error);
    return [];
  }
};