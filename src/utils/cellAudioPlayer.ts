import { audioManager } from './simpleAudioManager';

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —è—á–µ–π–∫–∏
 * –ü–†–û–°–¢–û–ï –ò –ù–ê–î–ï–ñ–ù–û–ï –†–ï–®–ï–ù–ò–ï - —Ç–æ–ª—å–∫–æ audioManager
 */
export const playCellAudio = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üîä –ü–†–Ø–ú–û–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏: ${cellNumber}`);
    
    // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º bulletproof —Å–∏—Å—Ç–µ–º—É (–Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–∑–≤—É—á–∫–∏)
    try {
      const { playCellAudio: bulletproofPlay } = await import('./bulletproofAudio');
      const bulletproofSuccess = await bulletproofPlay(cellNumber);
      
      if (bulletproofSuccess) {
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ BULLETPROOF —Å–∏—Å—Ç–µ–º—É`);
        return true;
      }
    } catch (bulletproofError) {
      console.log(`‚ö†Ô∏è Bulletproof —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, bulletproofError);
    }
    
    // –ó–ê–¢–ï–ú –ø—Ä–æ–±—É–µ–º audioManager (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    const success = await audioManager.playCellAudio(cellNumber);
    
    if (success) {
      console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ AUDIOMANAGER`);
    } else {
      console.warn(`‚ùå –Ø—á–µ–π–∫–∞ ${cellNumber} –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ`);
    }
    
    return success;
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ "${cellNumber}":`, error);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏
 */
export const hasCellAudio = (cellNumber: string): boolean => {
  try {
    // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º bulletproof —Å–∏—Å—Ç–µ–º—É
    try {
      const activeVariant = localStorage.getItem('wb-active-voice-variant');
      if (activeVariant) {
        const variantData = localStorage.getItem(`wb-voice-${activeVariant}-permanent`);
        if (variantData) {
          const parsed = JSON.parse(variantData);
          if (parsed[cellNumber] || parsed[cellNumber.toString()]) {
            return true;
          }
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ bulletproof —Å–∏—Å—Ç–µ–º—ã:', error);
    }
    
    // –ó–ê–¢–ï–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º audioManager
    const hasFiles = audioManager.getCellsWithAudio().length > 0;
    if (!hasFiles) {
      audioManager.migrateFromOldSystem();
    }
    
    const availableCells = audioManager.getCellsWithAudio();
    return availableCells.includes(cellNumber) || availableCells.includes(cellNumber.toUpperCase());
  } catch (error) {
    console.error(`‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
 */
export const getAudioEnabledCells = (): string[] => {
  try {
    const allCells: string[] = [];
    
    // –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∏–∑ bulletproof —Å–∏—Å—Ç–µ–º—ã
    try {
      const activeVariant = localStorage.getItem('wb-active-voice-variant');
      if (activeVariant) {
        const variantData = localStorage.getItem(`wb-voice-${activeVariant}-permanent`);
        if (variantData) {
          const parsed = JSON.parse(variantData);
          const bulletproofCells = Object.keys(parsed).filter(key => /^\d+$/.test(key));
          allCells.push(...bulletproofCells);
          console.log(`üìã [BULLETPROOF] –ù–∞–π–¥–µ–Ω–æ ${bulletproofCells.length} —è—á–µ–µ–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ`);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bulletproof —è—á–µ–µ–∫:', error);
    }
    
    // –ó–ê–¢–ï–ú –¥–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∏–∑ audioManager (–µ—Å–ª–∏ –Ω–µ—Ç bulletproof)
    if (allCells.length === 0) {
      const hasFiles = audioManager.getCellsWithAudio().length > 0;
      if (!hasFiles) {
        audioManager.migrateFromOldSystem();
      }
      
      const managerCells = audioManager.getCellsWithAudio();
      allCells.push(...managerCells);
      console.log(`üìã [AUDIOMANAGER] –ù–∞–π–¥–µ–Ω–æ ${managerCells.length} —è—á–µ–µ–∫`);
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const uniqueCells = [...new Set(allCells)].sort((a, b) => parseInt(a) - parseInt(b));
    console.log(`üìã [–ò–¢–û–ì–û] –î–æ—Å—Ç—É–ø–Ω–æ ${uniqueCells.length} –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:`, uniqueCells.slice(0, 10));
    
    return uniqueCells;
  } catch (error) {
    console.error('‚ùå [NEW SYSTEM] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:', error);
    return [];
  }
};