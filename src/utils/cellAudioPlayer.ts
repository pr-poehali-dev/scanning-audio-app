// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ –∏ –≤—ã–¥–∞—á–µ

export const playCellAudio = async (cellNumber: string): Promise<boolean> => {
  try {
    console.log(`üîä –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏: ${cellNumber}`);

    // 1. –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ useAudio (—Ä–∞–∑–¥–µ–ª –≤—ã–¥–∞—á–∏) - –ü–†–ò–û–†–ò–¢–ï–¢
    const mainAudioFiles = localStorage.getItem('wb-audio-files');
    if (mainAudioFiles) {
      const audioFiles = JSON.parse(mainAudioFiles);
      
      // –ò—â–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤—ã–¥–∞—á–∏
      const deliveryKey = `delivery-cell-${cellNumber.toUpperCase()}`;
      if (audioFiles[deliveryKey]) {
        const audio = new Audio(audioFiles[deliveryKey]);
        await audio.play();
        console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –í–´–î–ê–ß–ê: ${cellNumber}`);
        return true;
      }
      
      // –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á
      const simpleKey = cellNumber.toUpperCase();
      if (audioFiles[simpleKey]) {
        const audio = new Audio(audioFiles[simpleKey]);
        await audio.play();
        console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ (–ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á): ${cellNumber}`);
        return true;
      }
      
      // –ò—â–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cell- (–∫–∞–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
      const cellKey = `cell-${cellNumber.toUpperCase()}`;
      if (audioFiles[cellKey]) {
        const audioUrl = audioFiles[cellKey];
        console.log(`üéµ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –ø–æ –∫–ª—é—á—É ${cellKey}: ${audioUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
        if (audioUrl && typeof audioUrl === 'string' && audioUrl.trim()) {
          try {
            const audio = new Audio();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ü–ï–†–ï–î —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π src
            audio.onerror = (e) => {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, e);
              console.error(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL: ${audioUrl}`);
              console.error(`‚ùå URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${audioUrl.substring(0, 50)}...`);
              
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ base64
              if (audioUrl.startsWith('data:')) {
                const base64Part = audioUrl.split(',')[1];
                console.error(`‚ùå Base64 –¥–ª–∏–Ω–∞: ${base64Part ? base64Part.length : '–Ω–µ—Ç base64 —á–∞—Å—Ç–∏'}`);
                console.error(`‚ùå MIME —Ç–∏–ø: ${audioUrl.split(',')[0]}`);
              }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            audio.onloadeddata = () => {
              console.log(`‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audio.duration}s`);
            };
            
            audio.src = audioUrl;
            await audio.play();
            console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ (cell-–ø—Ä–µ—Ñ–∏–∫—Å): ${cellNumber}`);
            return true;
          } catch (playError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, playError);
            console.error(`‚ùå URL —Ç–∏–ø: ${typeof audioUrl}, –¥–ª–∏–Ω–∞: ${audioUrl.length}`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ —ç—Ç–æ base64
            if (audioUrl.startsWith('data:')) {
              console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è base64...`);
              try {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π blob –∏–∑ base64 –∏ –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ
                const base64Data = audioUrl.split(',')[1];
                const mimeType = audioUrl.split(',')[0].split(':')[1].split(';')[0];
                const byteCharacters = atob(base64Data);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                  byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: mimeType });
                const newUrl = URL.createObjectURL(blob);
                
                const retryAudio = new Audio(newUrl);
                await retryAudio.play();
                console.log(`‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û! –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ blob: ${cellNumber}`);
                return true;
              } catch (retryError) {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å base64:`, retryError);
              }
            }
          }
        } else {
          console.error(`‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}: ${audioUrl}`);
        }
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏  
      const cellNum = cellNumber.toUpperCase();
      for (const [key, audioUrl] of Object.entries(audioFiles)) {
        if (key.includes(cellNum) && (key.startsWith('cell-') || key.endsWith(`-${cellNum}`) || key === cellNum)) {
          console.log(`üéµ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –ø–æ –∫–ª—é—á—É ${key}: ${audioUrl}`);
          
          if (audioUrl && typeof audioUrl === 'string' && (audioUrl as string).trim()) {
            try {
              const audio = new Audio(audioUrl as string);
              
              audio.onerror = (e) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á ${key}):`, e);
                console.error(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL: ${audioUrl}`);
              };
              
              await audio.play();
              console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ (–Ω–∞–π–¥–µ–Ω –∫–ª—é—á: ${key}): ${cellNumber}`);
              return true;
            } catch (playError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á ${key}):`, playError);
              console.error(`‚ùå URL: ${audioUrl}`);
            }
          } else {
            console.error(`‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} (–∫–ª—é—á ${key}): ${audioUrl}`);
          }
        }
      }
    }

    // 2. –ò—â–µ–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —è—á–µ–µ–∫ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    const individualCells = localStorage.getItem('wb-pvz-individual-cell-audios');
    if (individualCells) {
      const cellAudios = JSON.parse(individualCells);
      const audioUrl = cellAudios[cellNumber.toUpperCase()] || cellAudios[`delivery-cell-${cellNumber.toUpperCase()}`];
      
      if (audioUrl) {
        const audio = new Audio(audioUrl);
        await audio.play();
        console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        return true;
      }
    }

    // 3. –ò—â–µ–º –≤ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    const generalSettings = localStorage.getItem('wb-pvz-cell-audio-settings-permanent');
    if (generalSettings) {
      const audioFiles = JSON.parse(generalSettings);
      const audioUrl = audioFiles[cellNumber.toUpperCase()] || audioFiles[cellNumber.toLowerCase()];
      
      if (audioUrl) {
        const audio = new Audio(audioUrl);
        await audio.play();
        console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        return true;
      }
    }

    // –ü–æ–∏—Å–∫ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ (A1, A01, a1, –∏ —Ç.–¥.)
    const variations = [
      cellNumber.toUpperCase(),
      cellNumber.toLowerCase(),
      cellNumber.replace(/(\w)(\d+)/, (match, letter, num) => letter.toUpperCase() + num.padStart(2, '0')),
      cellNumber.replace(/(\w)0*(\d+)/, '$1$2').toUpperCase()
    ];

    for (const settings of [individualCells, generalSettings]) {
      if (!settings) continue;
      
      const audioFiles = JSON.parse(settings);
      for (const variation of variations) {
        if (audioFiles[variation]) {
          const audio = new Audio(audioFiles[variation]);
          await audio.play();
          console.log(`‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ (–≤–∞—Ä–∏–∞—Ü–∏—è ${variation}) –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
          return true;
        }
      }
    }

    console.log(`‚ö†Ô∏è –û–∑–≤—É—á–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return false;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏
export const hasCellAudio = (cellNumber: string): boolean => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ useAudio (—Ä–∞–∑–¥–µ–ª –≤—ã–¥–∞—á–∏) - –ü–†–ò–û–†–ò–¢–ï–¢
    const mainAudioFiles = localStorage.getItem('wb-audio-files');
    if (mainAudioFiles) {
      const audioFiles = JSON.parse(mainAudioFiles);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≤—ã–¥–∞—á–∏
      const deliveryKey = `delivery-cell-${cellNumber.toUpperCase()}`;
      if (audioFiles[deliveryKey]) {
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á
      const simpleKey = cellNumber.toUpperCase();
      if (audioFiles[simpleKey]) {
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cell-
      const cellKey = `cell-${cellNumber.toUpperCase()}`;
      if (audioFiles[cellKey]) {
        return true;
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      const cellNum = cellNumber.toUpperCase();
      for (const key of Object.keys(audioFiles)) {
        if (key.includes(cellNum) && (key.startsWith('cell-') || key.endsWith(`-${cellNum}`) || key === cellNum)) {
          return true;
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const individualCells = localStorage.getItem('wb-pvz-individual-cell-audios');
    if (individualCells) {
      const cellAudios = JSON.parse(individualCells);
      if (cellAudios[cellNumber.toUpperCase()] || cellAudios[`delivery-cell-${cellNumber.toUpperCase()}`]) {
        return true;
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    const generalSettings = localStorage.getItem('wb-pvz-cell-audio-settings-permanent');
    if (generalSettings) {
      const audioFiles = JSON.parse(generalSettings);
      if (audioFiles[cellNumber.toUpperCase()] || audioFiles[cellNumber.toLowerCase()]) {
        return true;
      }
    }

    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
export const getAudioEnabledCells = (): string[] => {
  const cells: string[] = [];

  try {
    // –ò–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const individualCells = localStorage.getItem('wb-pvz-individual-cell-audios');
    if (individualCells) {
      const cellAudios = JSON.parse(individualCells);
      cells.push(...Object.keys(cellAudios));
    }

    // –ò–∑ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    const generalSettings = localStorage.getItem('wb-pvz-cell-audio-settings-permanent');
    if (generalSettings) {
      const audioFiles = JSON.parse(generalSettings);
      for (const key of Object.keys(audioFiles)) {
        // –¢–æ–ª—å–∫–æ —è—á–µ–π–∫–∏ (—Ñ–æ—Ä–º–∞—Ç A1, B15 –∏ —Ç.–¥.)
        if (/^[A-Z]+\d+$/i.test(key) && !cells.includes(key.toUpperCase())) {
          cells.push(key.toUpperCase());
        }
      }
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${cells.length} –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:`, cells);
    return cells;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫:', error);
    return [];
  }
};