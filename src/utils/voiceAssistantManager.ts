/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–∞: —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π
 * –ù–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

export interface VoiceAssistantConfig {
  id: 'old' | 'new';
  name: string;
  description: string;
  enabled: boolean;
}

export interface VoiceSound {
  id: string;
  name: string;
  description: string;
  category: 'system' | 'cell' | 'interaction' | 'feedback';
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
export const VOICE_ASSISTANTS: VoiceAssistantConfig[] = [
  {
    id: 'old',
    name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫',
    description: '–ë–∞–∑–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫',
    enabled: true
  },
  {
    id: 'new',
    name: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
    description: '–ü–æ–ª–Ω–∞—è –æ–∑–≤—É—á–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–≤—É–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX',
    enabled: true
  }
];

// –ó–≤—É–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
export const NEW_VOICE_SOUNDS: VoiceSound[] = [
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
  {
    id: 'error_sound',
    name: '–ó–≤—É–∫ –æ—à–∏–±–∫–∏',
    description: '–ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ QR-–∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞',
    category: 'system'
  },
  
  // –ó–≤—É–∫–∏ —è—á–µ–µ–∫ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
  {
    id: 'cell_number',
    name: '–ù–æ–º–µ—Ä —è—á–µ–π–∫–∏',
    description: '–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ø—á–µ–π–∫–∞ –ê –æ–¥–∏–Ω")',
    category: 'cell'
  },
  
  // –ó–≤—É–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
  {
    id: 'goods_count',
    name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
    description: '–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¢—Ä–∏")',
    category: 'interaction'
  },
  
  {
    id: 'goods_word',
    name: '–°–ª–æ–≤–æ "—Ç–æ–≤–∞—Ä–æ–≤"',
    description: '–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä (—Ç–æ–≤–∞—Ä/—Ç–æ–≤–∞—Ä–∞/—Ç–æ–≤–∞—Ä–æ–≤)',
    category: 'interaction'
  },
  
  // –ó–≤—É–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  {
    id: 'payment_on_delivery',
    name: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
    description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å –æ–ø–ª–∞—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
    category: 'feedback'
  },
  
  {
    id: 'please_check_good_under_camera',
    name: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    description: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    category: 'feedback'
  },
  
  {
    id: 'thanks_for_order_rate_pickpoint',
    name: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑',
    description: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—å–±–∞ –æ—Ü–µ–Ω–∏—Ç—å PickPoint',
    category: 'feedback'
  }
];

class VoiceAssistantManager {
  private currentAssistant: 'old' | 'new' = 'old';
  private readonly STORAGE_KEY = 'wb-voice-assistant-config';
  private readonly NEW_SOUNDS_KEY = 'wb-new-voice-sounds';

  constructor() {
    this.loadConfiguration();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage
   */
  private loadConfiguration(): void {
    try {
      const config = localStorage.getItem(this.STORAGE_KEY);
      if (config) {
        const parsed = JSON.parse(config);
        this.currentAssistant = parsed.currentAssistant || 'old';
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ localStorage
   */
  private saveConfiguration(): void {
    try {
      const config = {
        currentAssistant: this.currentAssistant,
        timestamp: Date.now()
      };
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(config));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
   */
  getCurrentAssistant(): 'old' | 'new' {
    return this.currentAssistant;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
   */
  setCurrentAssistant(assistantId: 'old' | 'new'): void {
    this.currentAssistant = assistantId;
    this.saveConfiguration();
    console.log(`üé§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫: ${assistantId}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–º–æ—â–Ω–∏–∫–µ
   */
  getAssistantInfo(assistantId: 'old' | 'new'): VoiceAssistantConfig | undefined {
    return VOICE_ASSISTANTS.find(a => a.id === assistantId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
   */
  getAllAssistants(): VoiceAssistantConfig[] {
    return VOICE_ASSISTANTS;
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —è—á–µ–π–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
   */
  async playCellAudio(cellNumber: string): Promise<boolean> {
    if (this.currentAssistant === 'old') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
      const { playCellAudio } = await import('./cellAudioPlayer');
      return playCellAudio(cellNumber);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      return this.playNewAssistantSound('cell_number', { cellNumber });
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
   */
  async playNewAssistantSound(soundId: string, params?: any): Promise<boolean> {
    try {
      console.log(`üé§ [NEW ASSISTANT] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞: ${soundId}`, params);

      // –î–ª—è –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
      if (soundId === 'cell_number' && params?.cellNumber) {
        const { playCellAudio } = await import('./cellAudioPlayer');
        return playCellAudio(params.cellNumber);
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–≤—É–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const audioData = this.getNewSoundData(soundId);
      if (!audioData) {
        console.warn(`‚ö†Ô∏è [NEW ASSISTANT] –ó–≤—É–∫ "${soundId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
      }

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
      const audio = new Audio(audioData);
      await new Promise((resolve, reject) => {
        audio.onended = () => resolve(true);
        audio.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'));
        audio.play().catch(reject);
      });

      console.log(`‚úÖ [NEW ASSISTANT] –ó–≤—É–∫ "${soundId}" –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      return true;
    } catch (error) {
      console.error(`‚ùå [NEW ASSISTANT] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ "${soundId}":`, error);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
   */
  saveNewSound(soundId: string, file: File): Promise<boolean> {
    return new Promise((resolve, reject) => {
      console.log(`üíæ [MANAGER] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–≤—É–∫–∞ "${soundId}"`);
      console.log(`üìã [MANAGER] –§–∞–π–ª: "${file.name}", —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç, —Ç–∏–ø: "${file.type}"`);
      
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const audioData = reader.result as string;
          console.log(`üìä [MANAGER] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, —Ä–∞–∑–º–µ—Ä: ${audioData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          const sounds = this.getNewSoundsStorage();
          console.log(`üì¶ [MANAGER] –¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:`, Object.keys(sounds));
          
          sounds[soundId] = {
            data: audioData,
            name: file.name,
            size: file.size,
            type: file.type,
            timestamp: Date.now()
          };
          
          const jsonString = JSON.stringify(sounds);
          console.log(`üíΩ [MANAGER] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –ø–æ–¥ –∫–ª—é—á–æ–º "${this.NEW_SOUNDS_KEY}"`);
          console.log(`üìä [MANAGER] –†–∞–∑–º–µ—Ä JSON: ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          localStorage.setItem(this.NEW_SOUNDS_KEY, jsonString);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
          const savedData = localStorage.getItem(this.NEW_SOUNDS_KEY);
          if (savedData) {
            const savedSounds = JSON.parse(savedData);
            if (savedSounds[soundId]) {
              console.log(`‚úÖ [MANAGER] –ó–≤—É–∫ "${soundId}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω`);
              resolve(true);
            } else {
              console.error(`‚ùå [MANAGER] –ó–≤—É–∫ "${soundId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
              reject(new Error('–ó–≤—É–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è'));
            }
          } else {
            console.error(`‚ùå [MANAGER] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
            reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ localStorage'));
          }
        } catch (error) {
          console.error(`‚ùå [MANAGER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–≤—É–∫–∞ "${soundId}":`, error);
          reject(error);
        }
      };

      reader.onerror = () => {
        console.error(`‚ùå [MANAGER] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–≤—É–∫–∞ "${soundId}"`);
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      };

      console.log(`üìñ [MANAGER] –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ Data URL...`);
      reader.readAsDataURL(file);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–≤—É–∫–∞
   */
  private getNewSoundData(soundId: string): string | null {
    try {
      const sounds = this.getNewSoundsStorage();
      return sounds[soundId]?.data || null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–≤—É–∫–∞ "${soundId}":`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–≤—É–∫–æ–≤
   */
  private getNewSoundsStorage(): Record<string, any> {
    try {
      const data = localStorage.getItem(this.NEW_SOUNDS_KEY);
      return data ? JSON.parse(data) : {};
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–≤—É–∫–æ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤
   */
  getLoadedSounds(): string[] {
    const sounds = this.getNewSoundsStorage();
    return Object.keys(sounds);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–≤—É–∫–∞
   */
  hasSound(soundId: string): boolean {
    const sounds = this.getNewSoundsStorage();
    return !!sounds[soundId];
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
   */
  removeSound(soundId: string): boolean {
    try {
      const sounds = this.getNewSoundsStorage();
      if (sounds[soundId]) {
        delete sounds[soundId];
        localStorage.setItem(this.NEW_SOUNDS_KEY, JSON.stringify(sounds));
        console.log(`üóëÔ∏è –ó–≤—É–∫ "${soundId}" —É–¥–∞–ª–µ–Ω`);
        return true;
      }
      return false;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–≤—É–∫–∞ "${soundId}":`, error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
   */
  clearAllNewSounds(): void {
    try {
      localStorage.removeItem(this.NEW_SOUNDS_KEY);
      console.log('üóëÔ∏è –í—Å–µ –∑–≤—É–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤—É–∫–æ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  getStorageInfo(): { soundsCount: number; totalSize: string; assistant: string } {
    try {
      const sounds = this.getNewSoundsStorage();
      const soundsCount = Object.keys(sounds).length;
      
      let totalBytes = 0;
      Object.values(sounds).forEach((sound: any) => {
        if (sound.size) totalBytes += sound.size;
      });

      const totalSize = totalBytes > 1024 * 1024 
        ? `${(totalBytes / (1024 * 1024)).toFixed(2)} MB`
        : `${Math.round(totalBytes / 1024)} KB`;

      const currentInfo = this.getAssistantInfo(this.currentAssistant);
      
      return {
        soundsCount,
        totalSize,
        assistant: currentInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
      return { soundsCount: 0, totalSize: '0 KB', assistant: '–û—à–∏–±–∫–∞' };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const voiceAssistantManager = new VoiceAssistantManager();