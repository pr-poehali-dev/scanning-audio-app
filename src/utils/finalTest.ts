// –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫

export const performFinalTest = () => {
  console.log('üéØ === –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===');
  
  const results = {
    storages: 0,
    cellFiles: 0,
    workingKeys: 0,
    errors: [] as string[]
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const storages = [
    'wb-audio-files',
    'wb-pvz-cell-audio-settings-permanent',
    'wb-pvz-cell-audio-cement'
  ];
  
  storages.forEach(storageKey => {
    const storage = localStorage.getItem(storageKey);
    if (storage) {
      try {
        const files = JSON.parse(storage);
        results.storages++;
        
        // –ò—â–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫
        Object.keys(files).forEach(key => {
          if (/^\d+$/.test(key) || key.includes('cell-') || key.includes('—è—á–µ–π–∫–∞')) {
            results.cellFiles++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            const url = files[key];
            if (url && (url.startsWith('data:audio/') || url.startsWith('blob:'))) {
              results.workingKeys++;
            }
          }
        });
        
        console.log(`‚úÖ ${storageKey}: OK`);
      } catch (error) {
        results.errors.push(`‚ùå ${storageKey}: ${error.message}`);
      }
    } else {
      results.errors.push(`‚ùå ${storageKey}: –ù–ï–¢ –î–ê–ù–ù–´–•`);
    }
  });
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüèÜ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
  console.log(`üì¶ –†–∞–±–æ—á–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â: ${results.storages}/${storages.length}`);
  console.log(`üè† –§–∞–π–ª–æ–≤ —è—á–µ–µ–∫: ${results.cellFiles}`);
  console.log(`‚úÖ –†–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: ${results.workingKeys}`);
  
  if (results.errors.length > 0) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
    results.errors.forEach(error => console.log(error));
  }
  
  const isWorking = results.workingKeys > 0;
  
  console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${isWorking ? '‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!' : '‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!'}`);
  
  return {
    isWorking,
    storages: results.storages,
    cellFiles: results.cellFiles,
    workingKeys: results.workingKeys,
    errors: results.errors
  };
};