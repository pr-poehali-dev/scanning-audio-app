// –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º

export const testDirectAudio = async (): Promise<string> => {
  const results: string[] = [];
  
  try {
    results.push('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ó–í–£–ß–ö–ò');
    results.push('='.repeat(30));
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const keys = Object.keys(localStorage);
    const audioKeys = keys.filter(key => 
      key.includes('audio') || 
      key.includes('voice') || 
      key.includes('wb-')
    );
    
    results.push(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π —Å –∞—É–¥–∏–æ: ${audioKeys.length}`);
    audioKeys.forEach(key => {
      const data = localStorage.getItem(key);
      results.push(`  - ${key}: ${data ? Math.floor(data.length / 1024) + 'KB' : 'null'}`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const activeVariant = localStorage.getItem('wb-active-voice-variant');
    results.push(`üéµ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${activeVariant || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const variant1 = localStorage.getItem('wb-voice-variant1-permanent');
    const variant2 = localStorage.getItem('wb-voice-variant2-permanent');
    
    results.push(`üìÇ –í–∞—Ä–∏–∞–Ω—Ç 1: ${variant1 ? '–ó–ê–ì–†–£–ñ–ï–ù (' + Math.floor(variant1.length / 1024) + 'KB)' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù'}`);
    results.push(`üìÇ –í–∞—Ä–∏–∞–Ω—Ç 2: ${variant2 ? '–ó–ê–ì–†–£–ñ–ï–ù (' + Math.floor(variant2.length / 1024) + 'KB)' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù'}`);
    
    // 4. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    if (variant1) {
      try {
        const parsed = JSON.parse(variant1);
        const keys = Object.keys(parsed);
        results.push(`üîß –í–∞—Ä–∏–∞–Ω—Ç 1 —Å–æ–¥–µ—Ä–∂–∏—Ç: ${keys.length} —Ñ–∞–π–ª–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        const testKeys = ['1', '2', '100', '—Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π'];
        testKeys.forEach(key => {
          if (parsed[key]) {
            const isValidAudio = parsed[key].startsWith('data:audio/');
            results.push(`  ‚úì "${key}": ${isValidAudio ? '–í–ê–õ–ò–î–ù–´–ô –ê–£–î–ò–û' : '–ù–ï–í–ê–õ–ò–î–ù–´–ô'}`);
          } else {
            results.push(`  ‚úó "${key}": –ù–ï –ù–ê–ô–î–ï–ù`);
          }
        });
        
        // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
        const testAudio = parsed['1'];
        if (testAudio && testAudio.startsWith('data:audio/')) {
          results.push('üîä –¢–ï–°–¢–ò–†–£–ï–ú –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï...');
          
          try {
            const audio = new Audio();
            audio.src = testAudio;
            audio.volume = 0.5;
            
            await new Promise<void>((resolve, reject) => {
              const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è'));
              }, 3000);

              audio.addEventListener('ended', () => {
                clearTimeout(timeout);
                resolve();
              });

              audio.addEventListener('error', (error) => {
                clearTimeout(timeout);
                reject(error);
              });

              audio.play().catch(reject);
            });
            
            results.push('üéâ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!');
            return results.join('\n');
            
          } catch (playError) {
            results.push(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø: ${playError}`);
          }
        } else {
          results.push('‚ùå –ù–ï–¢ –í–ê–õ–ò–î–ù–û–ì–û –ê–£–î–ò–û –î–õ–Ø –¢–ï–°–¢–ê');
        }
        
      } catch (parseError) {
        results.push(`‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –í–ê–†–ò–ê–ù–¢–ê 1: ${parseError}`);
      }
    }
    
    return results.join('\n');
    
  } catch (error) {
    results.push(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error}`);
    return results.join('\n');
  }
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏
export const forceActivateAudio = async (): Promise<boolean> => {
  try {
    console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –û–ó–í–£–ß–ö–ò...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const variant1 = localStorage.getItem('wb-voice-variant1-permanent');
    const variant2 = localStorage.getItem('wb-voice-variant2-permanent');
    
    if (!variant1 && !variant2) {
      console.log('‚ùå –ù–ï–¢ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –í–ê–†–ò–ê–ù–¢–û–í');
      return false;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const variantData = variant1 || variant2;
    const variantKey = variant1 ? 'variant1' : 'variant2';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    localStorage.setItem('wb-active-voice-variant', variantKey);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ bulletproof —Å–∏—Å—Ç–µ–º—É
    const { activateVoiceVariant } = await import('@/utils/bulletproofAudio');
    const success = activateVoiceVariant(variantKey);
    
    console.log(`üéµ –ê–∫—Ç–∏–≤–∞—Ü–∏—è ${variantKey}: ${success}`);
    
    return success;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
    return false;
  }
};