// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã

export const testAudioSystem = () => {
  console.log('üß™ === –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–î–ò–û –°–ò–°–¢–ï–ú–´ ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const storages = [
    'wb-audio-files',
    'wb-pvz-cell-audio-settings-permanent',
    'wb-pvz-cell-audio-cement',
    'wb-pvz-cell-audio-IMMEDIATE',
    'wb-NEVER-LOSE-CELLS-BACKUP'
  ];
  
  let totalCellFiles = 0;
  let workingStorages = 0;
  
  console.log('üì¶ –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –•–†–ê–ù–ò–õ–ò–©:');
  
  storages.forEach(storageKey => {
    const storage = localStorage.getItem(storageKey);
    if (storage) {
      try {
        const files = JSON.parse(storage);
        const cellFiles = Object.keys(files).filter(key => 
          /^\d+$/.test(key) || 
          key.includes('cell-') || 
          key.includes('—è—á–µ–π–∫–∞')
        );
        
        if (cellFiles.length > 0) {
          console.log(`‚úÖ ${storageKey}: ${cellFiles.length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`, cellFiles.slice(0, 3));
          totalCellFiles += cellFiles.length;
          workingStorages++;
        } else {
          console.log(`‚ö†Ô∏è ${storageKey}: –ï—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`);
        }
      } catch (error) {
        console.error(`‚ùå ${storageKey}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞`, error);
      }
    } else {
      console.log(`‚ùå ${storageKey}: –ù–ï–¢ –î–ê–ù–ù–´–•`);
    }
  });
  
  console.log(`\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`üìä –†–∞–±–æ—á–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â: ${workingStorages}/${storages.length}`);
  console.log(`üè† –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫: ${totalCellFiles}`);
  
  if (totalCellFiles === 0) {
    console.log(`\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ù–ê–°–¢–†–û–ï–ù–ê!`);
    console.log(`üí° –†–ï–®–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ–ª–æ—Å–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞ ‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É —è—á–µ–µ–∫`);
    return false;
  } else {
    console.log(`\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!`);
    return true;
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const autoTestOnStart = () => {
  setTimeout(() => {
    testAudioSystem();
  }, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
};