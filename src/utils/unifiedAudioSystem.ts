/**
 * üéØ –ï–î–ò–ù–ê–Ø –ë–ï–¢–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –æ–¥–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –í–°–ï–ì–î–ê –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
 */

const UNIFIED_AUDIO_KEY = 'wb-unified-audio-system';
const BACKUP_KEYS = [
  'wb-pvz-cell-audio-settings-permanent',
  'wb-audio-files', 
  'wb-audio-files-backup',
  'customAudioFiles'
];

interface UnifiedAudioFile {
  url: string;
  name: string;
  type: 'cell' | 'system';
  cellNumber?: string;
  createdAt: string;
}

interface UnifiedAudioStorage {
  files: Record<string, UnifiedAudioFile>;
  lastUpdate: string;
  version: string;
}

class UnifiedAudioSystem {
  private static instance: UnifiedAudioSystem;
  private cache: Map<string, HTMLAudioElement> = new Map();
  private storage: UnifiedAudioStorage | null = null;

  static getInstance(): UnifiedAudioSystem {
    if (!UnifiedAudioSystem.instance) {
      UnifiedAudioSystem.instance = new UnifiedAudioSystem();
    }
    return UnifiedAudioSystem.instance;
  }

  constructor() {
    this.loadStorage();
    this.migrateFromAllSources();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  private loadStorage(): void {
    try {
      const data = localStorage.getItem(UNIFIED_AUDIO_KEY);
      if (data) {
        this.storage = JSON.parse(data);
      } else {
        this.storage = {
          files: {},
          lastUpdate: new Date().toISOString(),
          version: '1.0'
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–¥–∏–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
      this.storage = {
        files: {},
        lastUpdate: new Date().toISOString(),
        version: '1.0'
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  private saveStorage(): boolean {
    if (!this.storage) return false;
    
    try {
      this.storage.lastUpdate = new Date().toISOString();
      localStorage.setItem(UNIFIED_AUDIO_KEY, JSON.stringify(this.storage));
      
      // –î–£–ë–õ–ò–†–£–ï–ú –≤ —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const legacyFormat: Record<string, string> = {};
      Object.entries(this.storage.files).forEach(([key, file]) => {
        legacyFormat[key] = file.url;
      });
      
      BACKUP_KEYS.forEach(backupKey => {
        try {
          localStorage.setItem(backupKey, JSON.stringify(legacyFormat));
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –±—ç–∫–∞–ø–∞
        }
      });
      
      console.log(`‚úÖ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${Object.keys(this.storage.files).length} —Ñ–∞–π–ª–æ–≤`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
      return false;
    }
  }

  /**
   * –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private migrateFromAllSources(): void {
    if (!this.storage) return;

    console.log('üîÑ === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ò–ó –í–°–ï–• –ò–°–¢–û–ß–ù–ò–ö–û–í ===');
    let migratedCount = 0;

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
    BACKUP_KEYS.forEach(key => {
      try {
        const oldData = localStorage.getItem(key);
        if (oldData) {
          const parsed = JSON.parse(oldData);
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é ${key}: ${Object.keys(parsed).length} —Ñ–∞–π–ª–æ–≤`);

          Object.entries(parsed).forEach(([fileKey, fileUrl]) => {
            if (typeof fileUrl !== 'string' || !fileUrl.startsWith('data:audio/')) return;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            let audioFile: UnifiedAudioFile;
            
            if (this.isCellKey(fileKey)) {
              const cellNumber = this.extractCellNumber(fileKey);
              if (cellNumber) {
                // –§–∞–π–ª —è—á–µ–π–∫–∏
                audioFile = {
                  url: fileUrl,
                  name: `cell-${cellNumber}.mp3`,
                  type: 'cell',
                  cellNumber: cellNumber,
                  createdAt: new Date().toISOString()
                };
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                const cellKeys = [cellNumber, `cell-${cellNumber}`, `—è—á–µ–π–∫–∞-${cellNumber}`];
                cellKeys.forEach(ck => {
                  if (!this.storage!.files[ck]) {
                    this.storage!.files[ck] = audioFile;
                    migratedCount++;
                  }
                });
                
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —è—á–µ–π–∫–∞ ${cellNumber} –∏–∑ ${key}`);
              }
            } else if (this.isSystemKey(fileKey)) {
              // –°–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª
              audioFile = {
                url: fileUrl,
                name: fileKey,
                type: 'system',
                createdAt: new Date().toISOString()
              };
              
              if (!this.storage!.files[fileKey]) {
                this.storage!.files[fileKey] = audioFile;
                migratedCount++;
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${fileKey} –∏–∑ ${key}`);
              }
            }
          });
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ ${key}:`, error);
      }
    });

    if (migratedCount > 0) {
      this.saveStorage();
      console.log(`üéØ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedCount} —Ñ–∞–π–ª–æ–≤`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á —è—á–µ–π–∫–æ–π
   */
  private isCellKey(key: string): boolean {
    return /^\d+$/.test(key) || 
           key.includes('cell-') || 
           key.includes('—è—á–µ–π–∫–∞-') ||
           key.includes('–∫–æ—Ä–æ–±–∫–∞-') ||
           key.includes('box-');
  }

  /**
   * –ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∫–ª—é—á–∞
   */
  private extractCellNumber(key: string): string | null {
    const match = key.match(/(\d+)/);
    return match ? match[1] : null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á —Å–∏—Å—Ç–µ–º–Ω—ã–º –∑–≤—É–∫–æ–º
   */
  private isSystemKey(key: string): boolean {
    const systemKeywords = [
      '—Å–∫–∏–¥–∫', '–∫–æ—à–µ–ª–µ–∫', 'discount', '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π',
      '–∫–∞–º–µ—Ä', '—Ç–æ–≤–∞—Ä', 'check-product', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä'
    ];
    
    return systemKeywords.some(keyword => 
      key.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  /**
   * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ —è—á–µ–π–∫–∏
   */
  async playCellAudio(cellNumber: string): Promise<boolean> {
    console.log(`üéØ === –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –Ø–ß–ï–ô–ö–ò ${cellNumber} ===`);
    
    if (!this.storage) {
      this.loadStorage();
      this.migrateFromAllSources();
    }

    const possibleKeys = [
      cellNumber,
      `cell-${cellNumber}`,
      `—è—á–µ–π–∫–∞-${cellNumber}`
    ];

    // –ò—â–µ–º —Ñ–∞–π–ª
    let audioFile: UnifiedAudioFile | null = null;
    let foundKey = '';

    for (const key of possibleKeys) {
      if (this.storage!.files[key]) {
        audioFile = this.storage!.files[key];
        foundKey = key;
        break;
      }
    }

    if (!audioFile) {
      console.warn(`‚ùå –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –Ø—á–µ–π–∫–∞ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É—é...`);
      
      // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      this.migrateFromAllSources();
      
      // –ò—â–µ–º –µ—â—ë —Ä–∞–∑
      for (const key of possibleKeys) {
        if (this.storage!.files[key]) {
          audioFile = this.storage!.files[key];
          foundKey = key;
          break;
        }
      }
      
      if (!audioFile) {
        console.error(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –Ø—á–µ–π–∫–∞ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!`);
        return false;
      }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
    try {
      const audio = new Audio(audioFile.url);
      audio.volume = 0.8;
      await audio.play();
      console.log(`‚úÖ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ (–∫–ª—é—á: ${foundKey})`);
      return true;
    } catch (error) {
      console.error(`‚ùå –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
   */
  async playSystemAudio(soundKey: string): Promise<boolean> {
    console.log(`üéØ === –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –ó–í–£–ö–ê ${soundKey} ===`);
    
    if (!this.storage) {
      this.loadStorage();
      this.migrateFromAllSources();
    }

    // –ú–∞–ø–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–≤—É–∫–æ–≤
    const soundMappings: Record<string, string[]> = {
      'discount': [
        '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
        '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫',
        '—Å–∫–∏–¥–∫–∞',
        '–∫–æ—à–µ–ª–µ–∫',
        'discount'
      ],
      'check-product': [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
        '–∫–∞–º–µ—Ä–∞',
        '—Ç–æ–≤–∞—Ä',
        'check-product'
      ]
    };

    const possibleKeys = soundMappings[soundKey] || [soundKey];
    
    // –ò—â–µ–º —Ñ–∞–π–ª
    let audioFile: UnifiedAudioFile | null = null;
    let foundKey = '';

    for (const key of possibleKeys) {
      if (this.storage!.files[key]) {
        audioFile = this.storage!.files[key];
        foundKey = key;
        break;
      }
    }

    if (!audioFile) {
      console.warn(`‚ùå –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${soundKey} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É—é...`);
      
      // –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      this.migrateFromAllSources();
      
      // –ò—â–µ–º –µ—â—ë —Ä–∞–∑
      for (const key of possibleKeys) {
        if (this.storage!.files[key]) {
          audioFile = this.storage!.files[key];
          foundKey = key;
          break;
        }
      }
      
      if (!audioFile) {
        console.error(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${soundKey} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!`);
        return false;
      }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
    try {
      const audio = new Audio(audioFile.url);
      audio.volume = 0.8;
      await audio.play();
      console.log(`‚úÖ –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ ${soundKey} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω (–∫–ª—é—á: ${foundKey})`);
      return true;
    } catch (error) {
      console.error(`‚ùå –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ ${soundKey}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
   */
  getInfo(): { totalFiles: number; cellFiles: number; systemFiles: number } {
    if (!this.storage) return { totalFiles: 0, cellFiles: 0, systemFiles: 0 };
    
    const files = Object.values(this.storage.files);
    const cellFiles = files.filter(f => f.type === 'cell').length;
    const systemFiles = files.filter(f => f.type === 'system').length;
    
    return {
      totalFiles: files.length,
      cellFiles,
      systemFiles
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ —Å –æ–∑–≤—É—á–∫–æ–π
   */
  getCellsWithAudio(): string[] {
    if (!this.storage) return [];
    
    const cells = new Set<string>();
    Object.values(this.storage.files).forEach(file => {
      if (file.type === 'cell' && file.cellNumber) {
        cells.add(file.cellNumber);
      }
    });
    
    return Array.from(cells).sort((a, b) => parseInt(a) - parseInt(b));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const unifiedAudioSystem = UnifiedAudioSystem.getInstance();

// –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
export const playCellAudio = (cellNumber: string) => unifiedAudioSystem.playCellAudio(cellNumber);
export const playSystemAudio = (soundKey: string) => unifiedAudioSystem.playSystemAudio(soundKey);
export const getAudioInfo = () => unifiedAudioSystem.getInfo();
export const getCellsWithAudio = () => unifiedAudioSystem.getCellsWithAudio();