// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ IndexedDB

const DB_NAME = 'wb-pvz-audio';
const DB_VERSION = 1;
const STORE_NAME = 'audio-files';

interface AudioFile {
  key: string;
  blob: Blob;
  fileName: string;
  mimeType: string;
}

class AudioStorage {
  private db: IDBDatabase | null = null;
  private initPromise: Promise<void> | null = null;

  async init(): Promise<void> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (this.db) {
      console.log('‚úÖ IndexedDB —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return Promise.resolve();
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∂–¥–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.initPromise) {
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
      return this.initPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.initPromise = new Promise((resolve, reject) => {
      console.log(`üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ IndexedDB: ${DB_NAME} v${DB_VERSION}`);
      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è IndexedDB:', request.error);
        this.initPromise = null;
        reject(request.error);
      };
      
      request.onsuccess = () => {
        this.db = request.result;
        console.log('‚úÖ IndexedDB —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã IndexedDB –¥–æ –≤–µ—Ä—Å–∏–∏ ${DB_VERSION}`);
        
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          db.createObjectStore(STORE_NAME, { keyPath: 'key' });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${STORE_NAME}`);
        }
      };
    });

    return this.initPromise;
  }

  async saveFile(key: string, file: File): Promise<string> {
    if (!this.db) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);

      const audioFile: AudioFile = {
        key,
        blob: file,
        fileName: file.name,
        mimeType: file.type
      };

      const request = store.put(audioFile);

      request.onsuccess = () => {
        const url = URL.createObjectURL(file);
        console.log(`‚úÖ –§–∞–π–ª "${key}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB (—Ä–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB)`);
        resolve(url);
      };

      request.onerror = () => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ "${key}":`, request.error);
        reject(request.error);
      };
    });
  }

  async getFile(key: string): Promise<string | null> {
    if (!this.db) await this.init();

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.get(key);

      request.onsuccess = () => {
        const audioFile = request.result as AudioFile | undefined;
        if (audioFile) {
          const url = URL.createObjectURL(audioFile.blob);
          console.log(`üìÇ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${key}`);
          resolve(url);
        } else {
          resolve(null);
        }
      };

      request.onerror = () => reject(request.error);
    });
  }

  async getAllFiles(): Promise<{ [key: string]: string }> {
    if (!this.db) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.getAll();

      request.onsuccess = () => {
        const files: { [key: string]: string } = {};
        const results = request.result as AudioFile[];
        
        results.forEach(audioFile => {
          files[audioFile.key] = URL.createObjectURL(audioFile.blob);
        });

        if (results.length > 0) {
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${results.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ IndexedDB:`, results.map(f => f.key));
        } else {
          console.log('üìÇ IndexedDB –ø—É—Å—Ç–∞ - –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        resolve(files);
      };

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', request.error);
        reject(request.error);
      };
    });
  }

  async deleteFile(key: string): Promise<void> {
    if (!this.db) await this.init();

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.delete(key);

      request.onsuccess = () => {
        console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${key}`);
        resolve();
      };

      request.onerror = () => reject(request.error);
    });
  }

  async clear(): Promise<void> {
    if (!this.db) await this.init();

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.clear();

      request.onsuccess = () => {
        console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
        resolve();
      };

      request.onerror = () => reject(request.error);
    });
  }

  async getStoredKeys(): Promise<string[]> {
    if (!this.db) await this.init();

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.getAllKeys();

      request.onsuccess = () => {
        const keys = request.result as string[];
        console.log(`üîë –ö–ª—é—á–∏ –≤ IndexedDB (${keys.length}):`, keys);
        resolve(keys);
      };

      request.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:', request.error);
        reject(request.error);
      };
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async diagnose(): Promise<void> {
    console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê IndexedDB ===');
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', !!this.db);
    
    if (!this.db) {
      await this.init();
    }
    
    const keys = await this.getStoredKeys();
    const files = await this.getAllFiles();
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('  - –í—Å–µ–≥–æ –∫–ª—é—á–µ–π:', keys.length);
    console.log('  - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:', Object.keys(files).length);
    console.log('  - –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:', keys);
    console.log('='.repeat(50));
  }
}

export const audioStorage = new AudioStorage();