/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Object URL
 * –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ–º Data URL
 */

class ObjectUrlAudioManager {
  private static instance: ObjectUrlAudioManager;
  private audioCache: Map<string, HTMLAudioElement> = new Map();
  private urlCache: Map<string, string> = new Map();

  static getInstance(): ObjectUrlAudioManager {
    if (!ObjectUrlAudioManager.instance) {
      ObjectUrlAudioManager.instance = new ObjectUrlAudioManager();
    }
    return ObjectUrlAudioManager.instance;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏
   */
  async saveCellAudio(cellNumber: string, file: File): Promise<boolean> {
    try {
      console.log(`üíæ [OBJECT URL] –°–æ—Ö—Ä–∞–Ω—è—é –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, {
        name: file.name,
        type: file.type,
        size: Math.round(file.size / 1024) + 'KB'
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
      if (!file.type.startsWith('audio/') && !this.isAudioFile(file.name)) {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª ${file.name} –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º`);
      }

      // –°–æ–∑–¥–∞–µ–º Object URL
      const objectUrl = URL.createObjectURL(file);
      console.log(`üîó Object URL —Å–æ–∑–¥–∞–Ω: ${objectUrl}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
      const testSuccess = await this.testAudioFile(objectUrl, file.name);
      if (!testSuccess) {
        URL.revokeObjectURL(objectUrl);
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      const keys = [cellNumber, `cell-${cellNumber}`];
      keys.forEach(key => {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π URL –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldUrl = this.urlCache.get(key);
        if (oldUrl) {
          URL.revokeObjectURL(oldUrl);
        }
        
        this.urlCache.set(key, objectUrl);
        
        // –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –∫—ç—à
        const oldAudio = this.audioCache.get(key);
        if (oldAudio) {
          oldAudio.pause();
          oldAudio.src = '';
          this.audioCache.delete(key);
        }
      });

      console.log(`‚úÖ –ê—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ Object URL`);
      return true;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
   */
  private isAudioFile(filename: string): boolean {
    const audioExtensions = ['.mp3', '.wav', '.ogg', '.m4a', '.aac', '.flac', '.opus'];
    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
    return audioExtensions.includes(ext);
  }

  /**
   * –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª
   */
  private testAudioFile(url: string, filename: string): Promise<boolean> {
    return new Promise((resolve) => {
      const testAudio = new Audio();
      
      const timeout = setTimeout(() => {
        console.warn(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${filename}`);
        resolve(true); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      }, 3000);

      testAudio.addEventListener('canplay', () => {
        clearTimeout(timeout);
        console.log(`‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω`);
        resolve(true);
      }, { once: true });

      testAudio.addEventListener('error', (e) => {
        clearTimeout(timeout);
        console.error(`‚ùå –¢–µ—Å—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ ${filename} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, e);
        resolve(false);
      }, { once: true });

      testAudio.src = url;
    });
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ —è—á–µ–π–∫–∏
   */
  async playCellAudio(cellNumber: string): Promise<boolean> {
    try {
      console.log(`üéµ [OBJECT URL] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —è—á–µ–π–∫–∏ ${cellNumber}`);

      // –ò—â–µ–º URL –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–∞–º
      const possibleKeys = [cellNumber, `cell-${cellNumber}`, cellNumber.toString()];
      let url: string | null = null;
      let foundKey = '';

      for (const key of possibleKeys) {
        url = this.urlCache.get(key) || null;
        if (url) {
          foundKey = key;
          break;
        }
      }

      if (!url) {
        console.warn(`‚ùå Object URL –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        const availableKeys = Array.from(this.urlCache.keys());
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:`, availableKeys);
        return false;
      }

      console.log(`üîó –ù–∞–π–¥–µ–Ω Object URL –¥–ª—è ${foundKey}: ${url}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç
      let audio = this.audioCache.get(foundKey);
      
      if (!audio) {
        audio = new Audio();
        this.setupAudioListeners(audio, foundKey);
        this.audioCache.set(foundKey, audio);
        audio.src = url;
      }

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
      try {
        if (!audio.paused) {
          audio.pause();
        }
        audio.currentTime = 0;
        audio.volume = 0.8;
        
        await audio.play();
        console.log(`‚úÖ –ê—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è`);
        return true;
        
      } catch (playError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:`, playError);
        return false;
      }

    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
      return false;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private setupAudioListeners(audio: HTMLAudioElement, key: string): void {
    audio.addEventListener('loadstart', () => console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ ${key}...`));
    audio.addEventListener('canplay', () => console.log(`‚úÖ ${key} –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é`));
    audio.addEventListener('ended', () => console.log(`üèÅ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ${key} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`));
    audio.addEventListener('error', (e) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ ${key}:`, {
        error: e,
        networkState: audio.networkState,
        readyState: audio.readyState,
        src: audio.src
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ —Å –∞—É–¥–∏–æ
   */
  getCellsWithAudio(): string[] {
    const cellNumbers: Set<string> = new Set();
    
    Array.from(this.urlCache.keys()).forEach(key => {
      if (key.startsWith('cell-')) {
        cellNumbers.add(key.replace('cell-', ''));
      } else if (/^\d+$/.test(key)) {
        cellNumbers.add(key);
      }
    });
    
    return Array.from(cellNumbers).sort((a, b) => parseInt(a) - parseInt(b));
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ —è—á–µ–π–∫–∏
   */
  removeCellAudio(cellNumber: string): boolean {
    const keys = [cellNumber, `cell-${cellNumber}`, cellNumber.toString()];
    let removed = false;
    
    keys.forEach(key => {
      const url = this.urlCache.get(key);
      if (url) {
        URL.revokeObjectURL(url);
        this.urlCache.delete(key);
        removed = true;
      }
      
      const audio = this.audioCache.get(key);
      if (audio) {
        audio.pause();
        audio.src = '';
        this.audioCache.delete(key);
      }
    });
    
    if (removed) {
      console.log(`‚úÖ –ê—É–¥–∏–æ —è—á–µ–π–∫–∏ ${cellNumber} —É–¥–∞–ª–µ–Ω–æ`);
    }
    
    return removed;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ
   */
  clearAllAudio(): boolean {
    try {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ Object URLs
      this.urlCache.forEach(url => URL.revokeObjectURL(url));
      this.urlCache.clear();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ
      this.audioCache.forEach(audio => {
        audio.pause();
        audio.src = '';
      });
      this.audioCache.clear();
      
      console.log('‚úÖ –í—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
   */
  getInfo(): { cellsCount: number; totalUrls: number } {
    return {
      cellsCount: this.getCellsWithAudio().length,
      totalUrls: this.urlCache.size
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const objectUrlAudioManager = ObjectUrlAudioManager.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const saveCellAudio = (cellNumber: string, file: File) => objectUrlAudioManager.saveCellAudio(cellNumber, file);
export const playCellAudio = (cellNumber: string) => objectUrlAudioManager.playCellAudio(cellNumber);
export const getCellsWithAudio = () => objectUrlAudioManager.getCellsWithAudio();
export const removeCellAudio = (cellNumber: string) => objectUrlAudioManager.removeCellAudio(cellNumber);
export const clearAllAudio = () => objectUrlAudioManager.clearAllAudio();
export const getAudioManagerInfo = () => objectUrlAudioManager.getInfo();