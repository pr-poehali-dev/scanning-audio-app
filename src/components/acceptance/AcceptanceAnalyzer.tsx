import { Button } from '@/components/ui/button';
import { AcceptanceAnalyzerProps, AcceptanceItem } from './AcceptanceTypes';

// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
const AcceptanceAnalyzer = ({
  customAudioFiles,
  audioTranscriptions,
  setAudioTranscriptions,
  isAnalyzing,
  setIsAnalyzing,
  acceptanceItems,
  changeItemStatus,
  playAcceptanceAudio
}: AcceptanceAnalyzerProps) => {

  // üé§ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
  const transcribeAudio = async (audioKey: string, audioUrl: string): Promise<string> => {
    console.log(`üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ: ${audioKey}`);
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API —Ä–µ—á–µ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
    const fakeTranscriptions: Record<string, string> = {
      'acceptance-–¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω': '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω',
      'acceptance-–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó': '–ü—Ä–∏–Ω—è—Ç–æ –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤', 
      'acceptance-–¢–æ–≤–∞—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
      'acceptance-–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∫–∏': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ',
      'acceptance-–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': '–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞',
      'acceptance-scan-success': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      'acceptance-bulk-success': '–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      'scan-success': '–®—Ç—Ä–∏—Ö–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω',
      'accepted-success': '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
      'damaged-item': '–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è'
    };
    
    await new Promise(resolve => setTimeout(resolve, 800 + Math.random() * 1200));
    
    return fakeTranscriptions[audioKey] || `–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ: ${audioKey}`;
  };

  // üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
  const createFunctionFromTranscription = (audioKey: string, transcription: string) => {
    const functionName = audioKey.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
    const actionType = getActionTypeFromKey(audioKey);
    
    console.log(`üîß === –°–û–ó–î–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –ü–†–ò–ï–ú–ö–ò ===`);
    console.log(`üìù –ê—É–¥–∏–æ—Ñ–∞–π–ª: ${audioKey}`);
    console.log(`üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: "${transcription}"`);
    console.log(`‚öôÔ∏è –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${actionType}`);
    console.log(`üîå –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: ${functionName}()`);
    console.log(``);
    console.log(`// üéØ –§—É–Ω–∫—Ü–∏—è –¥–ª—è: ${transcription}`);
    console.log(`const ${functionName} = () => {`);
    console.log(`  console.log('üîä ${transcription}');`);
    console.log(`  playAudio('${audioKey}');`);
    
    if (actionType === 'scanning') {
      console.log(`  setShowScanner(true);`);
      console.log(`  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
    } else if (actionType === 'acceptance') {
      console.log(`  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ–≤–∞—Ä–∞`);
      console.log(`  setCurrentStep('location');`);
    } else if (actionType === 'damage') {
      console.log(`  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞`);
      console.log(`  markItemAsDamaged();`);
    } else if (actionType === 'error') {
      console.log(`  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏–µ–º–∫–∏`);
      console.log(`  handleAcceptanceError();`);
    }
    
    console.log(`  return '${transcription}';`);
    console.log(`};`);
    console.log(``);
    
    return {
      functionName,
      code: generateFunctionCode(functionName, transcription, actionType),
      actionType,
      description: transcription
    };
  };

  // üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–ª—é—á—É –∞—É–¥–∏–æ
  const getActionTypeFromKey = (audioKey: string): string => {
    if (audioKey.includes('scan') || audioKey.includes('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')) return 'scanning';
    if (audioKey.includes('–ü—Ä–∏–Ω—è—Ç–æ') || audioKey.includes('accepted')) return 'acceptance';
    if (audioKey.includes('–ø–æ–≤—Ä–µ–∂–¥–µ–Ω') || audioKey.includes('damaged')) return 'damage';
    if (audioKey.includes('–û—à–∏–±–∫–∞') || audioKey.includes('error')) return 'error';
    if (audioKey.includes('bulk') || audioKey.includes('–í—Å–µ —Ç–æ–≤–∞—Ä—ã')) return 'bulk_operation';
    return 'general';
  };

  // üíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  const generateFunctionCode = (functionName: string, transcription: string, actionType: string): string => {
    const baseCode = `const ${functionName} = () => {\n  console.log('üîä ${transcription}');\n  playAudio('${functionName}');\n`;
    
    switch (actionType) {
      case 'scanning':
        return baseCode + `  // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n  setShowScanner(true);\n  return '${transcription}';\n};`;
      case 'acceptance':
        return baseCode + `  // –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–≤–∞—Ä–∞\n  setCurrentStep('location');\n  return '${transcription}';\n};`;
      case 'damage':
        return baseCode + `  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è\n  markItemAsDamaged();\n  return '${transcription}';\n};`;
      case 'error':
        return baseCode + `  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏\n  console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–µ–º–∫–∏');\n  setCurrentStep('scan');\n  return '${transcription}';\n};`;
      case 'bulk_operation':
        return baseCode + `  // –ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è\n  handleBulkAccept();\n  console.log('–ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');\n  return '${transcription}';\n};`;
      default:
        return baseCode + `  // –û–±—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n  console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionType}');\n  return '${transcription}';\n};`;
    }
  };

  // üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const analyzeAllAudioFiles = async () => {
    setIsAnalyzing(true);
    console.log('üé§ === –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê –ê–£–î–ò–û–§–ê–ô–õ–û–í ===');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${Object.keys(customAudioFiles).length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤`);
    
    const acceptanceAudioFiles = Object.entries(customAudioFiles)
      .filter(([key]) => key.toLowerCase().includes('acceptance') || 
                         key.toLowerCase().includes('–ø—Ä–∏–µ–º–∫–∞') ||
                         key.toLowerCase().includes('scan') ||
                         key.toLowerCase().includes('—Ç–æ–≤–∞—Ä'));
    
    console.log(`üéØ –§–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏: ${acceptanceAudioFiles.length}`);
    
    const generatedFunctions = [];
    
    for (const [audioKey, audioUrl] of acceptanceAudioFiles) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${audioKey}`);
        const transcription = await transcribeAudio(audioKey, audioUrl);
        const functionInfo = createFunctionFromTranscription(audioKey, transcription);
        
        setAudioTranscriptions(prev => ({...prev, [audioKey]: transcription}));
        generatedFunctions.push(functionInfo);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${audioKey}:`, error);
      }
    }
    
    console.log('\nüéâ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${generatedFunctions.length}`);
    console.log('üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:');
    generatedFunctions.forEach((func, index) => {
      console.log(`  ${index + 1}. ${func.functionName}() - ${func.description}`);
    });
    
    setIsAnalyzing(false);
    return generatedFunctions;
  };

  if (Object.keys(audioTranscriptions).length === 0) {
    return null;
  }

  return (
    <div className="bg-white rounded-lg p-6 mb-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
        üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
        <span className="ml-2 text-sm bg-purple-100 text-purple-600 px-2 py-1 rounded-full">
          {Object.keys(audioTranscriptions).length} —Ñ–∞–π–ª–æ–≤
        </span>
      </h3>
      
      <div className="grid gap-3">
        {Object.entries(audioTranscriptions).map(([audioKey, transcription]) => {
          const actionType = getActionTypeFromKey(audioKey);
          const actionEmoji = {
            'scanning': 'üîç',
            'acceptance': '‚úÖ', 
            'damage': '‚ö†Ô∏è',
            'error': '‚ùå',
            'bulk_operation': 'üì¶',
            'general': 'üîä'
          }[actionType] || 'üîä';
          
          return (
            <div key={audioKey} className="bg-gray-50 rounded-lg p-4 border">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <span className="text-lg mr-2">{actionEmoji}</span>
                    <span className="font-semibold text-gray-800">{audioKey}</span>
                    <span className="ml-2 text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full">
                      {actionType}
                    </span>
                  </div>
                  <p className="text-gray-600 mb-3 italic">"{transcription}"</p>
                  <div className="flex gap-2">
                    <Button 
                      size="sm"
                      onClick={() => playAcceptanceAudio(actionType)}
                      variant="outline"
                      className="text-xs px-3 py-1"
                    >
                      üîä –¢–µ—Å—Ç
                    </Button>
                    
                    {actionType === 'acceptance' && (
                      <Button 
                        size="sm"
                        onClick={() => {
                          if (acceptanceItems.length > 0) {
                            changeItemStatus(acceptanceItems[0].id, 'accepted');
                          }
                          playAcceptanceAudio('accepted');
                        }}
                        className="bg-purple-500 hover:bg-purple-600 text-white text-xs px-3 py-1"
                      >
                        ‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
      
      <div className="mt-6 pt-4 border-t">
        <Button 
          onClick={() => {
            console.log('\nüéØ === –í–ï–°–¨ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î –§–£–ù–ö–¶–ò–ô ===');
            Object.entries(audioTranscriptions).forEach(([audioKey, transcription]) => {
              const functionName = audioKey.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
              const actionType = getActionTypeFromKey(audioKey);
              const code = generateFunctionCode(functionName, transcription, actionType);
              console.log(code);
            });
            console.log('\n‚úÖ –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å!');
          }}
          variant="outline"
          className="w-full py-2"
        >
          üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
        </Button>
        
        <Button 
          onClick={analyzeAllAudioFiles}
          disabled={isAnalyzing}
          variant="outline"
          className="px-6 py-3 mt-4 w-full"
        >
          {isAnalyzing ? (
            <>üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ...</>
          ) : (
            <>üé§ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã</>
          )}
        </Button>
      </div>
    </div>
  );
};

export default AcceptanceAnalyzer;