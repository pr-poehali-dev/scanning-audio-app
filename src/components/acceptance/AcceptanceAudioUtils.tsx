import { AcceptanceAudioUtilsProps } from './AcceptanceTypes';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏–µ–º–∫–∏

export const createAcceptanceAudioUtils = ({ playAudio, customAudioFiles }: AcceptanceAudioUtilsProps) => {
  
  // üîä –û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏ –≤ –ø—Ä–∏–µ–º–∫–µ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ –≤—ã–¥–∞—á–µ)
  const playCellAudio = async (cellNumber: string) => {
    console.log(`üîä === –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ô–ö–ò –í –ü–†–ò–ï–ú–ö–ï: ${cellNumber} ===`);
    
    const cellSearchOrder = [
      'cell-number',        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
      cellNumber,           // –¢–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      `cell-${cellNumber}`, // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cell
      `—è—á–µ–π–∫–∞-${cellNumber}`, // –†—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
      `—è—á–µ–π–∫–∞_${cellNumber}`, // –†—É—Å—Å–∫–∏–π —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
      `acceptance-cell-${cellNumber}`, // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
      `acceptance-—è—á–µ–π–∫–∞-${cellNumber}` // –†—É—Å—Å–∫–∏–π –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
    ];
    
    let cellAudioPlayed = false;
    console.log(`üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:`, cellSearchOrder);
    
    for (const audioKey of cellSearchOrder) {
      if (customAudioFiles[audioKey]) {
        try {
          console.log(`üéµ –ù–ê–ô–î–ï–ù–û –ò –í–û–°–ü–†–û–ò–ó–í–û–î–ò–¢–°–Ø: "${audioKey}"`);
          const audio = new Audio(customAudioFiles[audioKey]);
          
          const playPromise = new Promise((resolve, reject) => {
            audio.onended = resolve;
            audio.onerror = reject;
            audio.oncanplaythrough = () => {
              audio.play().then(resolve).catch(reject);
            };
          });
          
          await playPromise;
          console.log(`üéµ ‚úÖ –Ø–ß–ï–ô–ö–ê ${cellNumber} –û–ó–í–£–ß–ï–ù–ê –í –ü–†–ò–ï–ú–ö–ï: "${audioKey}"`);
          cellAudioPlayed = true;
          break;
          
        } catch (error) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø "${audioKey}":`, error);
          continue;
        }
      } else {
        console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù: "${audioKey}"`);
      }
    }
    
    if (!cellAudioPlayed) {
      console.warn(`‚ö†Ô∏è –Ø–ß–ï–ô–ö–ê ${cellNumber} –ù–ï –û–ó–í–£–ß–ï–ù–ê - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!`);
      console.log('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤:');
      console.log('  1. "cell-number" - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –¥–ª—è –í–°–ï–• —è—á–µ–µ–∫');
      console.log(`  2. "${cellNumber}" - –æ–∑–≤—É—á–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
    }
    
    return cellAudioPlayed;
  };

  // üîä –û–∑–≤—É—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏–µ–º–∫–∏
  const playAcceptanceAudio = async (action: string, itemData?: any) => {
    console.log(`üîä === –û–ó–í–£–ß–ö–ê –î–ï–ô–°–¢–í–ò–Ø –ü–†–ò–ï–ú–ö–ò: ${action} ===`, itemData);
    console.log(`üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã:`, Object.keys(customAudioFiles));
    
    const actionAudios: Record<string, string[]> = {
      // –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–µ–º–∫–∏
      'box-accepted': ['–∫–æ—Ä–æ–±–∫–∞-–ø—Ä–∏–Ω—è—Ç–∞', 'receiving-–∫–æ—Ä–æ–±–∫–∞-–ø—Ä–∏–Ω—è—Ç–∞', 'box-accepted'],
      'scan-again': ['–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ-–µ—â–µ-—Ä–∞–∑', 'receiving-–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ-–µ—â–µ-—Ä–∞–∑', 'scan-again'],
      'continue-acceptance': ['–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ-–ø—Ä–∏–µ–º–∫—É', 'receiving-–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ-–ø—Ä–∏–µ–º–∫—É', 'continue-acceptance'],
      'item-for-pvz': ['—Ç–æ–≤–∞—Ä-–¥–ª—è-–ø–≤–∑', 'receiving-—Ç–æ–≤–∞—Ä-–¥–ª—è-–ø–≤–∑', 'item-for-pvz'],
      'scan-next': ['–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ-—Å–ª–µ–¥—É—é—â–∏–π-—Ç–æ–≤–∞—Ä', 'receiving-–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ-—Å–ª–µ–¥—É—é—â–∏–π-—Ç–æ–≤–∞—Ä', 'scan-next'],
      'priority-order': ['–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π-–∑–∞–∫–∞–∑', 'receiving-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π-–∑–∞–∫–∞–∑', 'priority-order'],
      'already-accepted': ['–ø–æ–≤—Ç–æ—Ä-—Ç–æ–≤–∞—Ä-—É–∂–µ-–ø—Ä–∏–Ω—è—Ç', 'receiving-–ø–æ–≤—Ç–æ—Ä-—Ç–æ–≤–∞—Ä-—É–∂–µ-–ø—Ä–∏–Ω—è—Ç', 'already-accepted'],
      'box-scanned': ['–∫–æ—Ä–æ–±–∫–∞-–ø—Ä–∏–Ω—è—Ç–∞', '–∫–æ—Ä–æ–±–∫–∞-–æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞', 'receiving-–∫–æ—Ä–æ–±–∫–∞-–ø—Ä–∏–Ω—è—Ç–∞', 'receiving-–∫–æ—Ä–æ–±–∫–∞-–æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞', 'box-scanned'],
      // –°—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      'item_scanned': ['acceptance-–¢–æ–≤–∞—Ä –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω', 'acceptance-scan-success', 'scan-success'],
      'accepted': ['acceptance-–ü—Ä–∏–Ω—è—Ç–æ –≤ –ü–í–ó', 'accepted-success', '—Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç'],
      'bulk_accepted': ['acceptance-–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—è—Ç—ã', 'acceptance-bulk-success'],
      'damaged': ['acceptance-–¢–æ–≤–∞—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω', 'damaged-item'],
      'rejected': ['acceptance-–û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∫–∏', 'rejection-sound', 'error'],
      'start_scanning': ['acceptance-–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'scan-start']
    };

    const searchKeys = actionAudios[action] || [action];
    let audioPlayed = false;
    
    console.log(`üîç –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:`, searchKeys);
    
    for (const audioKey of searchKeys) {
      console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á: "${audioKey}"`);
      if (customAudioFiles[audioKey]) {
        try {
          console.log(`üéµ –í–û–°–ü–†–û–ò–ó–í–û–ñ–£ –î–ï–ô–°–¢–í–ò–ï –ü–†–ò–ï–ú–ö–ò: "${audioKey}"`);
          const audio = new Audio(customAudioFiles[audioKey]);
          
          // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å Promise
          const playPromise = new Promise((resolve, reject) => {
            audio.onended = resolve;
            audio.onerror = reject;
            audio.oncanplaythrough = () => {
              audio.play().then(resolve).catch(reject);
            };
          });
          
          await playPromise;
          console.log(`üéµ ‚úÖ –î–ï–ô–°–¢–í–ò–ï –û–ó–í–£–ß–ï–ù–û: "${audioKey}"`);
          audioPlayed = true;
          break;
        } catch (error) {
          console.error(`‚ùå –û–®–ò–ë–ö–ê –û–ó–í–£–ß–ö–ò "${audioKey}":`, error);
          continue;
        }
      } else {
        console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù: "${audioKey}"`);
      }
    }
    
    if (!audioPlayed) {
      console.warn(`‚ö†Ô∏è –î–ï–ô–°–¢–í–ò–ï "${action}" –ù–ï –û–ó–í–£–ß–ï–ù–û - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù!`);
      console.log('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤:', searchKeys);
      
      // –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
      try {
        playAudio(action);
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ playAudio: "${action}"`);
        audioPlayed = true;
      } catch (error) {
        console.log(`‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞`);
      }
    }
    
    return audioPlayed;
  };

  return {
    playCellAudio,
    playAcceptanceAudio
  };
};