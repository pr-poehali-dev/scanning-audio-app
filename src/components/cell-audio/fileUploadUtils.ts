import { audioManager } from '@/utils/simpleAudioManager';
import { objectUrlAudioManager } from '@/utils/objectUrlAudioManager';
import { saveCellAudioToMainSystem } from '@/utils/cellAudioIntegration';

export const extractCellNumberFromFileName = (fileName: string): string => {
  const lowerFileName = fileName.toLowerCase();
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: ${fileName}`);
  
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const patterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    /(?:cell[-_]?)([a-z]\d+)/i,           // cell-A1, cell_A1, cellA1
    /(?:—è—á–µ–π–∫–∞[-_]?)([a-z]\d+)/i,         // —è—á–µ–π–∫–∞-A1, —è—á–µ–π–∫–∞_A1
    /^([a-z]\d+)/i,                       // A1.mp3, B15.wav
    /(?:–Ω–æ–º–µ—Ä[-_]?)(\d+)/i,               // –Ω–æ–º–µ—Ä-126, –Ω–æ–º–µ—Ä_126
    /(?:number[-_]?)(\d+)/i,              // number-126, number_126
    /(?:cell[-_]?)(\d+)/i,                // cell-126, cell_126
    /(?:—è—á–µ–π–∫–∞[-_]?)(\d+)/i,              // —è—á–µ–π–∫–∞-126, —è—á–µ–π–∫–∞_126
    /^(\d+)/,                             // 126.mp3, 999.wav
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    /(?:box[-_]?)([a-z]\d+)/i,            // box-A1, box_A1
    /(?:slot[-_]?)([a-z]\d+)/i,           // slot-A1, slot_A1
    /(?:compartment[-_]?)([a-z]\d+)/i,    // compartment-A1
    /(?:locker[-_]?)([a-z]\d+)/i,         // locker-A1
    
    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —è—á–µ–µ–∫
    /(?:box[-_]?)(\d+)/i,                 // box-126, box_126
    /(?:slot[-_]?)(\d+)/i,                // slot-126, slot_126
    /(?:compartment[-_]?)(\d+)/i,         // compartment-126
    /(?:locker[-_]?)(\d+)/i,              // locker-126
  ];
  
  // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
  for (const pattern of patterns) {
    const match = lowerFileName.match(pattern);
    if (match && match[1]) {
      const cellNumber = match[1].toUpperCase();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ "${cellNumber}" –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${pattern}`);
      return cellNumber;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –ª—é–±—ã–µ –±—É–∫–≤—ã+—Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã
  // –ò—â–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤–∞+—Ü–∏—Ñ—Ä—ã
  const letterNumberMatch = lowerFileName.match(/([a-z]\d+)/i);
  if (letterNumberMatch) {
    const cellNumber = letterNumberMatch[1].toUpperCase();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ "${cellNumber}" –∫–∞–∫ –±—É–∫–≤–∞+—Ü–∏—Ñ—Ä—ã`);
    return cellNumber;
  }
  
  // –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã
  const numberMatch = lowerFileName.match(/(\d+)/);
  if (numberMatch) {
    const cellNumber = numberMatch[1];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ "${cellNumber}" –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–π`);
    return cellNumber;
  }
  
  return '';
};

export const saveCellAudioToAllSystems = async (cellNumber: string, file: File): Promise<boolean> => {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}...`);
  
  // –ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ wb-audio-files (–∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–∑–≤—É—á–∫–∏)
  console.log(`üíæ [–ì–õ–ê–í–ù–ê–Ø] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...`);
  const mainSystemSuccess = await saveCellAudioToMainSystem(cellNumber, file);
  
  // –†–ï–ó–ï–†–í–ù–´–ï –°–ò–°–¢–ï–ú–´
  console.log(`üíæ [–†–ï–ó–ï–†–í] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —á–µ—Ä–µ–∑ Object URL...`);
  const objectUrlSuccess = await objectUrlAudioManager.saveCellAudio(cellNumber, file);
  
  console.log(`üíæ [–†–ï–ó–ï–†–í] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —á–µ—Ä–µ–∑ Data URL –º–µ–Ω–µ–¥–∂–µ—Ä...`);
  const dataUrlSuccess = await audioManager.saveCellAudio(cellNumber, file);
  
  const hasAnySuccess = mainSystemSuccess || objectUrlSuccess || dataUrlSuccess;
  
  if (hasAnySuccess) {
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`);
    console.log(`   –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${mainSystemSuccess ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Object URL: ${objectUrlSuccess ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Data URL: ${dataUrlSuccess ? '‚úÖ' : '‚ùå'}`);
  } else {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã`);
  }
  
  return hasAnySuccess;
};

export const handleFileUpload = async (
  files: FileList,
  setUploading: (uploading: boolean) => void,
  setUploadedCells: React.Dispatch<React.SetStateAction<string[]>>,
  handleTestCell: (cellNumber: string) => void
): Promise<void> => {
  setUploading(true);
  const successCells: string[] = [];
  
  try {
    for (const file of Array.from(files)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
      if (!file.type.startsWith('audio/')) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª ${file.name}: –Ω–µ –∞—É–¥–∏–æ`);
        continue;
      }
      
      // –£–ú–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ù–û–ú–ï–†–ê –Ø–ß–ï–ô–ö–ò –ò–ó –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
      const cellNumber = extractCellNumberFromFileName(file.name);
      
      if (!cellNumber) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: ${file.name}`);
        console.warn(`üí° –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç: A1.mp3, cell-126.mp3, –∏–ª–∏ 999.mp3`);
        continue;
      }
      
      const success = await saveCellAudioToAllSystems(cellNumber, file);
      
      if (success) {
        successCells.push(cellNumber);
      }
    }
    
    setUploadedCells(prev => [...new Set([...prev, ...successCells])]);
    
    if (successCells.length > 0) {
      console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCells.length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const message = `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCells.length} —Ñ–∞–π–ª–æ–≤!\n\n–Ø—á–µ–π–∫–∏: ${successCells.join(', ')}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É?`;
      if (window.confirm(message)) {
        handleTestCell(successCells[0]);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
  } finally {
    setUploading(false);
  }
};