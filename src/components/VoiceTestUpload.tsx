import React, { useState } from 'react';
import Icon from '@/components/ui/icon';
import { voiceAssistantManager } from '@/utils/voiceAssistantManager';

interface VoiceTestUploadProps {
  isOpen?: boolean;
  onClose?: () => void;
}

export const VoiceTestUpload: React.FC<VoiceTestUploadProps> = ({ 
  isOpen = false, 
  onClose 
}) => {
  const [uploading, setUploading] = useState(false);
  const [result, setResult] = useState<string>('');

  const handleTestUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setUploading(true);
    setResult('');

    try {
      console.log('üß™ [TEST] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', file);
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ error_sound
      const success = await voiceAssistantManager.saveNewSound('error_sound', file);
      
      if (success) {
        setResult(`‚úÖ –§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ error_sound!`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        const hasSound = voiceAssistantManager.hasSound('error_sound');
        const loadedSounds = voiceAssistantManager.getLoadedSounds();
        
        console.log('üîç [TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:');
        console.log('- hasSound:', hasSound);
        console.log('- loadedSounds:', loadedSounds);
        
        if (hasSound) {
          setResult(prev => prev + '\n‚úÖ –ó–≤—É–∫ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        } else {
          setResult(prev => prev + '\n‚ùå –ó–≤—É–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        }
      } else {
        setResult(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ "${file.name}"`);
      }
    } catch (error) {
      console.error('‚ùå [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      setResult(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setUploading(false);
      // –û—á–∏—â–∞–µ–º input
      e.target.value = '';
    }
  };

  const handleTestPlay = async () => {
    try {
      console.log('üîä [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ error_sound...');
      const success = await voiceAssistantManager.playNewAssistantSound('error_sound');
      
      if (success) {
        setResult(prev => prev + '\nüîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        setResult(prev => prev + '\n‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('‚ùå [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
      setResult(prev => prev + `\n‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${error.message}`);
    }
  };

  const handleClearTest = () => {
    voiceAssistantManager.removeSound('error_sound');
    setResult('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ —É–¥–∞–ª–µ–Ω');
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">
            –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–æ–≤
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <Icon name="X" size={20} />
          </button>
        </div>

        <div className="p-6">
          {/* –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ */}
          <div className="mb-6">
            <h3 className="font-medium text-gray-900 mb-3">–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏</h3>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <input
                type="file"
                accept="audio/*"
                onChange={handleTestUpload}
                className="hidden"
                id="test-audio-file"
                disabled={uploading}
              />
              <label
                htmlFor="test-audio-file"
                className={`inline-flex items-center px-4 py-2 rounded-lg cursor-pointer ${
                  uploading
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                {uploading ? (
                  <>
                    <Icon name="Loader2" size={16} className="animate-spin mr-2" />
                    –ó–∞–≥—Ä—É–∑–∫–∞...
                  </>
                ) : (
                  <>
                    <Icon name="Upload" size={16} className="mr-2" />
                    –í—ã–±—Ä–∞—Ç—å MP3 —Ñ–∞–π–ª
                  </>
                )}
              </label>
              <p className="text-sm text-gray-500 mt-2">
                –§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ error_sound
              </p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <div className="flex space-x-3 mb-6">
            <button
              onClick={handleTestPlay}
              className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center justify-center"
            >
              <Icon name="Play" size={16} className="mr-2" />
              –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            </button>
            <button
              onClick={handleClearTest}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
            >
              <Icon name="Trash2" size={16} />
            </button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          {result && (
            <div className="bg-gray-50 rounded-lg p-4 border">
              <h4 className="font-medium text-gray-900 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</h4>
              <pre className="text-sm text-gray-700 whitespace-pre-wrap font-mono">
                {result}
              </pre>
            </div>
          )}

          {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ localStorage */}
          <div className="mt-6 bg-yellow-50 rounded-lg p-4">
            <h4 className="font-medium text-yellow-800 mb-2">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ localStorage</h4>
            <button
              onClick={() => {
                const key = 'wb-new-voice-sounds';
                const data = localStorage.getItem(key);
                console.log(`üîç [DIAG] localStorage["${key}"]`, data);
                
                let diagnostic = `–ö–ª—é—á: ${key}\n`;
                if (data) {
                  diagnostic += `–†–∞–∑–º–µ—Ä: ${data.length} —Å–∏–º–≤–æ–ª–æ–≤\n`;
                  try {
                    const parsed = JSON.parse(data);
                    diagnostic += `–ó–≤—É–∫–∏: ${Object.keys(parsed).join(', ')}\n`;
                  } catch (e) {
                    diagnostic += `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}\n`;
                  }
                } else {
                  diagnostic += '–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n';
                }
                
                setResult(diagnostic);
              }}
              className="text-sm px-3 py-1 bg-yellow-600 text-white rounded hover:bg-yellow-700"
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å localStorage
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};