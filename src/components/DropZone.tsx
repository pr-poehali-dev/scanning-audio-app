import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';

interface DropZoneProps {
  onFolderDrop: (event: React.ChangeEvent<HTMLInputElement>) => void;
  isUploading: boolean;
  uploadProgress: number;
}

export const DropZone = ({ onFolderDrop, isUploading, uploadProgress }: DropZoneProps) => {
  const [isDragOver, setIsDragOver] = useState(false);
  const folderInputRef = useRef<HTMLInputElement>(null);

  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);

    const items = Array.from(e.dataTransfer.items);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const folderItems = items.filter(item => 
      item.kind === 'file' && item.webkitGetAsEntry()?.isDirectory
    );

    if (folderItems.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π event –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
      const files: File[] = [];
      
      const processEntry = (entry: FileSystemEntry) => {
        if (entry.isFile) {
          const fileEntry = entry as FileSystemFileEntry;
          fileEntry.file((file: File) => {
            if (file.type.startsWith('audio/')) {
              files.push(file);
            }
          });
        } else if (entry.isDirectory) {
          const dirEntry = entry as FileSystemDirectoryEntry;
          const reader = dirEntry.createReader();
          reader.readEntries((entries) => {
            entries.forEach(processEntry);
          });
        }
      };

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
      const firstFolder = folderItems[0].webkitGetAsEntry();
      if (firstFolder) {
        processEntry(firstFolder);
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º event
        setTimeout(() => {
          const fileList = new DataTransfer();
          files.forEach(file => fileList.items.add(file));
          
          const syntheticEvent = {
            target: { files: fileList.files }
          } as React.ChangeEvent<HTMLInputElement>;
          
          onFolderDrop(syntheticEvent);
        }, 100);
      }
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏');
    }
  };

  const handleButtonClick = () => {
    folderInputRef.current?.click();
  };

  return (
    <>
      <div 
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200 ${
          isDragOver 
            ? 'border-purple-500 bg-purple-100' 
            : 'border-purple-300 bg-purple-50'
        } ${isUploading ? 'opacity-50' : ''}`}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <div className="flex flex-col items-center space-y-4">
          {/* –ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏ */}
          <div className={`transition-transform duration-200 ${isDragOver ? 'scale-110' : ''}`}>
            <Icon 
              name="FolderOpen" 
              className={`h-16 w-16 ${isDragOver ? 'text-purple-600' : 'text-purple-400'}`} 
            />
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="space-y-2">
            <h3 className={`text-xl font-semibold ${isDragOver ? 'text-purple-700' : 'text-purple-800'}`}>
              {isDragOver ? 'üìÅ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø–∞–ø–∫—É –∑–¥–µ—Å—å' : 'üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–∫–∏ —Å –æ–∑–≤—É—á–∫–æ–π'}
            </h3>
            <p className="text-purple-600 max-w-md">
              –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            </p>
          </div>

          {/* –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã */}
          <div className="text-sm text-purple-500 bg-white px-4 py-2 rounded-full border border-purple-200">
            üéµ MP3 ‚Ä¢ WAV ‚Ä¢ OGG ‚Ä¢ M4A ‚Ä¢ AAC
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ */}
          <Button 
            onClick={handleButtonClick}
            disabled={isUploading}
            className="bg-purple-500 hover:bg-purple-600 text-white font-medium px-6 py-2"
            size="lg"
          >
            {isUploading ? (
              <>
                <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...
              </>
            ) : (
              <>
                <Icon name="Upload" className="w-4 h-4 mr-2" />
                –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
              </>
            )}
          </Button>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {isUploading && (
            <div className="w-full max-w-md space-y-2">
              <Progress value={uploadProgress} className="bg-purple-100" />
              <div className="text-sm text-purple-600">
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ... {Math.round(uploadProgress)}%
              </div>
            </div>
          )}

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="text-xs text-purple-400 max-w-lg">
            üí° –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 
            –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "—è—á–µ–π–∫–∞", "—Å–∫–∏–¥–∫–∞", "–∫–∞–º–µ—Ä–∞", "–æ—Ü–µ–Ω–∏—Ç–µ", "–ø—Ä–∏–µ–º–∫–∞", "–≤–æ–∑–≤—Ä–∞—Ç"
          </div>
        </div>
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ */}
      <input
        ref={folderInputRef}
        type="file"
        webkitdirectory=""
        multiple
        accept="audio/*"
        onChange={onFolderDrop}
        className="hidden"
      />
    </>
  );
};