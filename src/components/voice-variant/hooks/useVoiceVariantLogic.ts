import { useState, useRef } from 'react';

interface VoiceVariantInfo {
  count: number;
  exists: boolean;
  cells: string[];
}

export const useVoiceVariantLogic = () => {
  const [selectedVariant, setSelectedVariant] = useState<'standard' | 'alternative'>('standard');
  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result as string;
        resolve(result);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsUploading(true);
    const filesArray = Array.from(files);
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º ${filesArray.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${selectedVariant}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const storageKey = `wb-voice-${selectedVariant}-permanent`;
    let audioData: Record<string, string> = {};
    
    try {
      const existing = localStorage.getItem(storageKey);
      if (existing) {
        audioData = JSON.parse(existing);
      }
    } catch (error) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞:', selectedVariant);
    }

    let successCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (let i = 0; i < filesArray.length; i++) {
      const file = filesArray[i];
      const fileName = file.name;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const cellMatch = fileName.match(/(\d+)/);
      if (!cellMatch) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: ${fileName}`);
        continue;
      }
      
      const cellNumber = cellMatch[1];
      setUploadProgress(prev => ({ ...prev, [cellNumber]: 0 }));

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!file.type.startsWith('audio/')) {
          console.warn(`‚ö†Ô∏è –§–∞–π–ª ${fileName} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º`);
          setUploadProgress(prev => ({ ...prev, [cellNumber]: -1 }));
          continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        const base64 = await fileToBase64(file);
        audioData[cellNumber] = base64;
        successCount++;
        
        setUploadProgress(prev => ({ ...prev, [cellNumber]: 100 }));
        console.log(`‚úÖ –§–∞–π–ª ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}:`, error);
        setUploadProgress(prev => ({ ...prev, [cellNumber]: -1 }));
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem(storageKey, JSON.stringify(audioData));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π
    const currentActiveVariant = localStorage.getItem('wb-active-voice-variant');
    if (!currentActiveVariant || currentActiveVariant === selectedVariant) {
      localStorage.setItem('wb-active-voice-variant', selectedVariant);
      console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${selectedVariant}`);
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${selectedVariant}`);
    setIsUploading(false);
    
    // –û—á–∏—â–∞–µ–º input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }

    if (successCount > 0) {
      alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –æ–∑–≤—É—á–µ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${selectedVariant}"`);
    }
  };

  const getVariantInfo = (variant: 'standard' | 'alternative'): VoiceVariantInfo => {
    const storageKey = `wb-voice-${variant}-permanent`;
    try {
      const data = localStorage.getItem(storageKey);
      if (data) {
        const parsed = JSON.parse(data);
        const count = Object.keys(parsed).filter(key => /^\d+$/.test(key)).length;
        const cells = Object.keys(parsed).filter(key => /^\d+$/.test(key)).sort((a, b) => parseInt(a) - parseInt(b));
        return { count, exists: count > 0, cells };
      }
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${variant}:`, error);
    }
    return { count: 0, exists: false, cells: [] };
  };

  const setActiveVariant = async (variant: 'standard' | 'alternative') => {
    try {
      const { activateVoiceVariant } = await import('@/utils/bulletproofAudio');
      const success = activateVoiceVariant(variant);
      
      if (success) {
        console.log(`üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${variant}`);
        alert(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏: ${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}"`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞');
    }
  };

  const clearVariant = (variant: 'standard' | 'alternative') => {
    if (confirm(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–∑–≤—É—á–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}"?`)) {
      const storageKey = `wb-voice-${variant}-permanent`;
      localStorage.removeItem(storageKey);
      
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const activeVariant = localStorage.getItem('wb-active-voice-variant');
      if (activeVariant === variant) {
        localStorage.removeItem('wb-active-voice-variant');
      }
      
      alert(`üßπ –í–∞—Ä–∏–∞–Ω—Ç "${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}" –æ—á–∏—â–µ–Ω`);
    }
  };

  const testVariant = async (variant: 'standard' | 'alternative') => {
    const info = getVariantInfo(variant);
    if (info.cells.length === 0) {
      alert('‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testCell = info.cells[0];
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      const originalActive = localStorage.getItem('wb-active-voice-variant');
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ bulletproof —Å–∏—Å—Ç–µ–º—É
      const { activateVoiceVariant, playCellAudio } = await import('@/utils/bulletproofAudio');
      
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ${variant} —Å —è—á–µ–π–∫–æ–π ${testCell}`);
      const activated = activateVoiceVariant(variant);
      
      if (!activated) {
        alert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç "${variant}"`);
        return;
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      const success = await playCellAudio(testCell);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      if (originalActive) {
        activateVoiceVariant(originalActive);
      } else {
        localStorage.removeItem('wb-active-voice-variant');
      }
      
      if (success) {
        alert(`‚úÖ –¢–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}" —É—Å–ø–µ—à–µ–Ω! –Ø—á–µ–π–∫–∞ ${testCell} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${testCell} –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}"`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∑–≤—É—á–∫–∏');
    }
  };

  return {
    selectedVariant,
    setSelectedVariant,
    uploadProgress,
    isUploading,
    fileInputRef,
    handleFileSelect,
    getVariantInfo,
    setActiveVariant,
    clearVariant,
    testVariant
  };
};