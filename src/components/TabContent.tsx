import Icon from '@/components/ui/icon';
import DeliveryInterface from './DeliveryInterface';
import AcceptanceTab from './AcceptanceTab';
import ReturnsTab from './ReturnsTab';
import { AudioTestButton } from './AudioTestButton';
import { findOrderByPhone } from '@/data/mockOrders';

interface TabContentProps {
  activeTab: string;
  phoneNumber: string;
  setPhoneNumber: (value: string) => void;
  isScanning: boolean;
  scannedData: string;
  onQRScan: () => void;
  onPhoneSubmit: (digits: string) => void;
  deliveryStep: 'initial' | 'client-scanned' | 'product-scanned' | 'completed';
  isProductScanned: boolean;
  onCellClick: (cellNumber: string) => void;
  onScanProduct: () => void;
  onDeliverProduct: () => void;
  currentOrder?: any;
  playAudio?: (audioName: string) => void;
  customAudioFiles?: Record<string, string>;
}

const TabContent = ({
  activeTab,
  phoneNumber,
  setPhoneNumber,
  isScanning,
  scannedData,
  onQRScan,
  onPhoneSubmit,
  deliveryStep,
  isProductScanned,
  onCellClick,
  onScanProduct,
  onDeliverProduct,
  currentOrder,
  playAudio,
  customAudioFiles
}: TabContentProps) => {
  if (activeTab === 'delivery') {
    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–¥–∞—á–∏  
    if (deliveryStep === 'client-scanned' || deliveryStep === 'product-scanned' || deliveryStep === 'completed') {
      return (
        <DeliveryInterface
          order={currentOrder}
          onCellClick={onCellClick}
          onScanProduct={onScanProduct}
          onDeliverProduct={onDeliverProduct}
          isProductScanned={isProductScanned}
          scannedData={scannedData}
          deliveryStep={deliveryStep}
        />
      );
    }

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    return (
      <div className="max-w-md mx-auto text-center space-y-8">
        {/* QR Scanner */}
        <div className="space-y-4">
          <h2 className="text-lg font-medium text-gray-700">
            –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞
          </h2>
          
          <div 
            className={`relative w-48 h-48 mx-auto transition-all duration-300 ${
              isScanning ? 'animate-pulse' : ''
            }`}
            onClick={onQRScan}
            style={{ cursor: 'pointer' }}
          >
            <img 
              src="https://cdn.poehali.dev/files/f9ab2ff9-989f-470e-8af1-67520cb6feec.png"
              alt="QR Scanner"
              className="w-full h-full object-contain"
            />
            {isScanning && (
              <div className="absolute inset-0 bg-purple-100 bg-opacity-80 rounded-xl flex items-center justify-center">
                <div className="flex flex-col items-center gap-2">
                  <div className="w-6 h-6 border-2 border-purple-600 border-t-transparent rounded-full animate-spin" />
                  <span className="text-purple-600 text-sm font-medium">–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞...</span>
                </div>
              </div>
            )}
          </div>
          

        </div>

        {/* Divider */}
        <div className="flex items-center gap-4">
          <div className="flex-1 h-px bg-gray-300" />
          <span className="text-gray-500 text-sm font-medium">–ò–õ–ò</span>
          <div className="flex-1 h-px bg-gray-300" />
        </div>

        {/* Phone Input */}
        <div className="space-y-4">
          <h3 className="text-base font-medium text-gray-700">
            –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
          </h3>
          
          <div className="space-y-2">
            <input
              type="text"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value.replace(/\D/g, '').slice(0, 4))}
              placeholder="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞"
              className="w-full px-4 py-3 text-lg text-center border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none"
              maxLength={4}
            />
            
            <button
              onClick={async () => {
                console.log(`üîò === –ö–ù–û–ü–ö–ê "–ù–ê–ô–¢–ò –ó–ê–ö–ê–ó" –ù–ê–ñ–ê–¢–ê! ===`);
                console.log(`üì± –í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä: "${phoneNumber}"`);
                console.log(`üîç –î–ª–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: ${phoneNumber.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                
                if (phoneNumber.length === 0) {
                  console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞!');
                  return;
                }
                
                console.log('üîé –í–´–ó–´–í–ê–ï–ú findOrderByPhone...');
                const order = findOrderByPhone(phoneNumber);
                console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢ findOrderByPhone:', order);
                
                if (order) {
                  console.log(`‚úÖ === –ó–ê–ö–ê–ó –ù–ê–ô–î–ï–ù! ===`);
                  console.log(`üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${order.customerName}`);
                  console.log(`üè† –Ø—á–µ–π–∫–∞: ${order.cellNumber}`);
                  console.log(`üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑–∞: ${order.phone}`);
                  
                  // –û–∑–≤—É—á–∏–≤–∞–µ–º —è—á–µ–π–∫—É
                  console.log(`üîä === –ù–ê–ß–ò–ù–ê–ï–ú –û–ó–í–£–ß–ö–£ –Ø–ß–ï–ô–ö–ò ${order.cellNumber} ===`);
                  try {
                    const { playCellAudio } = await import('@/utils/cellAudioPlayer');
                    console.log('üì¶ playCellAudio –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    const success = await playCellAudio(order.cellNumber);
                    console.log(`üéµ === –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ó–í–£–ß–ö–ò: ${success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'} ===`);
                    
                    if (!success) {
                      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏...');
                      const { audioManager } = await import('@/utils/simpleAudioManager');
                      const availableCells = audioManager.getCellsWithAudio();
                      console.log(`üìã –í—Å–µ–≥–æ –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫: ${availableCells.length}`);
                      console.log(`üìã –ü–µ—Ä–≤—ã–µ 10 —è—á–µ–µ–∫:`, availableCells.slice(0, 10));
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —è—á–µ–π–∫–∏
                      const similarCells = availableCells.filter(cell => 
                        cell.includes(order.cellNumber) || order.cellNumber.includes(cell)
                      );
                      if (similarCells.length > 0) {
                        console.log(`üîç –ü–æ—Ö–æ–∂–∏–µ —è—á–µ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:`, similarCells);
                      }
                    }
                    
                  } catch (error) {
                    console.error('‚ùå === –û–®–ò–ë–ö–ê –ü–†–ò –û–ó–í–£–ß–ö–ï ===', error);
                    console.error('üìç –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏:', error.stack);
                  }
                  
                } else {
                  console.log(`‚ùå === –ó–ê–ö–ê–ó –ù–ï –ù–ê–ô–î–ï–ù ===`);
                  console.log(`üì± –ò—Å–∫–∞–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É: "${phoneNumber}"`);
                }
                
                console.log('üèÅ === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ò–°–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
                
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                onPhoneSubmit(phoneNumber);
              }}
              disabled={phoneNumber.length !== 4}
              className={`w-full py-3 rounded-lg font-medium transition-colors ${
                phoneNumber.length === 4
                  ? 'bg-purple-600 hover:bg-purple-700 text-white'
                  : 'bg-gray-100 text-gray-400 cursor-not-allowed'
              }`}
            >
              –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑
            </button>
          </div>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∑–≤—É—á–∫–∏ */}
        <AudioTestButton />
      </div>
    );
  }

  if (activeTab === 'acceptance') {
    return (
      <AcceptanceTab 
        playAudio={playAudio || (() => {})} 
        customAudioFiles={customAudioFiles || {}} 
      />
    );
  }

  if (activeTab === 'returns') {
    return (
      <ReturnsTab 
        playAudio={playAudio || (() => {})} 
        customAudioFiles={customAudioFiles || {}} 
      />
    );
  }

  return null;
};

export default TabContent;