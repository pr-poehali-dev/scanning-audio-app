import { useState } from 'react';
import Icon from '@/components/ui/icon';

const AudioTestDebug = () => {
  const [testResult, setTestResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);

  const runFullDiagnostic = async () => {
    setIsLoading(true);
    setTestResult('');
    
    let result = 'üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û –°–ò–°–¢–ï–ú–´:\n\n';
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      result += 'üì¶ –ü–†–û–í–ï–†–ö–ê LOCALSTORAGE:\n';
      const keys = Object.keys(localStorage);
      const audioKeys = keys.filter(k => k.includes('audio') || k.includes('wb-'));
      result += `–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${keys.length}\n`;
      result += `–ê—É–¥–∏–æ –∫–ª—é—á–µ–π: ${audioKeys.length}\n`;
      audioKeys.forEach(key => {
        const size = localStorage.getItem(key)?.length || 0;
        result += `  - ${key}: ${Math.round(size/1024)}KB\n`;
      });
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
      result += '\nüîß –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê:\n';
      try {
        const { audioManager, getStorageInfo, getCellsWithAudio } = await import('@/utils/simpleAudioManager');
        const info = getStorageInfo();
        const cells = getCellsWithAudio();
        
        result += `–§–∞–π–ª–æ–≤: ${info.totalFiles}\n`;
        result += `–†–∞–∑–º–µ—Ä: ${info.totalSize}\n`;
        result += `–Ø—á–µ–µ–∫: ${info.cellsCount}\n`;
        result += `–î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏: ${cells.slice(0, 5).join(', ')}\n`;
        
        // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É
        if (cells.length > 0) {
          const testCell = cells[0];
          result += `\nüéµ –¢–ï–°–¢ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –Ø–ß–ï–ô–ö–ò ${testCell}:\n`;
          const success = await audioManager.playCellAudio(testCell);
          result += success ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢!\n' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢\n';
        }
        
      } catch (error) {
        result += `‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${error.message}\n`;
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
      result += '\nüèóÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–ê–†–û–ô –°–ò–°–¢–ï–ú–´:\n';
      const oldFiles = localStorage.getItem('wb-audio-files');
      if (oldFiles) {
        try {
          const files = JSON.parse(oldFiles);
          const fileKeys = Object.keys(files);
          result += `–§–∞–π–ª–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ: ${fileKeys.length}\n`;
          
          const cellKeys = fileKeys.filter(k => k.includes('cell-') || /^\d+$/.test(k));
          result += `–Ø—á–µ–µ–∫ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ: ${cellKeys.length}\n`;
          
          if (cellKeys.length > 0) {
            const testKey = cellKeys[0];
            const testUrl = files[testKey];
            result += `\nüéµ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø ${testKey}:\n`;
            
            try {
              const audio = new Audio(testUrl);
              await audio.play();
              result += '‚úÖ –ü–†–Ø–ú–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!\n';
              setTimeout(() => audio.pause(), 1000);
            } catch (playError) {
              result += `‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}\n`;
            }
          }
        } catch (parseError) {
          result += `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: ${parseError.message}\n`;
        }
      } else {
        result += '‚ùå –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n';
      }
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
      result += '\nüåê –ü–†–û–í–ï–†–ö–ê –ë–†–ê–£–ó–ï–†–ê:\n';
      result += `User Agent: ${navigator.userAgent}\n`;
      result += `Audio –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${!!(window.Audio)}\n`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if ('permissions' in navigator) {
        try {
          // @ts-ignore
          const permission = await navigator.permissions.query({name: 'autoplay'});
          result += `Autoplay —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${permission.state}\n`;
        } catch (e) {
          result += 'Autoplay –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n';
        }
      }
      
      // 5. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞
      result += '\nüîä –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û –ó–í–£–ö–ê:\n';
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        
        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.2);
        
        result += '‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∑–≤—É–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n';
      } catch (audioError) {
        result += `‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∑–≤—É–∫–∞: ${audioError.message}\n`;
      }
      
    } catch (error) {
      result += `‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}\n`;
    }
    
    setTestResult(result);
    setIsLoading(false);
  };

  const testDirectPlay = async () => {
    const testUrl = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBDmM1fPMeTEGJXzJ8N2PQgkTXrHo7qpYFAhMoj/yo9mOBCl91fLOeFAGJXzI8N2OQwkTXq/o8KFg69oDAWHN8t+QQQkSXrXr7ahVFgdLno/0wnkjBDJ+zPPeiUIJEV2+7vKnUBMGUZzh8KBZEwU3f9H//';
    
    try {
      setTestResult('üéµ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä—è–º–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...\n');
      const audio = new Audio(testUrl);
      await audio.play();
      setTestResult(prev => prev + '‚úÖ –ü—Ä—è–º–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
      setTimeout(() => audio.pause(), 500);
    } catch (error) {
      setTestResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
    }
  };

  return (
    <div className="bg-white rounded-lg border p-4 mb-4">
      <div className="flex items-center gap-2 mb-4">
        <Icon name="Bug" size={20} className="text-red-600" />
        <h3 className="font-semibold">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã</h3>
      </div>
      
      <div className="flex gap-2 mb-4">
        <button
          onClick={runFullDiagnostic}
          disabled={isLoading}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'}
        </button>
        
        <button
          onClick={testDirectPlay}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          –¢–µ—Å—Ç –∑–≤—É–∫–∞
        </button>
      </div>
      
      {testResult && (
        <div className="bg-gray-100 p-3 rounded text-sm font-mono whitespace-pre-wrap max-h-64 overflow-y-auto">
          {testResult}
        </div>
      )}
    </div>
  );
};

export default AudioTestDebug;