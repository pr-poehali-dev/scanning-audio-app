import { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';
import { AudioSettings } from '@/hooks/useAppState';
import { audioStorage } from '@/utils/audioStorage';
import { cloudAudioStorage } from '@/utils/cloudAudioStorage';

interface AudioManagerProps {
  audioSettings: AudioSettings;
  setAudioSettings: (settings: AudioSettings) => void;
  uploadedFiles: { [key: string]: string };
  setUploadedFiles: (files: { [key: string]: string }) => void;
  onTestAudio: (phraseKey: string) => void;
}

const BASIC_FILES_V1 = [
  { key: 'goods', label: '–§–∞–π–ª "goods.mp3" - –æ–∑–≤—É—á–∫–∞ —Ç–æ–≤–∞—Ä—ã', testKey: 'delivery-cell-info' },
  { key: 'word_items', label: '–§–∞–π–ª "word_items.mp3" - —Å–ª–æ–≤–æ "—Ç–æ–≤–∞—Ä–æ–≤"', testKey: 'delivery-cell-info' },
  { key: 'payment_on_delivery', label: '–§–∞–π–ª "payment_on_delivery.mp3" - –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏', testKey: 'delivery-cell-info' },
  { key: 'please_check_good_under_camera', label: '–§–∞–π–ª "please_check_good_under_camera.mp3" - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä', testKey: 'check-product-under-camera' },
  { key: 'thanks_for_order_rate_pickpoint', label: '–§–∞–π–ª "thanks_for_order_rate_pickpoint.mp3" - —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑', testKey: 'delivery-thanks' },
  { key: 'success_sound', label: '–§–∞–π–ª "success_sound.mp3" - –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞', testKey: 'success_sound' },
];

const BASIC_FILES_V2 = [
  { key: 'checkWBWallet', label: '–§–∞–π–ª "checkWBWallet.mp3" - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ WB –∫–æ—à–µ–ª—ë–∫', testKey: 'delivery-cell-info' },
  { key: 'word_items', label: '–§–∞–π–ª "word_items.mp3" - —Å–ª–æ–≤–æ "—Ç–æ–≤–∞—Ä–æ–≤"', testKey: 'delivery-cell-info' },
  { key: 'scanAfterQrClient', label: '–§–∞–π–ª "scanAfterQrClient.mp3" - –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ QR –∫–ª–∏–µ–Ω—Ç–∞', testKey: 'delivery-cell-info' },
  { key: 'please_check_good_under_camera', label: '–§–∞–π–ª "please_check_good_under_camera.mp3" - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä', testKey: 'check-product-under-camera' },
  { key: 'askRatePickPoint', label: '–§–∞–π–ª "askRatePickPoint.mp3" - –æ—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏', testKey: 'delivery-thanks' },
  { key: 'success_sound', label: '–§–∞–π–ª "success_sound.mp3" - –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞', testKey: 'success_sound' },
];

const COUNT_FILES = Array.from({ length: 20 }, (_, i) => ({
  key: `count_${i + 1}`,
  label: `–§–∞–π–ª "count_${i + 1}.mp3" - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${i + 1}`,
  testKey: 'delivery-cell-info'
}));

const getBasicFiles = (variant: 'v1' | 'v2') => variant === 'v1' ? BASIC_FILES_V1 : BASIC_FILES_V2;

const getCellFiles = (variant: 'v1' | 'v2') => Array.from({ length: 482 }, (_, i) => ({
  key: `cell_${variant}_${i + 1}`,
  label: `–§–∞–π–ª "cell_${variant}_${i + 1}.mp3" - —è—á–µ–π–∫–∞ ${i + 1}`,
  testKey: 'delivery-cell-info'
}));

export const AudioManager = ({
  audioSettings,
  uploadedFiles,
  setUploadedFiles,
  onTestAudio
}: AudioManagerProps) => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState({ current: 0, total: 0 });
  
  useEffect(() => {
    const loadFiles = async () => {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
      const cloudFiles = await cloudAudioStorage.getAllFiles();
      console.log('‚òÅÔ∏è –§–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞–∫–µ:', Object.keys(cloudFiles).length);
      
      if (Object.keys(cloudFiles).length > 0) {
        setUploadedFiles(cloudFiles);
      } else {
        // –ï—Å–ª–∏ –≤ –æ–±–ª–∞–∫–µ –ø—É—Å—Ç–æ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const files = await audioStorage.getAllFiles();
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', Object.keys(files).length);
        if (Object.keys(files).length > 0) {
          setUploadedFiles(files);
        }
      }
    };
    
    loadFiles();
  }, [setUploadedFiles]);
  
  const handleFileUpload = async (fileKey: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const url = await audioStorage.saveFile(fileKey, file);
    
    try {
      await cloudAudioStorage.saveFile(fileKey, file);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ –æ–±–ª–∞–∫–æ:', fileKey);
    } catch (cloudError) {
      console.warn('‚ö†Ô∏è –û–±–ª–∞–∫–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', fileKey);
    }
    
    setUploadedFiles({ ...uploadedFiles, [fileKey]: url });
  };

  const handleBulkUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    console.log('üî• handleBulkUpload –≤—ã–∑–≤–∞–Ω, —Ñ–∞–π–ª–æ–≤:', files?.length);
    if (!files || files.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤');
      return;
    }

    setIsUploading(true);
    console.log(`üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${files.length} —Ñ–∞–π–ª–æ–≤`);
    const newFiles: { [key: string]: string } = { ...uploadedFiles };
    let successCount = 0;
    let errorCount = 0;

    setUploadProgress({ current: 0, total: files.length });

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const fileName = file.name.replace(/\.(mp3|wav|ogg|m4a|webm)$/i, '');
      
      console.log(`üìÅ –§–∞–π–ª ${i+1}/${files.length}: "${file.name}" ‚Üí –∫–ª—é—á: "${fileName}"`);
      setUploadProgress({ current: i + 1, total: files.length });
      
      try {
        const url = await audioStorage.saveFile(fileName, file);
        try {
          await cloudAudioStorage.saveFile(fileName, file);
          console.log(`‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ: ${fileName}`);
        } catch (cloudError) {
          console.warn(`‚ö†Ô∏è –û–±–ª–∞–∫–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è ${fileName}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ`);
        }
        newFiles[fileName] = url;
        successCount++;
        console.log(`‚úÖ ${fileName}`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileName}:`, error);
        if (error instanceof Error) {
          console.error(`‚ùå –î–µ—Ç–∞–ª–∏: ${error.message}`, error.stack);
        }
      }
    }

    setUploadedFiles(newFiles);
    setIsUploading(false);
    setUploadProgress({ current: 0, total: 0 });
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —Ñ–∞–π–ª–æ–≤, –æ—à–∏–±–æ–∫: ${errorCount}`);
    alert(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤${errorCount > 0 ? `\n–û—à–∏–±–æ–∫: ${errorCount}` : ''}`);
  };

  const handleCellBulkUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    console.log('üî• handleCellBulkUpload –≤—ã–∑–≤–∞–Ω');
    const files = event.target.files;
    console.log('üìÅ –§–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ:', files?.length || 0);
    
    if (!files || files.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    setIsUploading(true);
    console.log(`üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —è—á–µ–µ–∫: ${files.length} —Ñ–∞–π–ª–æ–≤`);
    
    const newFiles: { [key: string]: string } = { ...uploadedFiles };
    let successCount = 0;
    let errorCount = 0;

    setUploadProgress({ current: 0, total: files.length });

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—á–∫–∞–º–∏ –ø–æ 100 —Ñ–∞–π–ª–æ–≤
    const BATCH_SIZE = 100;
    const fileArray = Array.from(files);
    
    for (let batchStart = 0; batchStart < fileArray.length; batchStart += BATCH_SIZE) {
      const batch = fileArray.slice(batchStart, batchStart + BATCH_SIZE);
      
      const uploadPromises = batch.map(async (file) => {
        const fileName = file.name.replace('.mp3', '').replace('.wav', '').replace('.ogg', '').replace('.webm', '');
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "123" –∏–ª–∏ "cell_v1_123" –≤ "cell_v1_123" –∏–ª–∏ "cell_v2_123"
        let cellKey = fileName;
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (cell_v1_ –∏–ª–∏ cell_v2_)
        if (fileName.startsWith('cell_v1_') || fileName.startsWith('cell_v2_')) {
          cellKey = fileName;
        } 
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞
        else {
          const cellNumber = parseInt(fileName, 10);
          if (!isNaN(cellNumber) && cellNumber >= 1 && cellNumber <= 482) {
            cellKey = `cell_${audioSettings.variant}_${cellNumber}`;
          } else {
            return { success: false, key: fileName };
          }
        }
        
        try {
          const url = await audioStorage.saveFile(cellKey, file);
          try {
            await cloudAudioStorage.saveFile(cellKey, file);
          } catch (cloudError) {
            console.warn(`‚ö†Ô∏è –û–±–ª–∞–∫–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è ${cellKey}`);
          }
          return { success: true, key: cellKey, url };
        } catch (error) {
          console.error(`‚ùå ${cellKey}:`, error);
          return { success: false, key: cellKey };
        }
      });

      const results = await Promise.all(uploadPromises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.forEach(result => {
        if (result.success && result.url) {
          newFiles[result.key] = result.url;
          successCount++;
        } else {
          errorCount++;
        }
      });

      const currentProgress = Math.min(batchStart + batch.length, fileArray.length);
      setUploadProgress({ current: currentProgress, total: fileArray.length });
      console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${currentProgress}/${fileArray.length} (${Math.round(currentProgress/fileArray.length*100)}%)`);
    }

    setUploadedFiles(newFiles);
    setIsUploading(false);
    setUploadProgress({ current: 0, total: 0 });
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
    alert(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —è—á–µ–µ–∫: ${successCount} –∏–∑ ${files.length}\n${errorCount > 0 ? `–û—à–∏–±–æ–∫: ${errorCount}` : ''}`);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="Volume2" className="w-5 h-5" />
          –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 space-y-3">
          <div className="text-sm text-blue-900">
            <strong>–í–∞–∂–Ω–æ:</strong> –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –¢–û–ß–ù–´–ú–ò –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ
          </div>
          
          <div className="space-y-3">
            <div className="bg-green-50 border border-green-200 rounded p-3 mb-3">
              <div className="flex items-start gap-2 text-sm text-green-800">
                <Icon name="Cloud" className="w-4 h-4 mt-0.5 flex-shrink-0" />
                <div>
                  <strong>‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω–æ!</strong>
                  <p className="text-xs mt-1">–í—Å–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</p>
                </div>
              </div>
            </div>
            
            <div className="flex gap-2">
              <Input
                type="file"
                accept="audio/*"
                multiple
                onChange={handleBulkUpload}
                className="hidden"
                id="bulk-upload"
                disabled={isUploading}
              />
              <Button
                variant="default"
                className="gap-2"
                disabled={isUploading}
                onClick={() => document.getElementById('bulk-upload')?.click()}
              >
                <Icon name="Upload" className="w-4 h-4" />
                {isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤'}
              </Button>
              <div className="text-xs text-gray-600 flex items-center">
                –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–∞–º–∏: goods.mp3, 1.mp3, 2.mp3, 3.mp3 –∏–ª–∏ cell_1.mp3, cell_2.mp3
              </div>
            </div>
            
            {isUploading && (
              <div className="space-y-2">
                <div className="flex justify-between text-xs text-gray-600">
                  <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</span>
                  <span>{uploadProgress.current} / {uploadProgress.total}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${(uploadProgress.current / uploadProgress.total) * 100}%` }}
                  />
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="space-y-4">
          <h3 className="font-semibold text-sm">–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã ({audioSettings.variant === 'v1' ? '–í–∞—Ä–∏–∞–Ω—Ç 1' : '–í–∞—Ä–∏–∞–Ω—Ç 2'})</h3>
          {getBasicFiles(audioSettings.variant).map((file) => (
            <div key={file.key} className="border rounded-lg p-3 space-y-2">
              <Label className="text-sm font-medium">{file.label}</Label>
              
              <div className="flex gap-2">
                <Input
                  type="file"
                  accept="audio/*"
                  onChange={(e) => handleFileUpload(file.key, e)}
                  className="flex-1"
                />
                {uploadedFiles[file.key] && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => onTestAudio(file.testKey)}
                  >
                    <Icon name="Play" className="w-4 h-4" />
                  </Button>
                )}
              </div>
              
              {uploadedFiles[file.key] && (
                <div className="flex items-center gap-1 text-xs text-green-600">
                  <Icon name="CheckCircle" className="w-3 h-3" />
                  <span>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="space-y-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <h3 className="font-semibold text-sm">–û–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫ (1-482) - {audioSettings.variant === 'v1' ? '–í–∞—Ä–∏–∞–Ω—Ç 1' : '–í–∞—Ä–∏–∞–Ω—Ç 2'}</h3>
              <div className="flex items-center gap-3">
                <Input
                  type="file"
                  accept="audio/*"
                  multiple
                  onChange={handleCellBulkUpload}
                  className="hidden"
                  id="cell-bulk-upload"
                  disabled={isUploading}
                />
                <Button
                  variant="outline"
                  size="sm"
                  className="gap-2"
                  disabled={isUploading}
                  onClick={() => document.getElementById('cell-bulk-upload')?.click()}
                >
                  <Icon name="Upload" className="w-3 h-3" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Å—Å–æ–≤–æ
                </Button>
                <span className="text-xs text-gray-500">
                  –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {getCellFiles(audioSettings.variant).filter(f => uploadedFiles[f.key]).length} –∏–∑ {getCellFiles(audioSettings.variant).length}
                </span>
              </div>
            </div>
            <div className="text-xs text-gray-500">
              üí° –§–∞–π–ª—ã –¥–ª—è {audioSettings.variant === 'v1' ? '–≤–∞—Ä–∏–∞–Ω—Ç–∞ 1' : '–≤–∞—Ä–∏–∞–Ω—Ç–∞ 2'}: cell_{audioSettings.variant}_1.mp3, cell_{audioSettings.variant}_2.mp3, ..., cell_{audioSettings.variant}_482.mp3
            </div>
          </div>
          
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 max-h-96 overflow-y-auto p-2 border rounded-lg">
            {getCellFiles(audioSettings.variant).map((file) => {
              const cellNum = file.key.replace(`cell_${audioSettings.variant}_`, '');
              const isUploaded = uploadedFiles[file.key];
              
              return (
                <div key={file.key} className="relative">
                  <Input
                    type="file"
                    accept="audio/*"
                    onChange={(e) => handleFileUpload(file.key, e)}
                    className="hidden"
                    id={`upload-${file.key}`}
                  />
                  <label
                    htmlFor={`upload-${file.key}`}
                    className={`
                      flex items-center justify-center gap-1 p-2 border rounded cursor-pointer
                      transition-colors text-xs
                      ${isUploaded 
                        ? 'bg-green-50 border-green-300 text-green-700' 
                        : 'bg-gray-50 border-gray-300 hover:bg-gray-100'
                      }
                    `}
                  >
                    {isUploaded && <Icon name="CheckCircle" className="w-3 h-3" />}
                    <span>–Ø—á–µ–π–∫–∞ {cellNum}</span>
                  </label>
                </div>
              );
            })}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};