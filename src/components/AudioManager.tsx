import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface AudioManagerProps {
  onClose: () => void;
  onAudioFilesUpdate: (files: { [key: string]: string }) => void;
}

export const AudioManager = ({ onClose, onAudioFilesUpdate }: AudioManagerProps) => {
  const [dragOver, setDragOver] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<{ [key: string]: string }>({});

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  useEffect(() => {
    try {
      const savedFiles = localStorage.getItem('wb-audio-files');
      if (savedFiles) {
        const parsedFiles = JSON.parse(savedFiles);
        setUploadedFiles(parsedFiles);
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã:', Object.keys(parsedFiles));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }, []);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
  const audioKeys = {
    'cell-number': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏',
    'check-discount-wallet': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–∏–¥–∫—É/–∫–æ—à–µ–ª–µ–∫',
    'check-product-camera': '–ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä—É',
    'delivery-complete': '–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω',
    'receiving-scan': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ',
    'return-complete': '–í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
    'rate-pickup-point': '–û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ Base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = (error) => reject(error);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  const handleFilesUpload = async (files: FileList) => {
    setUploading(true);
    const newFiles: { [key: string]: string } = {};

    for (const file of Array.from(files)) {
      if (!file.type.startsWith('audio/') && !/\.(mp3|wav|ogg|m4a|aac|flac)$/i.test(file.name)) {
        continue;
      }

      try {
        const base64 = await fileToBase64(file);
        const fileName = file.name.toLowerCase();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∞–º
        let audioKey = '';
        if (fileName.includes('—è—á–µ–π–∫') || fileName.includes('cell')) {
          audioKey = 'cell-number';
        } else if (fileName.includes('—Å–∫–∏–¥–∫') || fileName.includes('–∫–æ—à–µ–ª') || fileName.includes('discount')) {
          audioKey = 'check-discount-wallet';
        } else if (fileName.includes('–∫–∞–º–µ—Ä') || fileName.includes('camera') || fileName.includes('–ø–æ–∫–∞–∂')) {
          audioKey = 'check-product-camera';
        } else if (fileName.includes('–≤—ã–¥–∞—á') || fileName.includes('–≤—ã–¥–∞–Ω') || fileName.includes('delivery')) {
          audioKey = 'delivery-complete';
        } else if (fileName.includes('–ø—Ä–∏–µ–º–∫') || fileName.includes('—Å–∫–∞–Ω') || fileName.includes('receiving')) {
          audioKey = 'receiving-scan';
        } else if (fileName.includes('–≤–æ–∑–≤—Ä–∞—Ç') || fileName.includes('return')) {
          audioKey = 'return-complete';
        } else if (fileName.includes('–æ—Ü–µ–Ω') || fileName.includes('rate') || fileName.includes('–ø—É–Ω–∫—Ç')) {
          audioKey = 'rate-pickup-point';
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
          audioKey = file.name.replace(/\.[^/.]+$/, "");
        }
        
        newFiles[audioKey] = base64;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
      }
    }

    setUploadedFiles(prev => ({ ...prev, ...newFiles }));
    setUploading(false);
  };

  // Drag & Drop
  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    if (e.dataTransfer.files) {
      handleFilesUpload(e.dataTransfer.files);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      handleFilesUpload(e.target.files);
    }
  };

  // –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º
  const assignFileToKey = (file: string, key: string) => {
    const updatedFiles = { ...uploadedFiles };
    delete updatedFiles[file];
    updatedFiles[key] = uploadedFiles[file];
    setUploadedFiles(updatedFiles);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const removeFile = (key: string) => {
    const updatedFiles = { ...uploadedFiles };
    delete updatedFiles[key];
    setUploadedFiles(updatedFiles);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleSave = () => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã:', Object.keys(uploadedFiles));
    onAudioFilesUpdate(uploadedFiles);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Icon name="Volume2" size={24} className="text-blue-600" />
              <div>
                <h2 className="text-xl font-semibold">–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–∑–≤—É—á–∫–∏</h2>
                <p className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–∑–≤—É—á–∫–∏</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
            >
              <Icon name="X" size={20} />
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          
          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="pb-4">
              <CardTitle className="text-base flex items-center gap-2">
                <Icon name="Info" size={18} className="text-blue-600" />
                –ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∑–≤—É—á–∫—É —Å Mail.ru Cloud
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <ol className="text-sm text-blue-800 space-y-2">
                <li className="flex items-start gap-2">
                  <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mt-0.5">1</span>
                  <span>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <code className="bg-blue-100 px-2 py-1 rounded">https://cloud.mail.ru/public/vmnn/73ri9QfHz</code></span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mt-0.5">2</span>
                  <span>–°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mt-0.5">3</span>
                  <span>–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-blue-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold mt-0.5">4</span>
                  <span>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã"</span>
                </li>
              </ol>
            </CardContent>
          </Card>

          {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div
            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
              dragOver 
                ? 'border-blue-500 bg-blue-50' 
                : 'border-gray-300 hover:border-gray-400'
            }`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <div className="space-y-4">
              <Icon 
                name={uploading ? "Loader2" : "Upload"} 
                size={48} 
                className={`mx-auto text-gray-400 ${uploading ? "animate-spin" : ""}`} 
              />
              <div>
                <p className="text-lg font-medium text-gray-700">
                  {uploading ? '–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã...' : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å—é–¥–∞'}
                </p>
                <p className="text-gray-500">–∏–ª–∏</p>
                <Button 
                  onClick={() => fileInputRef.current?.click()}
                  disabled={uploading}
                  className="mt-2"
                >
                  <Icon name="FolderOpen" size={16} className="mr-2" />
                  –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã
                </Button>
              </div>
            </div>
          </div>

          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept="audio/*"
            onChange={handleFileInput}
            className="hidden"
          />

          {/* –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */}
          {Object.keys(uploadedFiles).length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base">
                  –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({Object.keys(uploadedFiles).length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {Object.entries(uploadedFiles).map(([key, file]) => (
                    <div key={key} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-3">
                        <Icon name="FileAudio" size={20} className="text-blue-600" />
                        <div>
                          <div className="font-medium text-sm">{audioKeys[key as keyof typeof audioKeys] || key}</div>
                          <div className="text-xs text-gray-500">
                            {key} ‚Ä¢ {(file.length / 1024 / 1.37).toFixed(1)} KB
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            const audio = new Audio(file);
                            audio.play();
                          }}
                        >
                          <Icon name="Play" size={14} />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeFile(key)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Icon name="Trash2" size={14} />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–≤—É–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {Object.entries(audioKeys).map(([key, description]) => (
                  <div 
                    key={key} 
                    className={`p-3 rounded-lg border ${
                      uploadedFiles[key] ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-medium text-sm">{description}</div>
                        <div className="text-xs text-gray-500">{key}</div>
                      </div>
                      {uploadedFiles[key] ? (
                        <Icon name="CheckCircle" size={20} className="text-green-600" />
                      ) : (
                        <Icon name="Circle" size={20} className="text-gray-400" />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <strong>{Object.keys(uploadedFiles).length}</strong> –∏–∑ <strong>{Object.keys(audioKeys).length}</strong> —Ñ–∞–π–ª–æ–≤
            </div>
            <div className="flex gap-3">
              <Button variant="outline" onClick={onClose}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                onClick={handleSave}
                disabled={Object.keys(uploadedFiles).length === 0}
              >
                <Icon name="Save" size={16} className="mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∑–≤—É—á–∫—É
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};