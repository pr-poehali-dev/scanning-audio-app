import { useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import { AudioSettings } from '@/hooks/useAppState';
import { CellAudioManager } from './CellAudioManager';
import { audioStorage } from '@/utils/audioStorage';

interface AudioManagerProps {
  audioSettings: AudioSettings;
  setAudioSettings: (settings: AudioSettings) => void;
  uploadedFiles: { [key: string]: string };
  setUploadedFiles: (files: { [key: string]: string }) => void;
  onTestAudio: (phraseKey: string) => void;
}

const AUDIO_PHRASES = {
  delivery: {
    'delivery-cell-info': '–ù–æ–º–µ—Ä —è—á–µ–π–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
    'delivery-scan-items': '–°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã (–°–Ω—è—Ç—å –≤—Å–µ)',
    'delivery-check-product': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
    'delivery-thanks': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –æ—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
  },
  receiving: {
    'receiving-start': '–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏',
    'receiving-scan': '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥',
    'receiving-next': '–°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä',
    'receiving-complete': '–ü—Ä–∏–µ–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
  },
  return: {
    'return-start': '–ù–∞—á–∞–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞',
    'return-scan-product': '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞',
    'return-confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç',
    'return-success': '–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω',
  }
};

export const AudioManager = ({
  audioSettings,
  setAudioSettings,
  uploadedFiles,
  setUploadedFiles,
  onTestAudio
}: AudioManagerProps) => {
  
  useEffect(() => {
    const loadFiles = async () => {
      try {
        const files = await audioStorage.getAllFiles();
        if (Object.keys(files).length > 0) {
          console.log('üìÇ AudioManager: –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ IndexedDB:', Object.keys(files));
          setUploadedFiles(files);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ AudioManager:', error);
      }
    };
    
    loadFiles();
  }, []);

  const handleDiagnose = async () => {
    console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û –°–ò–°–¢–ï–ú–´ ===');
    await audioStorage.diagnose();
    console.log('üìã –¢–µ–∫—É—â–∏–µ uploadedFiles –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:', Object.keys(uploadedFiles));
    console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ audioSettings.enabled:', audioSettings.enabled);
  };
  
  const handleFileUpload = async (phraseKey: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ IndexedDB –∏ –ø–æ–ª—É—á–∞–µ–º URL
      const url = await audioStorage.saveFile(phraseKey, file);
      const newFiles = { ...uploadedFiles, [phraseKey]: url };
      setUploadedFiles(newFiles);
      
      console.log(`‚úÖ –§–∞–π–ª "${phraseKey}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    }
  };

  const handleTogglePhrase = (phraseKey: string, enabled: boolean) => {
    const newSettings = {
      ...audioSettings,
      enabled: { ...audioSettings.enabled, [phraseKey]: enabled }
    };
    setAudioSettings(newSettings);
    localStorage.setItem('wb-pvz-audio-enabled', JSON.stringify(newSettings.enabled));
  };

  const handleSpeedChange = (speed: number) => {
    const newSettings = { ...audioSettings, speed };
    setAudioSettings(newSettings);
    localStorage.setItem('wb-pvz-audio-speed', speed.toString());
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Volume2" className="w-5 h-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–æ–π
          </CardTitle>
          <Button 
            variant="outline" 
            size="sm"
            onClick={handleDiagnose}
          >
            <Icon name="Bug" className="w-4 h-4 mr-1" />
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label>–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {audioSettings.speed}x</Label>
          <Input
            type="range"
            min="0.5"
            max="2"
            step="0.1"
            value={audioSettings.speed}
            onChange={(e) => handleSpeedChange(parseFloat(e.target.value))}
            className="w-full"
          />
        </div>

        <Tabs defaultValue="delivery" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="delivery">–í—ã–¥–∞—á–∞</TabsTrigger>
            <TabsTrigger value="receiving">–ü—Ä–∏–µ–º–∫–∞</TabsTrigger>
            <TabsTrigger value="return">–í–æ–∑–≤—Ä–∞—Ç</TabsTrigger>
          </TabsList>

          {Object.entries(AUDIO_PHRASES).map(([tab, phrases]) => (
            <TabsContent key={tab} value={tab} className="space-y-3">
              {Object.entries(phrases).map(([phraseKey, phraseLabel]) => (
                <div key={phraseKey}>
                  {phraseKey === 'delivery-cell-info' ? (
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
                    <div className="space-y-2">
                      <div className="flex items-center justify-between border-b pb-2">
                        <Label className="text-sm font-medium">{phraseLabel}</Label>
                        <Switch
                          checked={audioSettings.enabled[phraseKey] || false}
                          onCheckedChange={(checked) => handleTogglePhrase(phraseKey, checked)}
                        />
                      </div>
                      <CellAudioManager
                        uploadedFiles={uploadedFiles}
                        setUploadedFiles={setUploadedFiles}
                        onTestAudio={onTestAudio}
                      />
                    </div>
                  ) : (
                    // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
                    <div className="border rounded-lg p-3 space-y-2">
                      <div className="flex items-center justify-between">
                        <Label className="text-sm font-medium">{phraseLabel}</Label>
                        <Switch
                          checked={audioSettings.enabled[phraseKey] || false}
                          onCheckedChange={(checked) => handleTogglePhrase(phraseKey, checked)}
                        />
                      </div>
                      
                      <div className="space-y-1">
                        <div className="flex gap-2">
                          <Input
                            type="file"
                            accept="audio/*"
                            onChange={(e) => handleFileUpload(phraseKey, e)}
                            className="flex-1"
                          />
                          {uploadedFiles[phraseKey] && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => onTestAudio(phraseKey)}
                            >
                              <Icon name="Play" className="w-4 h-4" />
                            </Button>
                          )}
                        </div>
                        {uploadedFiles[phraseKey] && (
                          <div className="flex items-center gap-1 text-xs text-green-600">
                            <Icon name="CheckCircle" className="w-3 h-3" />
                            <span>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </TabsContent>
          ))}
        </Tabs>
      </CardContent>
    </Card>
  );
};