import { useState } from 'react';
import Icon from '@/components/ui/icon';

const FixAudioButton = () => {
  const [fixing, setFixing] = useState(false);

  const fixAudio = async () => {
    setFixing(true);
    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ó–í–£–ß–ö–ò...');

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–≤—É–∫
      const createFixedAudio = (): string => {
        const sampleRate = 8000;
        const duration = 0.2; 
        const frequency = 800;
        const samples = Math.floor(sampleRate * duration);
        const buffer = new ArrayBuffer(44 + samples * 2);
        const view = new DataView(buffer);
        
        // WAV header
        const writeString = (offset: number, string: string) => {
          for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
          }
        };
        
        writeString(0, 'RIFF');
        view.setUint32(4, 36 + samples * 2, true);
        writeString(8, 'WAVE');
        writeString(12, 'fmt ');
        view.setUint32(16, 16, true);
        view.setUint16(20, 1, true);
        view.setUint16(22, 1, true);
        view.setUint32(24, sampleRate, true);
        view.setUint32(28, sampleRate * 2, true);
        view.setUint16(32, 2, true);
        view.setUint16(34, 16, true);
        writeString(36, 'data');
        view.setUint32(40, samples * 2, true);
        
        // Generate sine wave
        for (let i = 0; i < samples; i++) {
          const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * 0.3 * 32767;
          view.setInt16(44 + i * 2, sample, true);
        }
        
        // Convert to base64
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.length; i++) {
          binary += String.fromCharCode(bytes[i]);
        }
        return 'data:audio/wav;base64,' + btoa(binary);
      };

      console.log('üéµ –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–≤—É–∫...');
      const fixedAudio = createFixedAudio();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–≤—É–∫ –≤–∞–ª–∏–¥–Ω—ã–π
      console.log('üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–≤—É–∫...');
      const testAudio = new Audio();
      testAudio.src = fixedAudio;
      
      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => reject(new Error('Timeout')), 2000);
        
        testAudio.addEventListener('ended', () => {
          clearTimeout(timeout);
          resolve();
        });
        
        testAudio.addEventListener('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });
        
        testAudio.play().catch(reject);
      });
      
      console.log('‚úÖ –ó–≤—É–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
      const fixedFiles: Record<string, string> = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ 1-50 (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è)
      for (let i = 1; i <= 50; i++) {
        fixedFiles[i.toString()] = fixedAudio;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
      fixedFiles['—Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π'] = fixedAudio;
      fixedFiles['–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä'] = fixedAudio;
      fixedFiles['error-sound'] = fixedAudio;
      
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${Object.keys(fixedFiles).length}`);
      console.log(`üîç –ö–ª—é—á–∏: ${Object.keys(fixedFiles).slice(0, 10).join(', ')}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      const storageKey = 'wb-voice-variant1-permanent';
      localStorage.setItem(storageKey, JSON.stringify(fixedFiles));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
      localStorage.setItem('wb-active-voice-variant', 'variant1');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ bulletproof —Å–∏—Å—Ç–µ–º–µ
      const { activateVoiceVariant } = await import('@/utils/bulletproofAudio');
      const activated = activateVoiceVariant('variant1');
      
      console.log(`üéµ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: ${activated}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º
      const { playCellAudio } = await import('@/utils/bulletproofAudio');
      const success = await playCellAudio('1');
      
      if (success) {
        alert('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–û! –û–∑–≤—É—á–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–§–∞–π–ª—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.');
      } else {
        alert('‚ö†Ô∏è –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
      alert(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error}`);
    }
    
    setFixing(false);
  };

  return (
    <button 
      onClick={fixAudio}
      disabled={fixing}
      className="fixed bottom-4 left-4 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 z-50"
    >
      {fixing ? (
        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
      ) : (
        <Icon name="Wrench" size={16} />
      )}
      <span>{fixing ? '–ò—Å–ø—Ä–∞–≤–ª—è–µ–º...' : '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–∑–≤—É—á–∫—É'}</span>
    </button>
  );
};

export default FixAudioButton;