import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';
import { DropZone } from './DropZone';

interface AudioFile {
  key: string;
  name: string;
  uploaded: boolean;
  url?: string;
}

interface AudioUploaderProps {
  onAudioFilesUpdate: (files: { [key: string]: string }) => Promise<void>;
  onClose: () => void;
  removeAudioFile: (key: string) => void;
  clearAllAudio: () => void;
  existingFiles: { [key: string]: string };
}

export const AudioUploader = ({ 
  onAudioFilesUpdate, 
  onClose, 
  removeAudioFile,
  clearAllAudio,
  existingFiles 
}: AudioUploaderProps) => {
  const [audioFiles, setAudioFiles] = useState<AudioFile[]>([
    { key: 'cell-number', name: '–Ø—á–µ–π–∫–∞ –Ω–æ–º–µ—Ä', uploaded: false },
    { key: 'check-discount-wallet', name: '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫', uploaded: false },
    { key: 'check-product-camera', name: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', uploaded: false },
    { key: 'rate-pickup-point', name: '–û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏', uploaded: false },
    { key: 'receiving-start', name: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏', uploaded: false },
    { key: 'receiving-complete', name: '–ü—Ä–∏–µ–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', uploaded: false },
    { key: 'return-start', name: '–ù–∞—á–∞–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞', uploaded: false },
    { key: 'return-complete', name: '–í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', uploaded: false },
  ]);

  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [cellUploadProgress, setCellUploadProgress] = useState(0);
  const [isCellUploading, setIsCellUploading] = useState(false);
  const folderInputRef = useRef<HTMLInputElement>(null);
  const cellFolderInputRef = useRef<HTMLInputElement>(null);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
  useEffect(() => {
    setAudioFiles(prev => prev.map(item => ({
      ...item,
      uploaded: !!existingFiles[item.key],
      url: existingFiles[item.key]
    })));
  }, [existingFiles]);

  const matchAudioFileByName = (fileName: string): AudioFile | null => {
    const cleanFileName = fileName.toLowerCase().replace(/\.(mp3|wav|ogg|m4a|aac)$/, '');
    
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let match = audioFiles.find(item => item.key.toLowerCase() === cleanFileName);
    if (match) return match;
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywordMatches: {[key: string]: string[]} = {
      'cell-number': ['—è—á–µ–π–∫–∞', 'cell', '–Ω–æ–º–µ—Ä', 'number'],
      'check-discount-wallet': ['—Å–∫–∏–¥–∫–∞', 'discount', '–∫–æ—à–µ–ª–µ–∫', 'wallet', '–≤–±'],
      'check-product-camera': ['–∫–∞–º–µ—Ä–∞', 'camera', '—Ç–æ–≤–∞—Ä', 'product', '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ'],
      'rate-pickup-point': ['–æ—Ü–µ–Ω–∏—Ç–µ', 'rate', '–ø—É–Ω–∫—Ç', 'pickup', '–≤—ã–¥–∞—á–∏'],
      'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', 'receiving', '–Ω–∞—á–∞–ª–æ', 'start'],
      'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', 'receiving', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'complete'],
      'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', 'return', '–Ω–∞—á–∞–ª–æ', 'start'],
      'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', 'return', '–∑–∞–≤–µ—Ä—à–µ–Ω', 'complete']
    };
    
    for (const [key, keywords] of Object.entries(keywordMatches)) {
      if (keywords.some(keyword => cleanFileName.includes(keyword))) {
        match = audioFiles.find(item => item.key === key);
        if (match) return match;
      }
    }
    
    return null;
  };

  const handleFolderUpload = () => {
    folderInputRef.current?.click();
  };

  const handleFolderFiles = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    setIsUploading(true);
    setUploadProgress(0);

    const audioFilesList = Array.from(files).filter(file => file.type.startsWith('audio/'));
    const totalFiles = audioFilesList.length;
    let processedFiles = 0;
    const updatedFiles: { [key: string]: string } = {};

    if (totalFiles === 0) {
      alert('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
      setIsUploading(false);
      return;
    }

    audioFilesList.forEach((file) => {
      const matchingAudioFile = matchAudioFileByName(file.name);

      if (matchingAudioFile) {
        const url = URL.createObjectURL(file);
        updatedFiles[matchingAudioFile.key] = url;

        setAudioFiles(prev => prev.map(item => 
          item.key === matchingAudioFile.key
            ? { ...item, uploaded: true, url }
            : item
        ));
      }

      processedFiles++;
      setUploadProgress((processedFiles / totalFiles) * 100);
    });

    setTimeout(async () => {
      setIsUploading(false);
      setUploadProgress(0);
      
      try {
        await onAudioFilesUpdate(updatedFiles);
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', updatedFiles);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const saved = localStorage.getItem('wb-audio-files');
        console.log('–í localStorage:', saved);
        
        const matchedCount = Object.keys(updatedFiles).length;
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${matchedCount} –∏–∑ ${totalFiles} —Ñ–∞–π–ª–æ–≤\n\nüíæ –§–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ base64 –∏ –ü–û–°–¢–û–Ø–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
      }
    }, 500);
  };

  const handleCellFolderUpload = () => {
    cellFolderInputRef.current?.click();
  };

  const handleCellFolderFiles = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    setIsCellUploading(true);
    setCellUploadProgress(0);

    const audioFilesList = Array.from(files).filter(file => file.type.startsWith('audio/'));
    const totalFiles = audioFilesList.length;
    let processedFiles = 0;
    const updatedFiles: { [key: string]: string } = {};

    if (totalFiles === 0) {
      alert('–í –ø–∞–ø–∫–µ —Å —è—á–µ–π–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
      setIsCellUploading(false);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫ –ø–æ –Ω–æ–º–µ—Ä–∞–º
    const cellAudios: { [key: string]: string } = {};

    audioFilesList.forEach((file) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      const fileName = file.name.toLowerCase().replace(/\.(mp3|wav|ogg|m4a|aac)$/, '');
      const cellNumber = fileName.match(/\d+/)?.[0]; // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      
      if (cellNumber) {
        const url = URL.createObjectURL(file);
        cellAudios[cellNumber] = url;
      }

      processedFiles++;
      setCellUploadProgress((processedFiles / totalFiles) * 100);
    });

    setTimeout(async () => {
      setIsCellUploading(false);
      setCellUploadProgress(0);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ
      const cellFilesForMainSystem: { [key: string]: string } = {};
      
      Object.entries(cellAudios).forEach(([cellNumber, url]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è —è—á–µ–µ–∫
        cellFilesForMainSystem[cellNumber] = url; // –ü—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä: "12"
        cellFilesForMainSystem[`cell-${cellNumber}`] = url; // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: "cell-12"  
        cellFilesForMainSystem[`—è—á–µ–π–∫–∞-${cellNumber}`] = url; // –†—É—Å—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: "—è—á–µ–π–∫–∞-12"
      });
      
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏–æ
        await onAudioFilesUpdate(cellFilesForMainSystem);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('cellAudios', JSON.stringify(cellAudios));
        
        const cellCount = Object.keys(cellAudios).length;
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–∑–≤—É—á–∫–∏ –¥–ª—è ${cellCount} —è—á–µ–µ–∫\n\nüíæ –§–∞–π–ª—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏–æ –∏ –ü–û–°–¢–û–Ø–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
      }
    }, 500);
  };

  const handleRemoveFile = (key: string) => {
    setAudioFiles(prev => prev.map(item => 
      item.key === key 
        ? { ...item, uploaded: false, url: undefined }
        : item
    ));
    removeAudioFile(key);
  };

  const handleClearAll = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã?')) {
      setAudioFiles(prev => prev.map(item => ({
        ...item,
        uploaded: false,
        url: undefined
      })));
      clearAllAudio();
    }
  };

  const uploadedCount = audioFiles.filter(item => item.uploaded).length;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
  const cellAudios = JSON.parse(localStorage.getItem('cellAudios') || '{}');
  const cellCount = Object.keys(cellAudios).length;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Volume2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∑–≤—É—á–∫–∏
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <Icon name="X" className="w-5 h-5" />
          </Button>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <div className="text-sm text-gray-600">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploadedCount} –∏–∑ {audioFiles.length}
              </div>
              {cellCount > 0 && (
                <div className="text-sm text-blue-600">
                  üì± –Ø—á–µ–π–∫–∏: {cellCount} —à—Ç.
                </div>
              )}
            </div>
            {(uploadedCount > 0 || cellCount > 0) && (
              <div className="flex gap-2">
                {cellCount > 0 && (
                  <Button 
                    onClick={() => {
                      if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫?')) {
                        localStorage.removeItem('cellAudios');
                        window.location.reload();
                      }
                    }}
                    variant="outline"
                    size="sm"
                    className="text-blue-600 hover:text-blue-700"
                  >
                    <Icon name="Hash" className="w-4 h-4 mr-1" />
                    –û—á–∏—Å—Ç–∏—Ç—å —è—á–µ–π–∫–∏
                  </Button>
                )}
                {uploadedCount > 0 && (
                  <Button 
                    onClick={handleClearAll}
                    variant="outline"
                    size="sm"
                    className="text-red-600 hover:text-red-700"
                  >
                    <Icon name="Trash" className="w-4 h-4 mr-1" />
                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                  </Button>
                )}
              </div>
            )}
          </div>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–∫–∏ —Å drag&drop */}
          <DropZone onFolderDrop={handleFolderFiles} isUploading={isUploading} uploadProgress={uploadProgress} />

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–∫–∏ —Å —è—á–µ–π–∫–∞–º–∏ */}
          <div className="border-2 border-dashed border-blue-300 rounded-lg p-6 text-center bg-blue-50">
            <Icon name="Hash" className="mx-auto h-12 w-12 text-blue-400 mb-4" />
            <h3 className="text-lg font-medium mb-2 text-blue-800">–ü–∞–ø–∫–∞ —Å –æ–∑–≤—É—á–∫–æ–π —è—á–µ–µ–∫</h3>
            <p className="text-blue-600 mb-4">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å –æ–∑–≤—É—á–∫–æ–π –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫.
              –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1.mp3", "—è—á–µ–π–∫–∞-15.wav", "cell_42.mp3")
            </p>
            <Button 
              onClick={handleCellFolderUpload} 
              disabled={isCellUploading}
              className="bg-blue-500 hover:bg-blue-600"
            >
              {isCellUploading ? '–ó–∞–≥—Ä—É–∂–∞—é —è—á–µ–π–∫–∏...' : '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —Å —è—á–µ–π–∫–∞–º–∏'}
            </Button>
            {isCellUploading && (
              <div className="mt-4">
                <Progress value={cellUploadProgress} className="bg-blue-100" />
                <div className="text-sm text-blue-600 mt-2">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —è—á–µ–π–∫–∏...</div>
              </div>
            )}
          </div>

          {/* –°–∫—Ä—ã—Ç—ã–µ inputs –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ */}
          <input
            ref={folderInputRef}
            type="file"
            webkitdirectory=""
            multiple
            accept="audio/*"
            onChange={handleFolderFiles}
            className="hidden"
          />
          <input
            ref={cellFolderInputRef}
            type="file"
            webkitdirectory=""
            multiple
            accept="audio/*"
            onChange={handleCellFolderFiles}
            className="hidden"
          />

          {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
          <div className="space-y-3">
            <h3 className="text-lg font-medium">–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤</h3>
            <div className="grid gap-3">
              {audioFiles.map((audioFile) => (
                <div key={audioFile.key} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className={`w-3 h-3 rounded-full ${
                      audioFile.uploaded ? 'bg-green-500' : 'bg-gray-300'
                    }`} />
                    <div>
                      <div className="font-medium">{audioFile.name}</div>
                      <div className="text-sm text-gray-500">{audioFile.key}</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    {audioFile.uploaded && (
                      <>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            if (audioFile.url) {
                              const audio = new Audio(audioFile.url);
                              audio.play().catch(console.error);
                            }
                          }}
                        >
                          <Icon name="Play" className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleRemoveFile(audioFile.key)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Icon name="Trash" className="w-4 h-4" />
                        </Button>
                      </>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-medium text-yellow-900 mb-3">–ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤</h4>
            <div className="text-yellow-800 text-sm space-y-2">
              <div><strong>–ü—Ä–∏–º–µ—Ä—ã:</strong> "—è—á–µ–π–∫–∞.mp3", "—Å–∫–∏–¥–∫–∞.wav", "–∫–∞–º–µ—Ä–∞.mp3", "–æ—Ü–µ–Ω–∏—Ç–µ.mp3"</div>
              <div><strong>–§–æ—Ä–º–∞—Ç—ã:</strong> MP3, WAV, OGG, M4A, AAC</div>
              <div><strong>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏</div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-medium text-blue-900 mb-2">üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</h4>
            <p className="text-blue-700 text-sm mb-3">
              –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 
              –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            </p>
            
            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
            <div className="border-t border-blue-200 pt-3">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => {
                  const storage1 = localStorage.getItem('wb-audio-files');
                  const storage2 = localStorage.getItem('cellAudios');
                  const info = `
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø:

üìÅ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: ${storage1 ? '–Ω–∞–π–¥–µ–Ω—ã' : '–ù–ï –ù–ê–ô–î–ï–ù–´'}
üì± –Ø—á–µ–π–∫–∏: ${storage2 ? '–Ω–∞–π–¥–µ–Ω—ã' : '–ù–ï –ù–ê–ô–î–ï–ù–´'}

üíæ –†–∞–∑–º–µ—Ä localStorage: ${((JSON.stringify(localStorage).length * 2) / 1024 / 1024).toFixed(2)} –ú–ë

üåê –ë—Ä–∞—É–∑–µ—Ä: ${navigator.userAgent.includes('Chrome') ? 'Chrome' : navigator.userAgent.includes('Firefox') ? 'Firefox' : '–î—Ä—É–≥–æ–π'}
üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${!window.indexedDB ? '–î–ê (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)' : '–ù–ï–¢'}

üìä –î–µ—Ç–∞–ª–∏:
- –û—Å–Ω–æ–≤–Ω—ã–µ: ${storage1 ? Object.keys(JSON.parse(storage1)).length + ' —Ñ–∞–π–ª–æ–≤' : '0 —Ñ–∞–π–ª–æ–≤'}  
- –Ø—á–µ–π–∫–∏: ${storage2 ? Object.keys(JSON.parse(storage2)).length + ' —è—á–µ–µ–∫' : '0 —è—á–µ–µ–∫'}
                  `.trim();
                  alert(info);
                }}
                className="text-xs"
              >
                <Icon name="Search" className="w-3 h-3 mr-1" />
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};