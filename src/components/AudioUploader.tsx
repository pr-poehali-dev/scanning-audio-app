import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { AudioFileList } from './audio/AudioFileList';
import { FolderUploadSection } from './audio/FolderUploadSection';
import { CellAudioSection } from './audio/CellAudioSection';
import { AudioDiagnostics } from './audio/AudioDiagnostics';

interface AudioFile {
  key: string;
  name: string;
  uploaded: boolean;
  url?: string;
}

interface AudioUploaderProps {
  onAudioFilesUpdate: (files: { [key: string]: string }) => Promise<void>;
  onClose: () => void;
  removeAudioFile: (key: string) => void;
  clearAllAudio: () => void;
  existingFiles: { [key: string]: string };
}

export const AudioUploader = ({ 
  onAudioFilesUpdate, 
  onClose, 
  removeAudioFile,
  clearAllAudio,
  existingFiles 
}: AudioUploaderProps) => {
  const [audioFiles, setAudioFiles] = useState<AudioFile[]>([
    { key: 'cell-number', name: '–Ø—á–µ–π–∫–∞ –Ω–æ–º–µ—Ä', uploaded: false },
    { key: 'check-discount-wallet', name: '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫', uploaded: false },
    { key: 'check-product-camera', name: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', uploaded: false },
    { key: 'rate-pickup-point', name: '–û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏', uploaded: false },
    { key: 'receiving-start', name: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏', uploaded: false },
    { key: 'receiving-complete', name: '–ü—Ä–∏–µ–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', uploaded: false },
    { key: 'return-start', name: '–ù–∞—á–∞–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞', uploaded: false },
    { key: 'return-complete', name: '–í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', uploaded: false },
  ]);

  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [cellUploadProgress, setCellUploadProgress] = useState(0);
  const [isCellUploading, setIsCellUploading] = useState(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
  useEffect(() => {
    setAudioFiles(prev => prev.map(item => ({
      ...item,
      uploaded: !!existingFiles[item.key],
      url: existingFiles[item.key]
    })));
  }, [existingFiles]);

  const matchAudioFileByName = (fileName: string): AudioFile | null => {
    const cleanFileName = fileName.toLowerCase().replace(/\.(mp3|wav|ogg|m4a|aac)$/, '');
    
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let match = audioFiles.find(item => item.key.toLowerCase() === cleanFileName);
    if (match) return match;
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywordMatches: {[key: string]: string[]} = {
      'cell-number': ['—è—á–µ–π–∫–∞', 'cell', '–Ω–æ–º–µ—Ä', 'number'],
      'check-discount-wallet': ['—Å–∫–∏–¥–∫–∞', 'discount', '–∫–æ—à–µ–ª–µ–∫', 'wallet', '–≤–±'],
      'check-product-camera': ['–∫–∞–º–µ—Ä–∞', 'camera', '—Ç–æ–≤–∞—Ä', 'product', '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ'],
      'rate-pickup-point': ['–æ—Ü–µ–Ω–∏—Ç–µ', 'rate', '–ø—É–Ω–∫—Ç', 'pickup', '–≤—ã–¥–∞—á–∏'],
      'receiving-start': ['–ø—Ä–∏–µ–º–∫–∞', 'receiving', '–Ω–∞—á–∞–ª–æ', 'start'],
      'receiving-complete': ['–ø—Ä–∏–µ–º–∫–∞', 'receiving', '–∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'complete'],
      'return-start': ['–≤–æ–∑–≤—Ä–∞—Ç', 'return', '–Ω–∞—á–∞–ª–æ', 'start'],
      'return-complete': ['–≤–æ–∑–≤—Ä–∞—Ç', 'return', '–∑–∞–≤–µ—Ä—à–µ–Ω', 'complete']
    };
    
    for (const [key, keywords] of Object.entries(keywordMatches)) {
      if (keywords.some(keyword => cleanFileName.includes(keyword))) {
        match = audioFiles.find(item => item.key === key);
        if (match) return match;
      }
    }
    
    return null;
  };

  const handleFolderFiles = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    setIsUploading(true);
    setUploadProgress(0);

    const audioFilesList = Array.from(files).filter(file => file.type.startsWith('audio/'));
    const totalFiles = audioFilesList.length;
    let processedFiles = 0;
    const updatedFiles: { [key: string]: string } = {};

    if (totalFiles === 0) {
      alert('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
      setIsUploading(false);
      return;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ base64 –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    for (const file of audioFilesList) {
      const matchingAudioFile = matchAudioFileByName(file.name);

      if (matchingAudioFile) {
        try {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
          const base64 = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });

          updatedFiles[matchingAudioFile.key] = base64;

          setAudioFiles(prev => prev.map(item => 
            item.key === matchingAudioFile.key
              ? { ...item, uploaded: true, url: base64 }
              : item
          ));
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:', file.name, error);
        }
      }

      processedFiles++;
      setUploadProgress((processedFiles / totalFiles) * 100);
    }

    setTimeout(async () => {
      setIsUploading(false);
      setUploadProgress(0);
      
      try {
        await onAudioFilesUpdate(updatedFiles);
        console.log('üîä –§–ê–ô–õ–´ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù–´ –í BASE64 –ò –°–û–•–†–ê–ù–ï–ù–´:', updatedFiles);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const saved = localStorage.getItem('wb-audio-files');
        console.log('üìÅ –í localStorage wb-audio-files:', saved ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
        
        const matchedCount = Object.keys(updatedFiles).length;
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${matchedCount} –∏–∑ ${totalFiles} —Ñ–∞–π–ª–æ–≤\n\nüíæ –§–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ base64 –∏ –ü–û–°–¢–û–Ø–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüîä –¢–µ–ø–µ—Ä—å –æ–∑–≤—É—á–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
      }
    }, 500);
  };

  const handleCellFolderFiles = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    setIsCellUploading(true);
    setCellUploadProgress(0);

    const audioFilesList = Array.from(files).filter(file => file.type.startsWith('audio/'));
    const totalFiles = audioFilesList.length;
    let processedFiles = 0;

    if (totalFiles === 0) {
      alert('–í –ø–∞–ø–∫–µ —Å —è—á–µ–π–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
      setIsCellUploading(false);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫ –ø–æ –Ω–æ–º–µ—Ä–∞–º
    const cellAudios: { [key: string]: string } = {};

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫ –≤ base64 –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    for (const file of audioFilesList) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
      const fileName = file.name.toLowerCase().replace(/\.(mp3|wav|ogg|m4a|aac)$/, '');
      
      // –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ò—â–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –¢–û–õ–¨–ö–û –ø–æ —á–µ—Ç–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
      let cellNumber = null;
      
      // 1. –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º: "123.mp3" ‚Üí "123"
      const exactNumber = fileName.match(/^(\d{1,4})$/);
      if (exactNumber) {
        cellNumber = exactNumber[1];
        console.log(`üì±‚úÖ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${file.name}" ‚Üí —è—á–µ–π–∫–∞ "${cellNumber}"`);
      }
      
      // 2. –¢–û–õ–¨–ö–û —Å —è–≤–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏: "—è—á–µ–π–∫–∞-123", "cell-456", "cell_789"  
      else {
        const cellPattern = fileName.match(/^(?:—è—á–µ–π–∫–∞|cell)[-_]?(\d{1,4})$/);
        if (cellPattern) {
          cellNumber = cellPattern[1];
          console.log(`üì±‚úÖ –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: "${file.name}" ‚Üí —è—á–µ–π–∫–∞ "${cellNumber}"`);
        }
      }
      
      // 3. –í–°–ï –û–°–¢–ê–õ–¨–ù–û–ï –ò–ì–ù–û–†–ò–†–£–ï–ú (–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª!)
      if (!cellNumber) {
        console.log(`üì±‚ùå –ü–†–û–ü–£–©–ï–ù —Ñ–∞–π–ª "${file.name}" - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —è—á–µ–µ–∫`);
      }
      
      // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (1-9999)
      if (cellNumber) {
        const num = parseInt(cellNumber);
        if (num < 1 || num > 9999) {
          console.log(`üì±‚ùå –û–¢–ö–õ–û–ù–ï–ù –Ω–æ–º–µ—Ä "${cellNumber}" - –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-9999`);
          cellNumber = null;
        }
      }
      
      if (cellNumber) {
        try {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
          const base64 = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });

          cellAudios[cellNumber] = base64;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —è—á–µ–π–∫–∏:', file.name, error);
        }
      }

      processedFiles++;
      setCellUploadProgress((processedFiles / totalFiles) * 100);
    }

    setTimeout(async () => {
      setIsCellUploading(false);
      setCellUploadProgress(0);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ
      const cellFilesForMainSystem: { [key: string]: string } = {};
      
      Object.entries(cellAudios).forEach(([cellNumber, base64]) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è —è—á–µ–µ–∫
        cellFilesForMainSystem[cellNumber] = base64; // –ü—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä: "12"
        cellFilesForMainSystem[`cell-${cellNumber}`] = base64; // –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: "cell-12"  
        cellFilesForMainSystem[`—è—á–µ–π–∫–∞-${cellNumber}`] = base64; // –†—É—Å—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: "—è—á–µ–π–∫–∞-12"
      });
      
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏–æ
        await onAudioFilesUpdate(cellFilesForMainSystem);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('cellAudios', JSON.stringify(cellAudios));
        
        console.log('üì± –Ø–ß–ï–ô–ö–ò –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù–´ –í BASE64 –ò –°–û–•–†–ê–ù–ï–ù–´:', cellAudios);
        
        const cellCount = Object.keys(cellAudios).length;
        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–∑–≤—É—á–∫–∏ –¥–ª—è ${cellCount} —è—á–µ–µ–∫\n\nüíæ –§–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ base64 –∏ –ü–û–°–¢–û–Ø–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüîä –¢–µ–ø–µ—Ä—å –æ–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è—á–µ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
      }
    }, 500);
  };

  const handleRemoveFile = (key: string) => {
    setAudioFiles(prev => prev.map(item => 
      item.key === key 
        ? { ...item, uploaded: false, url: undefined }
        : item
    ));
    removeAudioFile(key);
  };

  const handleClearAll = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã?')) {
      setAudioFiles(prev => prev.map(item => ({
        ...item,
        uploaded: false,
        url: undefined
      })));
      clearAllAudio();
    }
  };

  const handlePlayFile = (url: string) => {
    const audio = new Audio(url);
    audio.play().catch(console.error);
  };

  const handleClearCells = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫?')) {
      localStorage.removeItem('cellAudios');
      window.location.reload();
    }
  };

  const uploadedCount = audioFiles.filter(item => item.uploaded).length;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
  const cellAudios = JSON.parse(localStorage.getItem('cellAudios') || '{}');
  const cellCount = Object.keys(cellAudios).length;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Volume2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∑–≤—É—á–∫–∏
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <Icon name="X" className="w-5 h-5" />
          </Button>
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <div className="text-sm text-gray-600">
                –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {uploadedCount} –∏–∑ {audioFiles.length}
              </div>
              {cellCount > 0 && (
                <div className="text-sm text-blue-600">
                  üì± –Ø—á–µ–π–∫–∏: {cellCount} —à—Ç.
                </div>
              )}
            </div>
            {uploadedCount > 0 && (
              <Button 
                onClick={handleClearAll}
                variant="outline"
                size="sm"
                className="text-red-600 hover:text-red-700"
              >
                <Icon name="Trash" className="w-4 h-4 mr-1" />
                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
              </Button>
            )}
          </div>

          <FolderUploadSection
            audioFiles={audioFiles}
            isUploading={isUploading}
            uploadProgress={uploadProgress}
            onFolderFiles={handleFolderFiles}
            onFolderUpload={() => {}}
          />

          <CellAudioSection
            isCellUploading={isCellUploading}
            cellUploadProgress={cellUploadProgress}
            cellCount={cellCount}
            onCellFolderFiles={handleCellFolderFiles}
            onClearCells={handleClearCells}
          />

          <AudioFileList
            audioFiles={audioFiles}
            onPlayFile={handlePlayFile}
            onRemoveFile={handleRemoveFile}
          />

          <AudioDiagnostics />
        </CardContent>
      </Card>
    </div>
  );
};