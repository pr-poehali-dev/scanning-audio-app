import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface AudioUploaderProps {
  onAudioFilesUpdate: (files: { [key: string]: string }) => Promise<void>;
  onClose: () => void;
  removeAudioFile: (key: string) => void;
  clearAllAudio: () => void;
  existingFiles: { [key: string]: string };
}

interface AudioStage {
  key: string;
  name: string;
  description: string;
  category: 'delivery' | 'receiving' | 'returns' | 'general';
}

export const AudioUploader = ({ 
  onAudioFilesUpdate, 
  onClose, 
  removeAudioFile,
  clearAllAudio,
  existingFiles 
}: AudioUploaderProps) => {
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –æ–∑–≤—É—á–∫–∏
  const audioStages: AudioStage[] = [
    // –í–´–î–ê–ß–ê
    { key: 'check-discount-wallet', name: 'üí∞ –°–∫–∏–¥–∫–∏ –∏ –∫–æ—à–µ–ª–µ–∫', description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫, —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π', category: 'delivery' },
    { key: 'check-product-camera', name: 'üì∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞', description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π', category: 'delivery' },
    { key: 'rate-pickup-point', name: '‚≠ê –û—Ü–µ–Ω–∫–∞ –ü–í–ó', description: '–û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏', category: 'delivery' },
    
    // –ü–†–ò–ï–ú–ö–ê
    { key: 'receiving-start', name: 'üì¶ –ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∫–∏', description: '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–µ–º–∫—É —Ç–æ–≤–∞—Ä–æ–≤', category: 'receiving' },
    { key: 'receiving-complete', name: '‚úÖ –ü—Ä–∏–µ–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', description: '–ü—Ä–∏–µ–º–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', category: 'receiving' },
    
    // –í–û–ó–í–†–ê–¢–´
    { key: 'return-start', name: '‚Ü©Ô∏è –ù–∞—á–∞–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞', description: '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞', category: 'returns' },
    { key: 'return-complete', name: '‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', description: '–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', category: 'returns' },
  ];

  const [loadedFiles, setLoadedFiles] = useState<Set<string>>(new Set());
  const [cellAudioFile, setCellAudioFile] = useState<File | null>(null);
  const [cellAudioCount, setCellAudioCount] = useState(0);

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    setLoadedFiles(new Set(Object.keys(existingFiles)));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
    const cellAudios = JSON.parse(localStorage.getItem('cellAudios') || '{}');
    setCellAudioCount(Object.keys(cellAudios).length);
  }, [existingFiles]);

  const handleFileUpload = async (key: string, file: File) => {
    if (!file.type.startsWith('audio/')) {
      alert('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3, wav, ogg, m4a)');
      return;
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const base64 = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result as string);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      await onAudioFilesUpdate({ [key]: base64 });
      
      setLoadedFiles(prev => new Set([...prev, key]));
      
      console.log(`‚úÖ –§–∞–π–ª "${key}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
      alert(`‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"${audioStages.find(s => s.key === key)?.name}"`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    }
  };

  const handleCellAudioUpload = async () => {
    if (!cellAudioFile) return;

    if (!cellAudioFile.type.startsWith('audio/')) {
      alert('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–∑–≤—É—á–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫');
      return;
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const base64 = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result as string);
        reader.onerror = reject;
        reader.readAsDataURL(cellAudioFile);
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—â–∏–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
      await onAudioFilesUpdate({ 'cell-number': base64 });
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
      const cellData = { 'general': base64 };
      localStorage.setItem('cellAudios', JSON.stringify(cellData));
      
      setCellAudioCount(1);
      setCellAudioFile(null);
      
      console.log('‚úÖ –û–±—â–∞—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      alert('‚úÖ –û–∑–≤—É—á–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫');
    }
  };

  const handleRemoveFile = (key: string) => {
    removeAudioFile(key);
    setLoadedFiles(prev => {
      const newSet = new Set(prev);
      newSet.delete(key);
      return newSet;
    });
  };

  const handlePlayFile = (key: string) => {
    const file = existingFiles[key];
    if (file) {
      try {
        const audio = new Audio(file);
        audio.volume = 0.8;
        audio.play();
      } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      }
    }
  };

  const handleClearAll = () => {
    if (confirm('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–Æ –æ–∑–≤—É—á–∫—É?\n\n- –í—Å–µ —Ñ–∞–π–ª—ã —ç—Ç–∞–ø–æ–≤\n- –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫\n- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')) {
      clearAllAudio();
      localStorage.removeItem('cellAudios');
      setLoadedFiles(new Set());
      setCellAudioCount(0);
      alert('üßπ –í—Å—è –æ–∑–≤—É—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
    }
  };

  const getCategoryName = (category: string) => {
    const names = {
      'delivery': 'üì§ –í–´–î–ê–ß–ê',
      'receiving': 'üì• –ü–†–ò–ï–ú–ö–ê', 
      'returns': '‚Ü©Ô∏è –í–û–ó–í–†–ê–¢–´',
      'general': '‚öôÔ∏è –û–ë–©–ï–ï'
    };
    return names[category] || category;
  };

  const groupedStages = audioStages.reduce((acc, stage) => {
    if (!acc[stage.category]) acc[stage.category] = [];
    acc[stage.category].push(stage);
    return acc;
  }, {} as Record<string, AudioStage[]>);

  const totalLoaded = loadedFiles.size + cellAudioCount;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Volume2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∑–≤—É—á–∫–∏ ({totalLoaded} —Ñ–∞–π–ª–æ–≤)
          </CardTitle>
          <div className="flex gap-2">
            {totalLoaded > 0 && (
              <Button variant="outline" size="sm" onClick={handleClearAll} className="text-red-600">
                <Icon name="Trash" className="w-4 h-4 mr-1" />
                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
              </Button>
            )}
            <Button variant="ghost" size="sm" onClick={onClose}>
              <Icon name="X" className="w-5 h-5" />
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-6">
          
          {/* –û–ó–í–£–ß–ö–ê –Ø–ß–ï–ï–ö */}
          <div className="bg-blue-50 border-2 border-blue-200 rounded-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="text-lg font-medium text-blue-800 flex items-center gap-2">
                  <Icon name="Hash" />
                  üì± –û–∑–≤—É—á–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
                </h3>
                <p className="text-blue-600 text-sm mt-1">
                  –û–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏)
                </p>
              </div>
              {cellAudioCount > 0 && (
                <div className="text-blue-600 font-medium">
                  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ
                </div>
              )}
            </div>
            
            <div className="flex gap-3 items-center">
              <input
                type="file"
                accept="audio/*"
                onChange={(e) => setCellAudioFile(e.target.files?.[0] || null)}
                className="flex-1"
              />
              <Button 
                onClick={handleCellAudioUpload}
                disabled={!cellAudioFile}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {cellAudioCount > 0 ? '–ó–∞–º–µ–Ω–∏—Ç—å' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
              </Button>
              {cellAudioCount > 0 && (
                <Button
                  variant="outline"
                  size="sm" 
                  onClick={() => handlePlayFile('cell-number')}
                >
                  <Icon name="Play" className="w-4 h-4" />
                </Button>
              )}
            </div>
          </div>

          {/* –≠–¢–ê–ü–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú */}
          {Object.entries(groupedStages).map(([category, stages]) => (
            <div key={category} className="space-y-3">
              <h3 className="text-lg font-medium text-gray-800 border-b pb-2">
                {getCategoryName(category)}
              </h3>
              
              <div className="grid gap-4">
                {stages.map((stage) => {
                  const isLoaded = loadedFiles.has(stage.key);
                  
                  return (
                    <div key={stage.key} className="border rounded-lg p-4 bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3">
                            <div className={`w-3 h-3 rounded-full ${isLoaded ? 'bg-green-500' : 'bg-gray-300'}`} />
                            <div>
                              <h4 className="font-medium text-gray-800">{stage.name}</h4>
                              <p className="text-sm text-gray-600">{stage.description}</p>
                              <p className="text-xs text-gray-500 mt-1">–ö–ª—é—á: {stage.key}</p>
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex gap-2 items-center">
                          <input
                            type="file"
                            accept="audio/*"
                            onChange={(e) => {
                              const file = e.target.files?.[0];
                              if (file) handleFileUpload(stage.key, file);
                            }}
                            className="w-40 text-xs"
                          />
                          
                          {isLoaded && (
                            <>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handlePlayFile(stage.key)}
                              >
                                <Icon name="Play" className="w-4 h-4" />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleRemoveFile(stage.key)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Icon name="Trash" className="w-4 h-4" />
                              </Button>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          ))}

          {/* –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h4 className="font-medium text-green-800 mb-2">üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</h4>
            <div className="text-green-700 text-sm space-y-1">
              <p>‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
              <p>‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞</p>
              <p>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {totalLoaded} –∏–∑ {audioStages.length + 1}</p>
            </div>
          </div>

          {/* –¢–ï–°–¢ –û–ó–í–£–ß–ö–ò */}
          {totalLoaded > 0 && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex gap-2">
                <Button 
                  onClick={async () => {
                    // –¢–µ—Å—Ç –ª—é–±–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    const testKeys = Array.from(loadedFiles);
                    if (testKeys.length > 0) {
                      handlePlayFile(testKeys[0]);
                      alert(`üîä –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è: ${audioStages.find(s => s.key === testKeys[0])?.name}`);
                    }
                  }}
                  className="bg-yellow-600 hover:bg-yellow-700"
                >
                  <Icon name="Play" className="w-4 h-4 mr-2" />
                  üß™ –¢–µ—Å—Ç –æ–∑–≤—É—á–∫–∏
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};