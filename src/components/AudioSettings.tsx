import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { AudioManager } from './AudioManager';
import { AudioUploadGuide } from './AudioUploadGuide';
import { TTSGenerator } from './TTSGenerator';
import { AudioSettings as AudioSettingsType } from '@/hooks/useAppState';
import { audioStorage } from '@/utils/audioStorage';
import { cloudAudioStorage } from '@/utils/cloudAudioStorage';
import { Button } from './ui/button';
import Icon from '@/components/ui/icon';
import { Trash2, Cloud, Upload } from 'lucide-react';
import { useState } from 'react';

interface AudioSettingsProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  audioSettings: AudioSettingsType;
  setAudioSettings: (settings: AudioSettingsType) => void;
  uploadedFiles: { [key: string]: string };
  setUploadedFiles: (files: { [key: string]: string }) => void;
  onTestAudio: (phraseKey: string) => void;
}

export const AudioSettings = ({
  open,
  onOpenChange,
  audioSettings,
  setAudioSettings,
  uploadedFiles,
  setUploadedFiles,
  onTestAudio
}: AudioSettingsProps) => {
  const [isSyncing, setIsSyncing] = useState(false);
  const [cloudFileCount, setCloudFileCount] = useState<number | null>(null);
  
  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É (–∫–æ–ø–∏—è –∏–∑ useAudio)
  const filterFilesByVariant = (allFiles: { [key: string]: string }, variant: 'v1' | 'v2') => {
    const filtered: { [key: string]: string } = {};
    const v1Files = ['goods', 'payment_on_delivery', 'please_check_good_under_camera', 'thanks_for_order_rate_pickpoint', 'success_sound'];
    const v2Files = ['checkWBWallet', 'scanAfterQrClient', 'askRatePickPoint'];
    const allowedFiles = variant === 'v1' ? v1Files : v2Files;
    
    Object.keys(allFiles).forEach(key => {
      if (key.startsWith(`cell_${variant}_`) || allowedFiles.includes(key) || key.startsWith('count_')) {
        filtered[key] = allFiles[key];
      }
    });
    
    return filtered;
  };

  const handleClearAll = async () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      await audioStorage.clear();
      await cloudAudioStorage.clear();
      setUploadedFiles({});
      setCloudFileCount(0);
      alert('–í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.');
    }
  };

  const handleSyncToCloud = async () => {
    setIsSyncing(true);
    try {
      const localFiles = await audioStorage.getAllFiles();
      const fileCount = Object.keys(localFiles).length;
      
      if (fileCount === 0) {
        alert('–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ–±–ª–∞–∫–æ');
        setIsSyncing(false);
        return;
      }

      console.log(`üöÄ –ó–∞–≥—Ä—É–∂–∞—é ${fileCount} —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞–∫–æ...`);
      let uploaded = 0;
      let errors = 0;

      const entries = Object.entries(localFiles);
      const batchSize = 10;
      let lastError: any = null;
      const uploadedKeys: string[] = [];
      
      for (let i = 0; i < entries.length; i += batchSize) {
        const batch = entries.slice(i, i + batchSize);
        
        await Promise.all(batch.map(async ([key, data]) => {
          try {
            await cloudAudioStorage.uploadFile(key, data);
            uploaded++;
            uploadedKeys.push(key);
            if (uploaded % 50 === 0 || uploaded === fileCount) {
              console.log(`üì§ ${uploaded}/${fileCount}`);
            }
          } catch (err: any) {
            const errorDetails = {
              message: err?.message || String(err),
              name: err?.name,
              stack: err?.stack,
              cause: err?.cause
            };
            console.error(`‚ùå ${key}:`, errorDetails);
            lastError = err;
            errors++;
          }
        }));
        
        if (i + batchSize < entries.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      setCloudFileCount(uploaded);
      
      if (errors > 0 && lastError) {
        const errorMsg = lastError?.message || String(lastError);
        const successList = uploadedKeys.length > 0 
          ? `\n\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã:\n${uploadedKeys.slice(0, 10).join('\n')}${uploadedKeys.length > 10 ? `\n... –∏ –µ—â—ë ${uploadedKeys.length - 10}` : ''}` 
          : '';
        alert(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploaded} –∏–∑ ${fileCount}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: ${errors}\n\n‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:\n${errorMsg}${successList}`);
      } else {
        alert(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploaded} –∏–∑ ${fileCount}\n\n–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ!`);
      }
    } catch (error: any) {
      const errorDetails = {
        message: error?.message || String(error),
        name: error?.name,
        stack: error?.stack
      };
      console.error('–û—à–∏–±–∫–∞:', errorDetails);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:\n${errorDetails.message || error}`);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleCheckCloud = async () => {
    try {
      const cloudFiles = await cloudAudioStorage.getAllFiles();
      const count = Object.keys(cloudFiles).length;
      setCloudFileCount(count);
      alert(`‚òÅÔ∏è –í –æ–±–ª–∞–∫–µ: ${count} —Ñ–∞–π–ª–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–ª–∞–∫–∞');
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[85vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex justify-between items-center gap-2">
            <DialogTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∫–∏</DialogTitle>
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleCheckCloud}
                className="gap-2"
              >
                <Cloud className="w-4 h-4" />
                {cloudFileCount !== null ? `${cloudFileCount} –≤ –æ–±–ª–∞–∫–µ` : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
              </Button>
              <Button 
                variant="default" 
                size="sm"
                onClick={handleSyncToCloud}
                disabled={isSyncing}
                className="gap-2"
              >
                <Upload className="w-4 h-4" />
                {isSyncing ? '–ó–∞–≥—Ä—É–∂–∞—é...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ'}
              </Button>
              <Button 
                variant="destructive" 
                size="sm"
                onClick={handleClearAll}
                className="gap-2"
              >
                <Trash2 className="w-4 h-4" />
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>
          </div>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏ */}
          <div className="bg-gradient-to-r from-purple-50 to-blue-50 border-2 border-purple-300 rounded-lg p-4 shadow-sm">
            <div className="text-base font-bold text-gray-900 mb-3 flex items-center gap-2">
              <Icon name="Music" className="w-5 h-5 text-purple-600" />
              –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏
            </div>
            <div className="grid grid-cols-2 gap-3">
              <Button
                variant={audioSettings.variant === 'v1' ? 'default' : 'outline'}
                onClick={async () => {
                  if (audioSettings.variant !== 'v1') {
                    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –í–∞—Ä–∏–∞–Ω—Ç 1');
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                    const filtered = filterFilesByVariant(uploadedFiles, 'v1');
                    setUploadedFiles(filtered);
                    console.log('‚úÖ –§–∞–π–ª—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –¥–ª—è V1:', Object.keys(filtered).length);
                  }
                  const newSettings = { ...audioSettings, variant: 'v1' as 'v1' | 'v2' };
                  setAudioSettings(newSettings);
                  localStorage.setItem('wb-pvz-audio-variant', 'v1');
                }}
                className={`w-full h-14 text-base font-semibold ${
                  audioSettings.variant === 'v1' 
                    ? 'bg-purple-600 hover:bg-purple-700' 
                    : 'border-2 border-purple-300 hover:bg-purple-50'
                }`}
              >
                <div className="flex flex-col items-center gap-1">
                  <span>üì¶ –í–∞—Ä–∏–∞–Ω—Ç 1</span>
                  {audioSettings.variant === 'v1' && <span className="text-xs">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>}
                </div>
              </Button>
              <Button
                variant={audioSettings.variant === 'v2' ? 'default' : 'outline'}
                onClick={async () => {
                  if (audioSettings.variant !== 'v2') {
                    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –í–∞—Ä–∏–∞–Ω—Ç 2');
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                    const filtered = filterFilesByVariant(uploadedFiles, 'v2');
                    setUploadedFiles(filtered);
                    console.log('‚úÖ –§–∞–π–ª—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –¥–ª—è V2:', Object.keys(filtered).length);
                  }
                  const newSettings = { ...audioSettings, variant: 'v2' as 'v1' | 'v2' };
                  setAudioSettings(newSettings);
                  localStorage.setItem('wb-pvz-audio-variant', 'v2');
                }}
                className={`w-full h-14 text-base font-semibold ${
                  audioSettings.variant === 'v2' 
                    ? 'bg-blue-600 hover:bg-blue-700' 
                    : 'border-2 border-blue-300 hover:bg-blue-50'
                }`}
              >
                <div className="flex flex-col items-center gap-1">
                  <span>üì¶ –í–∞—Ä–∏–∞–Ω—Ç 2</span>
                  {audioSettings.variant === 'v2' && <span className="text-xs">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>}
                </div>
              </Button>
            </div>
            <div className="mt-3 text-xs space-y-1">
              {audioSettings.variant === 'v1' ? (
                <div className="text-purple-700">
                  <div className="font-semibold mb-1">‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1 –∞–∫—Ç–∏–≤–µ–Ω</div>
                  <div className="ml-2">
                    ‚Ä¢ QR –∫–æ–¥ ‚Üí —è—á–µ–π–∫–∞ + <strong>goods</strong> + <strong>payment_on_delivery</strong><br/>
                    ‚Ä¢ –°–Ω—è—Ç—å –≤—Å–µ ‚Üí <strong>please_check_good_under_camera</strong><br/>
                    ‚Ä¢ –í—ã–¥–∞—Ç—å ‚Üí <strong>success_sound</strong> + <strong>thanks_for_order_rate_pickpoint</strong>
                  </div>
                </div>
              ) : (
                <div className="text-blue-700">
                  <div className="font-semibold mb-1">‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2 –∞–∫—Ç–∏–≤–µ–Ω</div>
                  <div className="ml-2">
                    ‚Ä¢ QR –∫–æ–¥ ‚Üí —è—á–µ–π–∫–∞ + <strong>checkWBWallet</strong><br/>
                    ‚Ä¢ –°–Ω—è—Ç—å –≤—Å–µ ‚Üí <strong>scanAfterQrClient</strong><br/>
                    ‚Ä¢ –í—ã–¥–∞—Ç—å ‚Üí <strong>askRatePickPoint</strong>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="text-sm font-semibold text-blue-900 mb-2">üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</div>
            <div className="space-y-1 text-xs text-blue-800">
              <div>üì¶ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {Object.keys(uploadedFiles).length} —Ñ–∞–π–ª–æ–≤</div>
              {cloudFileCount !== null && (
                <div>‚òÅÔ∏è –í –æ–±–ª–∞–∫–µ: {cloudFileCount} —Ñ–∞–π–ª–æ–≤</div>
              )}
              <div className="mt-2 pt-2 border-t border-blue-200">
                <details className="cursor-pointer">
                  <summary className="font-medium">–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤</summary>
                  <div className="mt-2 max-h-32 overflow-y-auto space-y-0.5">
                    {Object.keys(uploadedFiles).length > 0 ? (
                      Object.keys(uploadedFiles).map(key => (
                        <div key={key} className="text-blue-700">‚Ä¢ {key}</div>
                      ))
                    ) : (
                      <div className="text-blue-600">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</div>
                    )}
                  </div>
                </details>
              </div>
            </div>
          </div>

          <AudioUploadGuide />
          
          <TTSGenerator
            uploadedFiles={uploadedFiles}
            setUploadedFiles={setUploadedFiles}
          />
          
          <AudioManager
            audioSettings={audioSettings}
            setAudioSettings={setAudioSettings}
            uploadedFiles={uploadedFiles}
            setUploadedFiles={setUploadedFiles}
            onTestAudio={onTestAudio}
          />
        </div>
      </DialogContent>
    </Dialog>
  );
};