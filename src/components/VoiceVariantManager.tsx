import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface VoiceVariantManagerProps {
  isOpen?: boolean;
  onClose: () => void;
}

const VoiceVariantManager: React.FC<VoiceVariantManagerProps> = ({ isOpen = true, onClose }) => {
  if (!isOpen) return null;
  const [selectedVariant, setSelectedVariant] = useState<'standard' | 'alternative'>('standard');
  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({});
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsUploading(true);
    const filesArray = Array.from(files);
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º ${filesArray.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${selectedVariant}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const storageKey = `wb-voice-${selectedVariant}-permanent`;
    let audioData: Record<string, string> = {};
    
    try {
      const existing = localStorage.getItem(storageKey);
      if (existing) {
        audioData = JSON.parse(existing);
      }
    } catch (error) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞:', selectedVariant);
    }

    let successCount = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (let i = 0; i < filesArray.length; i++) {
      const file = filesArray[i];
      const fileName = file.name;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const cellMatch = fileName.match(/(\d+)/);
      if (!cellMatch) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: ${fileName}`);
        continue;
      }
      
      const cellNumber = cellMatch[1];
      setUploadProgress(prev => ({ ...prev, [cellNumber]: 0 }));

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!file.type.startsWith('audio/')) {
          console.warn(`‚ö†Ô∏è –§–∞–π–ª ${fileName} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º`);
          setUploadProgress(prev => ({ ...prev, [cellNumber]: -1 }));
          continue;
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        const base64 = await fileToBase64(file);
        audioData[cellNumber] = base64;
        successCount++;
        
        setUploadProgress(prev => ({ ...prev, [cellNumber]: 100 }));
        console.log(`‚úÖ –§–∞–π–ª ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${fileName}:`, error);
        setUploadProgress(prev => ({ ...prev, [cellNumber]: -1 }));
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem(storageKey, JSON.stringify(audioData));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π
    const currentActiveVariant = localStorage.getItem('wb-active-voice-variant');
    if (!currentActiveVariant || currentActiveVariant === selectedVariant) {
      localStorage.setItem('wb-active-voice-variant', selectedVariant);
      console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${selectedVariant}`);
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${selectedVariant}`);
    setIsUploading(false);
    
    // –û—á–∏—â–∞–µ–º input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }

    if (successCount > 0) {
      alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –æ–∑–≤—É—á–µ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${selectedVariant}"`);
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result as string;
        resolve(result);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const getVariantInfo = (variant: 'standard' | 'alternative') => {
    const storageKey = `wb-voice-${variant}-permanent`;
    try {
      const data = localStorage.getItem(storageKey);
      if (data) {
        const parsed = JSON.parse(data);
        const count = Object.keys(parsed).filter(key => /^\d+$/.test(key)).length;
        const cells = Object.keys(parsed).filter(key => /^\d+$/.test(key)).sort((a, b) => parseInt(a) - parseInt(b));
        return { count, exists: count > 0, cells };
      }
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${variant}:`, error);
    }
    return { count: 0, exists: false, cells: [] };
  };

  const setActiveVariant = async (variant: 'standard' | 'alternative') => {
    try {
      const { activateVoiceVariant } = await import('@/utils/bulletproofAudio');
      const success = activateVoiceVariant(variant);
      
      if (success) {
        console.log(`üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${variant}`);
        alert(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–∑–≤—É—á–∫–∏: ${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}"`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞');
    }
  };

  const clearVariant = (variant: 'standard' | 'alternative') => {
    if (confirm(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–∑–≤—É—á–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}"?`)) {
      const storageKey = `wb-voice-${variant}-permanent`;
      localStorage.removeItem(storageKey);
      
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const activeVariant = localStorage.getItem('wb-active-voice-variant');
      if (activeVariant === variant) {
        localStorage.removeItem('wb-active-voice-variant');
      }
      
      alert(`üßπ –í–∞—Ä–∏–∞–Ω—Ç "${variant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}" –æ—á–∏—â–µ–Ω`);
    }
  };

  const testVariant = async (variant: 'standard' | 'alternative') => {
    const info = getVariantInfo(variant);
    if (info.cells.length === 0) {
      alert('‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testCell = info.cells[0];
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      const originalActive = localStorage.getItem('wb-active-voice-variant');
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ bulletproof —Å–∏—Å—Ç–µ–º—É
      const { activateVoiceVariant, playCellAudio } = await import('@/utils/bulletproofAudio');
      
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ${variant} —Å —è—á–µ–π–∫–æ–π ${testCell}`);
      const activated = activateVoiceVariant(variant);
      
      if (!activated) {
        alert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç "${variant}"`);
        return;
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      const success = await playCellAudio(testCell);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
      if (originalActive) {
        activateVoiceVariant(originalActive);
      } else {
        localStorage.removeItem('wb-active-voice-variant');
      }
      
      if (success) {
        alert(`‚úÖ –¢–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}" —É—Å–ø–µ—à–µ–Ω! –Ø—á–µ–π–∫–∞ ${testCell} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${testCell} –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ "${variant}"`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∑–≤—É—á–∫–∏');
    }
  };

  const standardInfo = getVariantInfo('standard');
  const alternativeInfo = getVariantInfo('alternative');
  const activeVariant = localStorage.getItem('wb-active-voice-variant');

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="Volume2" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–∑–≤—É—á–∫–∏
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <Icon name="X" className="w-5 h-5" />
          </Button>
        </CardHeader>
        
        <CardContent className="space-y-6">
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö */}
          <div className="grid grid-cols-2 gap-4">
            
            {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–∑–≤—É—á–∫–∞ */}
            <div className={`border-2 rounded-lg p-4 transition-all ${
              selectedVariant === 'standard' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
            }`}>
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-medium text-lg flex items-center gap-2">
                  <Icon name="Mic" size={20} />
                  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è
                </h3>
                {activeVariant === 'standard' && (
                  <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded font-medium">
                    –ê–ö–¢–ò–í–ù–ê
                  </span>
                )}
              </div>
              
              <div className="space-y-3">
                {standardInfo.exists ? (
                  <div className="text-sm">
                    <div className="text-green-600 font-medium mb-2">
                      <Icon name="CheckCircle" size={16} className="inline mr-1" />
                      {standardInfo.count} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                    </div>
                    <div className="text-gray-600">
                      –Ø—á–µ–π–∫–∏: {standardInfo.cells.slice(0, 10).join(', ')}
                      {standardInfo.count > 10 && '...'}
                    </div>
                  </div>
                ) : (
                  <div className="text-gray-400 text-sm">–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</div>
                )}
                
                <div className="flex gap-2 flex-wrap">
                  <Button
                    size="sm"
                    variant={selectedVariant === 'standard' ? 'default' : 'outline'}
                    onClick={() => setSelectedVariant('standard')}
                    className="flex-1"
                  >
                    –í—ã–±—Ä–∞—Ç—å
                  </Button>
                  {standardInfo.exists && (
                    <>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => testVariant('standard')}
                        className="text-blue-600"
                      >
                        <Icon name="Play" size={16} />
                      </Button>
                      {activeVariant !== 'standard' && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setActiveVariant('standard')}
                          className="text-green-600"
                        >
                          <Icon name="Power" size={16} />
                        </Button>
                      )}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => clearVariant('standard')}
                        className="text-red-600"
                      >
                        <Icon name="Trash" size={16} />
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞ */}
            <div className={`border-2 rounded-lg p-4 transition-all ${
              selectedVariant === 'alternative' ? 'border-purple-500 bg-purple-50' : 'border-gray-200'
            }`}>
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-medium text-lg flex items-center gap-2">
                  <Icon name="Mic2" size={20} />
                  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è
                </h3>
                {activeVariant === 'alternative' && (
                  <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded font-medium">
                    –ê–ö–¢–ò–í–ù–ê
                  </span>
                )}
              </div>
              
              <div className="space-y-3">
                {alternativeInfo.exists ? (
                  <div className="text-sm">
                    <div className="text-green-600 font-medium mb-2">
                      <Icon name="CheckCircle" size={16} className="inline mr-1" />
                      {alternativeInfo.count} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                    </div>
                    <div className="text-gray-600">
                      –Ø—á–µ–π–∫–∏: {alternativeInfo.cells.slice(0, 10).join(', ')}
                      {alternativeInfo.count > 10 && '...'}
                    </div>
                  </div>
                ) : (
                  <div className="text-gray-400 text-sm">–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</div>
                )}
                
                <div className="flex gap-2 flex-wrap">
                  <Button
                    size="sm"
                    variant={selectedVariant === 'alternative' ? 'default' : 'outline'}
                    onClick={() => setSelectedVariant('alternative')}
                    className="flex-1"
                  >
                    –í—ã–±—Ä–∞—Ç—å
                  </Button>
                  {alternativeInfo.exists && (
                    <>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => testVariant('alternative')}
                        className="text-purple-600"
                      >
                        <Icon name="Play" size={16} />
                      </Button>
                      {activeVariant !== 'alternative' && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setActiveVariant('alternative')}
                          className="text-green-600"
                        >
                          <Icon name="Power" size={16} />
                        </Button>
                      )}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => clearVariant('alternative')}
                        className="text-red-600"
                      >
                        <Icon name="Trash" size={16} />
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */}
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
              <Icon name="Upload" size={20} />
              –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {selectedVariant === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è' : '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è'}
            </h3>
            
            <div className="space-y-4">
              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept="audio/*,.mp3,.wav,.m4a,.ogg"
                onChange={handleFileSelect}
                className="hidden"
                id="cell-audio-upload"
              />
              
              <div className="flex gap-3">
                <label
                  htmlFor="cell-audio-upload"
                  className={`inline-flex items-center gap-2 px-6 py-3 rounded-lg font-medium cursor-pointer transition-all flex-1 justify-center ${
                    isUploading
                      ? 'bg-gray-300 cursor-not-allowed'
                      : selectedVariant === 'standard'
                      ? 'bg-blue-500 hover:bg-blue-600 text-white'
                      : 'bg-purple-500 hover:bg-purple-600 text-white'
                  }`}
                >
                  {isUploading ? (
                    <>
                      <Icon name="Loader" size={20} className="animate-spin" />
                      –ó–∞–≥—Ä—É–∂–∞–µ–º...
                    </>
                  ) : (
                    <>
                      <Icon name="Upload" size={20} />
                      –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
                    </>
                  )}
                </label>
              </div>
              
              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
              {Object.keys(uploadProgress).length > 0 && (
                <div className="bg-white rounded-lg p-4 border">
                  <h4 className="font-medium mb-3 flex items-center gap-2">
                    <Icon name="BarChart" size={16} />
                    –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:
                  </h4>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {Object.entries(uploadProgress).map(([cellNumber, progress]) => (
                      <div key={cellNumber} className="flex items-center gap-3">
                        <span className="text-sm font-mono w-12">#{cellNumber}</span>
                        <div className="flex-1 bg-gray-200 rounded-full h-2">
                          <div
                            className={`h-2 rounded-full transition-all ${
                              progress === 100 ? 'bg-green-500' : 
                              progress === -1 ? 'bg-red-500' : 'bg-blue-500'
                            }`}
                            style={{ width: `${Math.max(0, progress)}%` }}
                          />
                        </div>
                        <span className="text-sm w-8">
                          {progress === 100 ? '‚úÖ' : progress === -1 ? '‚ùå' : `${progress}%`}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-medium text-blue-900 mb-3 flex items-center gap-2">
              <Icon name="Info" size={16} />
              –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ:
            </h4>
            <ul className="text-sm text-blue-800 space-y-2">
              <li className="flex items-start gap-2">
                <span className="text-blue-600">‚Ä¢</span>
                <span><strong>–ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤:</strong> –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ (1.mp3, cell_25.wav, audio-150.m4a)</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-600">‚Ä¢</span>
                <span><strong>–§–æ—Ä–º–∞—Ç—ã:</strong> MP3, WAV, M4A, OGG –∏ –¥—Ä—É–≥–∏–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-600">‚Ä¢</span>
                <span><strong>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:</strong> –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-600">‚Ä¢</span>
                <span><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è:</strong> –æ—Å–Ω–æ–≤–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="text-blue-600">‚Ä¢</span>
                <span><strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è:</strong> –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞ (–¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å, —è–∑—ã–∫, —Å—Ç–∏–ª—å)</span>
              </li>
            </ul>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h4 className="font-medium text-green-900 mb-2 flex items-center gap-2">
              <Icon name="BarChart3" size={16} />
              –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
            </h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <div className="text-green-700">
                  <strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è:</strong> {standardInfo.count} —Ñ–∞–π–ª–æ–≤
                  {activeVariant === 'standard' && ' (–∞–∫—Ç–∏–≤–Ω–∞)'}
                </div>
              </div>
              <div>
                <div className="text-green-700">
                  <strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è:</strong> {alternativeInfo.count} —Ñ–∞–π–ª–æ–≤
                  {activeVariant === 'alternative' && ' (–∞–∫—Ç–∏–≤–Ω–∞)'}
                </div>
              </div>
            </div>
            
            {!activeVariant && (
              <div className="mt-2 text-orange-600 text-sm">
                ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VoiceVariantManager;