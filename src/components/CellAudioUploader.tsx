import React, { useState } from 'react';
import { audioManager } from '@/utils/simpleAudioManager';
import { objectUrlAudioManager } from '@/utils/objectUrlAudioManager';
import { saveCellAudioToMainSystem, getCellsFromMainSystem } from '@/utils/cellAudioIntegration';
import Icon from '@/components/ui/icon';

interface CellAudioUploaderProps {
  isOpen?: boolean;
  onClose?: () => void;
}

export const CellAudioUploader: React.FC<CellAudioUploaderProps> = ({ 
  isOpen = false, 
  onClose 
}) => {
  const [uploading, setUploading] = useState(false);
  const [uploadedCells, setUploadedCells] = useState<string[]>([]);
  const [dragActive, setDragActive] = useState(false);

  const handleFileUpload = async (files: FileList) => {
    setUploading(true);
    const successCells: string[] = [];
    
    try {
      for (const file of Array.from(files)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
        if (!file.type.startsWith('audio/')) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª ${file.name}: –Ω–µ –∞—É–¥–∏–æ`);
          continue;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const cellMatch = file.name.match(/(?:cell-)?(\w+\d+)(?:\.mp3|\.wav|\.m4a|\.ogg)?$/i);
        if (!cellMatch) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: ${file.name}`);
          continue;
        }
        
        const cellNumber = cellMatch[1].toUpperCase();
        
        // –ì–õ–ê–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ wb-audio-files (–∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–∑–≤—É—á–∫–∏)
        console.log(`üíæ [–ì–õ–ê–í–ù–ê–Ø] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...`);
        const mainSystemSuccess = await saveCellAudioToMainSystem(cellNumber, file);
        
        // –†–ï–ó–ï–†–í–ù–´–ï –°–ò–°–¢–ï–ú–´
        console.log(`üíæ [–†–ï–ó–ï–†–í] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —á–µ—Ä–µ–∑ Object URL...`);
        const objectUrlSuccess = await objectUrlAudioManager.saveCellAudio(cellNumber, file);
        
        console.log(`üíæ [–†–ï–ó–ï–†–í] –°–æ—Ö—Ä–∞–Ω—è—é ${file.name} –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} —á–µ—Ä–µ–∑ Data URL –º–µ–Ω–µ–¥–∂–µ—Ä...`);
        const dataUrlSuccess = await audioManager.saveCellAudio(cellNumber, file);
        
        if (mainSystemSuccess || objectUrlSuccess || dataUrlSuccess) {
          successCells.push(cellNumber);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber}:`);
          console.log(`   –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${mainSystemSuccess ? '‚úÖ' : '‚ùå'}`);
          console.log(`   Object URL: ${objectUrlSuccess ? '‚úÖ' : '‚ùå'}`);
          console.log(`   Data URL: ${dataUrlSuccess ? '‚úÖ' : '‚ùå'}`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã`);
        }
      }
      
      setUploadedCells(prev => [...new Set([...prev, ...successCells])]);
      
      if (successCells.length > 0) {
        console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCells.length} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    } finally {
      setUploading(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(false);
    
    if (e.dataTransfer.files) {
      handleFileUpload(e.dataTransfer.files);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(false);
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      handleFileUpload(e.target.files);
    }
  };

  const handleTestCell = async (cellNumber: string) => {
    try {
      console.log(`üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ ${cellNumber}...`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      const { playCellAudioFromMainSystem } = await import('@/utils/cellAudioIntegration');
      const mainSuccess = await playCellAudioFromMainSystem(cellNumber);
      
      if (mainSuccess) {
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É`);
        return;
      }
      
      // –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–µ
      console.log(`‚ö†Ô∏è –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ...`);
      const oldSuccess = await audioManager.playCellAudio(cellNumber);
      
      if (!oldSuccess) {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —è—á–µ–π–∫—É ${cellNumber} —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    }
  };

  const getAllCells = () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const mainCells = getCellsFromMainSystem();
      if (mainCells.length > 0) {
        console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${mainCells.length} —è—á–µ–µ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`);
        return mainCells;
      }
      
      // –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
      const oldCells = audioManager.getCellsWithAudio();
      console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${oldCells.length} —è—á–µ–µ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã`);
      return oldCells;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è—á–µ–µ–∫:', error);
      return [];
    }
  };

  const getStorageInfo = () => {
    try {
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
      const oldInfo = audioManager.getStorageInfo();
      const mainCells = getCellsFromMainSystem();
      
      return {
        totalFiles: oldInfo.totalFiles,
        totalSize: oldInfo.totalSize,
        cellsCount: Math.max(oldInfo.cellsCount, mainCells.length)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
      return { totalFiles: 0, totalSize: '0 MB', cellsCount: 0 };
    }
  };

  const clearAllAudio = () => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫?')) {
      audioManager.clearAllAudio();
      setUploadedCells([]);
      console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    }
  };

  if (!isOpen) return null;

  const allCells = getAllCells();
  const storageInfo = getStorageInfo();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">
            –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <Icon name="X" size={20} />
          </button>
        </div>

        <div className="p-6 overflow-y-auto">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ */}
          <div className="bg-blue-50 rounded-lg p-4 mb-6">
            <h3 className="font-medium text-blue-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</h3>
            <div className="text-sm text-blue-700 space-y-1">
              <div>üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {storageInfo.totalFiles}</div>
              <div>üíΩ –†–∞–∑–º–µ—Ä: {storageInfo.totalSize}</div>
              <div>üè† –Ø—á–µ–µ–∫ —Å –∞—É–¥–∏–æ: {storageInfo.cellsCount}</div>
            </div>
          </div>

          {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <div
            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
              dragActive
                ? 'border-blue-500 bg-blue-50'
                : 'border-gray-300 hover:border-gray-400'
            }`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            {uploading ? (
              <div className="flex items-center justify-center space-x-2">
                <Icon name="Loader2" size={20} className="animate-spin text-blue-500" />
                <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</span>
              </div>
            ) : (
              <>
                <Icon name="Upload" size={48} className="mx-auto text-gray-400 mb-4" />
                <p className="text-lg font-medium text-gray-700 mb-2">
                  –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —Å—é–¥–∞
                </p>
                <p className="text-sm text-gray-500 mb-4">
                  –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                </p>
                <input
                  type="file"
                  multiple
                  accept="audio/*"
                  onChange={handleFileInputChange}
                  className="hidden"
                  id="audio-file-input"
                />
                <label
                  htmlFor="audio-file-input"
                  className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer"
                >
                  <Icon name="FolderOpen" size={16} className="mr-2" />
                  –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã
                </label>
              </>
            )}
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
          <div className="bg-yellow-50 rounded-lg p-4 mt-6">
            <h4 className="font-medium text-yellow-800 mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
            <ul className="text-sm text-yellow-700 space-y-1 list-disc list-inside">
              <li>–ò–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª—ã –∫–∞–∫ <code className="bg-yellow-200 px-1 rounded">cell-A1.mp3</code> –∏–ª–∏ <code className="bg-yellow-200 px-1 rounded">B15.mp3</code></li>
              <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, OGG</li>
              <li>–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
              <li>–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞</li>
            </ul>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ */}
          {allCells.length > 0 && (
            <div className="mt-6">
              <div className="flex items-center justify-between mb-3">
                <h4 className="font-medium text-gray-900">
                  –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ ({allCells.length})
                </h4>
                <button
                  onClick={clearAllAudio}
                  className="text-sm text-red-600 hover:text-red-800"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                </button>
              </div>
              <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2 max-h-40 overflow-y-auto">
                {allCells.map(cellNumber => (
                  <button
                    key={cellNumber}
                    onClick={() => handleTestCell(cellNumber)}
                    className={`p-2 text-xs rounded border hover:bg-gray-50 transition-colors ${
                      uploadedCells.includes(cellNumber)
                        ? 'bg-green-50 border-green-200 text-green-800'
                        : 'bg-gray-50 border-gray-200 text-gray-700'
                    }`}
                    title={`–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}`}
                  >
                    {cellNumber}
                  </button>
                ))}
              </div>
              <p className="text-xs text-gray-500 mt-2">
                üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};