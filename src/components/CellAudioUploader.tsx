import React, { useState } from 'react';
import { audioManager } from '@/utils/simpleAudioManager';
import { getCellsFromMainSystem } from '@/utils/cellAudioIntegration';
import Icon from '@/components/ui/icon';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { StorageInfo } from './cell-audio/StorageInfo';
import { FileUploadZone } from './cell-audio/FileUploadZone';
import { DiagnosticTools } from './cell-audio/DiagnosticTools';
import { Instructions } from './cell-audio/Instructions';
import { CellsList } from './cell-audio/CellsList';
import { handleFileUpload } from './cell-audio/fileUploadUtils';

interface CellAudioUploaderProps {
  isOpen?: boolean;
  onClose?: () => void;
}

export const CellAudioUploader: React.FC<CellAudioUploaderProps> = ({ 
  isOpen = false, 
  onClose 
}) => {
  const [uploading, setUploading] = useState(false);
  const [uploadedCells, setUploadedCells] = useState<string[]>([]);
  const [dragActive, setDragActive] = useState(false);

  const handleTestCell = async (cellNumber: string) => {
    try {
      console.log(`üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ ${cellNumber}...`);
      
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –û–ó–í–£–ß–ö–ò –Ø–ß–ï–ï–ö
      const { playCellAudio } = await import('@/utils/cellAudioPlayer');
      const success = await playCellAudio(cellNumber);
      
      if (success) {
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!`);
      } else {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —è—á–µ–π–∫—É ${cellNumber}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const { getAudioEnabledCells } = await import('@/utils/cellAudioPlayer');
        const availableCells = getAudioEnabledCells();
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏:`, availableCells);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    }
  };

  const getAllCells = () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const mainCells = getCellsFromMainSystem();
      if (mainCells.length > 0) {
        console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${mainCells.length} —è—á–µ–µ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`);
        return mainCells;
      }
      
      // –ï—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
      const oldCells = audioManager.getCellsWithAudio();
      console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${oldCells.length} —è—á–µ–µ–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã`);
      return oldCells;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è—á–µ–µ–∫:', error);
      return [];
    }
  };

  const getStorageInfo = () => {
    try {
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
      const oldInfo = audioManager.getStorageInfo();
      const mainCells = getCellsFromMainSystem();
      
      return {
        totalFiles: oldInfo.totalFiles,
        totalSize: oldInfo.totalSize,
        cellsCount: Math.max(oldInfo.cellsCount, mainCells.length)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
      return { totalFiles: 0, totalSize: '0 MB', cellsCount: 0 };
    }
  };

  const clearAllAudio = () => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫?')) {
      audioManager.clearAllAudio();
      setUploadedCells([]);
      console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(false);
    
    if (e.dataTransfer.files) {
      handleFileUpload(e.dataTransfer.files, setUploading, setUploadedCells, handleTestCell);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragActive(false);
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      handleFileUpload(e.target.files, setUploading, setUploadedCells, handleTestCell);
    }
  };

  if (!isOpen) return null;

  const allCells = getAllCells();
  const storageInfo = getStorageInfo();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b">
          <h2 className="text-xl font-semibold text-gray-900">
            –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <Icon name="X" size={20} />
          </button>
        </div>

        <div className="p-6 overflow-y-auto">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ */}
          <StorageInfo storageInfo={storageInfo} />

          {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          <FileUploadZone
            uploading={uploading}
            dragActive={dragActive}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onFileInputChange={handleFileInputChange}
          />

          {/* –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
          <DiagnosticTools />

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <Instructions />

          {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ */}
          <CellsList
            allCells={allCells}
            uploadedCells={uploadedCells}
            onTestCell={handleTestCell}
            onClearAll={clearAllAudio}
          />
        </div>
      </div>
    </div>
  );
};