import { useRef, useEffect, useState, useCallback } from 'react';
import jsQR from 'jsqr';
import Icon from '@/components/ui/icon';

interface QRScannerProps {
  onScan: (data: string) => void;
  onClose: () => void;
  isOpen: boolean;
}

const QRScanner = ({ onScan, onClose, isOpen }: QRScannerProps) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const animationRef = useRef<number>();
  
  const [error, setError] = useState<string>('');
  const [isScanning, setIsScanning] = useState(false);

  const stopCamera = useCallback(() => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
    }
    setIsScanning(false);
  }, []);

  const startCamera = useCallback(async () => {
    try {
      setError('');
      setIsScanning(true);
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment', // –∑–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
          width: { ideal: 1280, max: 1920 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
          height: { ideal: 720, max: 1080 },
          frameRate: { ideal: 30, min: 15 }, // –í—ã—Å–æ–∫–∏–π FPS
          focusMode: 'continuous', // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞
          torch: false // –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–ø—ã—à–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        } 
      });
      
      streamRef.current = stream;
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      setIsScanning(false);
    }
  }, []);

  const scanQR = useCallback(() => {
    const video = videoRef.current;
    const canvas = canvasRef.current;
    
    if (!video || !canvas || !isScanning) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    if (video.readyState === video.HAVE_ENOUGH_DATA) {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
      
      // –£–°–ö–û–†–ï–ù–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ jsQR
      const code = jsQR(imageData.data, imageData.width, imageData.height, {
        inversionAttempts: "dontInvert", // –ù–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      });
      
      if (code && code.data.trim()) {
        console.log('üéØ QR –∫–æ–¥ –Ω–∞–π–¥–µ–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ:', code.data);
        onScan(code.data.trim());
        stopCamera();
        onClose();
        return;
      }
    }
    
    // –£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø –ß–ê–°–¢–û–¢–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø - –∫–∞–∂–¥—ã–µ 50–º—Å –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
    setTimeout(() => {
      if (isScanning) {
        animationRef.current = requestAnimationFrame(scanQR);
      }
    }, 50);
  }, [isScanning, onScan, onClose, stopCamera]);

  useEffect(() => {
    if (isOpen) {
      startCamera();
    } else {
      stopCamera();
    }
    
    return stopCamera;
  }, [isOpen, startCamera, stopCamera]);

  useEffect(() => {
    if (isScanning && videoRef.current) {
      const video = videoRef.current;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ
      video.addEventListener('loadeddata', scanQR);
      video.addEventListener('canplay', scanQR);
      video.addEventListener('playing', scanQR);
      
      // –ê–ì–†–ï–°–°–ò–í–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï - –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      scanQR();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ - —Å–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
      const aggressiveTimer = setInterval(() => {
        if (isScanning && video.readyState >= 2) {
          scanQR();
        }
      }, 100);
      
      return () => {
        video.removeEventListener('loadeddata', scanQR);
        video.removeEventListener('canplay', scanQR);
        video.removeEventListener('playing', scanQR);
        clearInterval(aggressiveTimer);
      };
    }
  }, [isScanning, scanQR]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
      <div className="relative w-full h-full max-w-2xl max-h-[80vh] bg-black rounded-lg overflow-hidden">
        {/* Header */}
        <div className="absolute top-0 left-0 right-0 z-10 bg-black bg-opacity-50 p-4">
          <div className="flex items-center justify-between text-white">
            <h3 className="text-lg font-medium">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞</h3>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white hover:bg-opacity-20 rounded-lg"
            >
              <Icon name="X" size={24} />
            </button>
          </div>
        </div>

        {/* Video */}
        <video
          ref={videoRef}
          className="w-full h-full object-cover"
          autoPlay
          playsInline
          muted
        />

        {/* Canvas (hidden) */}
        <canvas
          ref={canvasRef}
          className="hidden"
        />

        {/* Scanning Overlay */}
        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
          <div className="relative w-64 h-64">
            {/* Scanning frame */}
            <div className="absolute inset-0 border-2 border-white opacity-50 rounded-lg" />
            <div className="absolute top-0 left-0 w-8 h-8 border-l-4 border-t-4 border-purple-500" />
            <div className="absolute top-0 right-0 w-8 h-8 border-r-4 border-t-4 border-purple-500" />
            <div className="absolute bottom-0 left-0 w-8 h-8 border-l-4 border-b-4 border-purple-500" />
            <div className="absolute bottom-0 right-0 w-8 h-8 border-r-4 border-b-4 border-purple-500" />
            
            {/* Scanning line */}
            {isScanning && (
              <div className="absolute top-0 left-0 right-0 h-1 bg-purple-500 animate-pulse opacity-80" />
            )}
          </div>
        </div>

        {/* Error message */}
        {error && (
          <div className="absolute bottom-0 left-0 right-0 bg-red-600 text-white p-4">
            <div className="flex items-center gap-2">
              <Icon name="AlertCircle" size={20} />
              <span>{error}</span>
            </div>
          </div>
        )}

        {/* Instructions */}
        <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 p-4 text-white text-center">
          <p className="text-sm">
            {isScanning 
              ? '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥' 
              : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã...'
            }
          </p>
        </div>
      </div>
    </div>
  );
};

export default QRScanner;