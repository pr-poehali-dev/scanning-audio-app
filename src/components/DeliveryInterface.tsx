import { useState, useEffect } from 'react';
import Icon from '@/components/ui/icon';
import { Order, getOrderStatusText } from '@/data/mockOrders';

interface DeliveryInterfaceProps {
  order: Order | null;
  onCellClick: (cellNumber: string) => void;
  onScanProduct: () => void;
  onDeliverProduct: () => void;
  isProductScanned: boolean;
  scannedData: string;
  deliveryStep?: string; // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —à–∞–≥
}

const DeliveryInterface = ({
  order,
  onCellClick,
  onScanProduct,
  onDeliverProduct,
  isProductScanned,
  scannedData,
  deliveryStep = 'client-scanned'
}: DeliveryInterfaceProps) => {
  const [selectedCell, setSelectedCell] = useState<string>(order?.cellNumber || '');
  
  // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π currentStep, –∏—Å–ø–æ–ª—å–∑—É–µ–º deliveryStep –Ω–∞–ø—Ä—è–º—É—é

  if (!order) {
    return (
      <div className="text-center py-8">
        <Icon name="AlertCircle" size={48} className="text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    );
  }

  const orderStatus = getOrderStatusText(order.status);

  const handleCellClick = (cellNumber: string) => {
    setSelectedCell(cellNumber);
    onCellClick(cellNumber);
  };

  const handleScanProduct = () => {
    onScanProduct();
  };

  const handleDeliverProduct = () => {
    onDeliverProduct();
  };

  return (
    <div className="max-w-4xl mx-auto p-4 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ */}
      <div className="text-center space-y-2">
        <h2 className="text-2xl font-bold text-gray-900">–í—ã–¥–∞—á–∞</h2>
        <div className="space-y-1">
          <p className="text-gray-600">–ö–ª–∏–µ–Ω—Ç: <span className="font-medium">{order.customerName}</span></p>
          <p className="text-gray-600">–¢–µ–ª–µ—Ñ–æ–Ω: <span className="font-medium">{order.phone}</span></p>
          <p className="text-sm">
            –°—Ç–∞—Ç—É—Å: <span className={`font-medium ${orderStatus.color}`}>{orderStatus.text}</span>
          </p>
        </div>
      </div>

      {/* –Ø—á–µ–π–∫–∞ */}
      <div className="bg-white rounded-lg border p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">–Ø—á–µ–π–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏</h3>
        <div className="max-w-sm mx-auto">
          <div
            onClick={() => handleCellClick(order.cellNumber)}
            className={`relative cursor-pointer transition-all duration-200 ${
              selectedCell === order.cellNumber 
                ? 'ring-2 ring-purple-500 bg-purple-50' 
                : 'hover:bg-gray-50'
            }`}
          >
            <div className="bg-gray-100 rounded-lg p-8 text-center border-2 border-gray-200">
              <div className="text-sm text-gray-500 mb-2">–Ø—á–µ–π–∫–∞</div>
              <div className="text-4xl font-bold text-gray-900">{order.cellNumber}</div>
              <div className="text-sm text-gray-600 mt-3">
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∫–ª–∏–µ–Ω—Ç–∞
              </div>
              <div className="text-xs text-gray-500 mt-1">
                –ù–∞ —è—á–µ–π–∫–µ: {order.items.length}
              </div>
            </div>
          </div>
          
          {/* –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ó–í–£–ß–ö–ò */}
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="text-sm font-bold text-red-800 mb-2">üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ó–í–£–ß–ö–ò</div>
            
            {/* –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫ */}
            <div className="mb-3 p-2 bg-green-50 border border-green-200 rounded">
              <div className="text-xs font-bold text-green-800 mb-1">üÜï –¢–ï–°–¢ –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –û–ó–í–£–ß–ö–ò</div>
              <button
                onClick={async () => {
                  console.log(`üéØ –¢–ï–°–¢–ò–†–£–Æ –ù–û–í–£–Æ –û–ó–í–£–ß–ö–£ –Ø–ß–ï–ô–ö–ò ${order.cellNumber}`);
                  try {
                    const played = await playCellAudio(order.cellNumber);
                    console.log(`‚úÖ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏: ${played ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï–¢ –§–ê–ô–õ–ê'}`);
                    if (!played) {
                      alert(`–û–∑–≤—É—á–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${order.cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∫–∏".`);
                    }
                  } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
                  }
                }}
                className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-xs font-bold mr-2"
              >
                üéØ –¢–ï–°–¢ –ù–û–í–û–ô –û–ó–í–£–ß–ö–ò {order.cellNumber}
              </button>
              
              <button
                onClick={() => {
                  const hasAudio = hasCellAudio(order.cellNumber);
                  alert(`–Ø—á–µ–π–∫–∞ ${order.cellNumber} ${hasAudio ? '–ò–ú–ï–ï–¢' : '–ù–ï –ò–ú–ï–ï–¢'} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ–∑–≤—É—á–∫—É`);
                }}
                className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-xs font-bold"
              >
                ‚ÑπÔ∏è –ü–†–û–í–ï–†–ò–¢–¨ –ù–ê–õ–ò–ß–ò–ï
              </button>
            </div>
            
            <div className="grid grid-cols-2 gap-2">
              
              <button
                onClick={async () => {
                  const cellNum = order.cellNumber;
                  console.log(`üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ß–ï–ô–ö–ò ${cellNum} ===`);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                  const allStorages = Array.from({length: 20}, (_, i) => `wb-test-${i}`).concat([
                    'wb-audio-files',
                    'wb-pvz-cell-audio-settings-permanent', 
                    'wb-pvz-cell-audio-cement',
                    'wb-pvz-cell-audio-IMMEDIATE',
                    'cellAudios',
                    'audioFiles'
                  ]);
                  
                  let found = false;
                  let report = `üîç –ü–û–ò–°–ö –Ø–ß–ï–ô–ö–ò ${cellNum}:\n\n`;
                  
                  for (const storageKey of allStorages) {
                    const data = localStorage.getItem(storageKey);
                    if (data) {
                      try {
                        const files = JSON.parse(data);
                        const keys = Object.keys(files);
                        const cellKeys = keys.filter(k => 
                          k === cellNum || 
                          k === `cell-${cellNum}` || 
                          k === `—è—á–µ–π–∫–∞-${cellNum}` ||
                          k.includes(cellNum)
                        );
                        
                        if (cellKeys.length > 0) {
                          report += `‚úÖ ${storageKey}: –ù–ê–ô–î–ï–ù–û ${cellKeys.length} –∫–ª—é—á–µ–π\n`;
                          report += `   üìã –ö–ª—é—á–∏: ${cellKeys.join(', ')}\n`;
                          found = true;
                          
                          // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ü–ï–†–í–´–ô –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                          const firstKey = cellKeys[0];
                          const audioUrl = files[firstKey];
                          
                          try {
                            const audio = new Audio(audioUrl);
                            audio.volume = 1.0;
                            await audio.play();
                            report += `   üéµ –ó–í–£–ö –†–ê–ë–û–¢–ê–ï–¢!\n`;
                            setTimeout(() => audio.pause(), 3000);
                          } catch (playError) {
                            report += `   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}\n`;
                          }
                        }
                      } catch (parseError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                      }
                    }
                  }
                  
                  if (!found) {
                    report += '‚ùå –Ø–ß–ï–ô–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê –ù–ò –í –û–î–ù–û–ú –•–†–ê–ù–ò–õ–ò–©–ï!';
                  }
                  
                  alert(report);
                }}
                className="bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs font-bold"
              >
                üîç –ü–û–ò–°–ö
              </button>
              
              <button
                onClick={() => {
                  const cellNum = order.cellNumber;
                  console.log(`üíæ === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê ===`);
                  
                  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (—Ç–∏—à–∏–Ω–∞ 1 —Å–µ–∫)
                  const canvas = document.createElement('canvas');
                  const ctx = canvas.getContext('2d');
                  canvas.width = 1;
                  canvas.height = 1;
                  ctx.fillStyle = 'black';
                  ctx.fillRect(0, 0, 1, 1);
                  
                  canvas.toBlob(async (blob) => {
                    if (blob) {
                      const audioUrl = URL.createObjectURL(blob);
                      
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
                      const testFiles = {
                        [cellNum]: audioUrl,
                        [`cell-${cellNum}`]: audioUrl,
                        [`—è—á–µ–π–∫–∞-${cellNum}`]: audioUrl
                      };
                      
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                      localStorage.setItem('wb-audio-files', JSON.stringify(testFiles));
                      localStorage.setItem('wb-pvz-cell-audio-settings-permanent', JSON.stringify(testFiles));
                      localStorage.setItem('cellAudios', JSON.stringify(testFiles));
                      
                      console.log(`üíæ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`, Object.keys(testFiles));
                      alert(`üíæ –¢–ï–°–¢–û–í–´–ï –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´!\n\n–ö–ª—é—á–∏: ${Object.keys(testFiles).join(', ')}\n\n–¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —è—á–µ–π–∫–µ!`);
                    }
                  });
                }}
                className="bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs font-bold"
              >
                üíæ –°–û–ó–î–ê–¢–¨ –¢–ï–°–¢
              </button>
              
              {/* –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –°–ò–°–¢–ï–ú–´ */}
              <button
                onClick={async () => {
                  const { diagnoseCellSystem, playCellAudio } = await import('@/utils/simpleCellAudio');
                  const cellNum = order.cellNumber;
                  
                  console.log(`üöÄ === –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –°–ò–°–¢–ï–ú–´ ===`);
                  
                  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                  diagnoseCellSystem();
                  
                  // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                  const success = await playCellAudio(cellNum);
                  
                  if (success) {
                    alert(`‚úÖ –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!\n\n–Ø—á–µ–π–∫–∞ ${cellNum} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
                  } else {
                    alert(`‚ùå –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!\n\n–Ø—á–µ–π–∫–∞ ${cellNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫ –∑–∞–Ω–æ–≤–æ.`);
                  }
                }}
                className="bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs font-bold"
              >
                üöÄ –¢–ï–°–¢ –ü–†–û–°–¢–û–ô
              </button>
              
            </div>
          </div>
            
          {selectedCell === order.cellNumber && (
            <div className="absolute top-2 right-2">
              <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center">
                <Icon name="Check" size={16} className="text-white" />
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –¢–æ–≤–∞—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ */}
      <div className="bg-white rounded-lg border p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">–¢–æ–≤–∞—Ä—ã –∫ –≤—ã–¥–∞—á–µ</h3>
            {!isProductScanned && (
              <button
                onClick={handleScanProduct}
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
              >
                <Icon name="Scan" size={16} />
                –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
              </button>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {order.items.map((item, index) => (
              <div
                key={index}
                className={`border rounded-lg p-4 transition-all duration-200 ${
                  isProductScanned && scannedData.includes(item.barcode)
                    ? 'border-green-500 bg-green-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-start gap-3">
                  <img
                    src={item.image}
                    alt={item.name}
                    className="w-16 h-16 object-cover rounded-lg"
                  />
                  
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-semibold text-gray-900 mb-1 truncate">
                      {item.barcode}
                    </div>
                    <div className="text-sm text-gray-700 mb-2 line-clamp-2">
                      {item.name}
                    </div>
                    
                    <div className="space-y-1 text-xs text-gray-600">
                      <div>–¶–≤–µ—Ç: <span className="font-medium">{item.color}</span></div>
                      <div>–†–∞–∑–º–µ—Ä: <span className="font-medium">{item.size}</span></div>
                      <div>–¶–µ–Ω–∞: <span className="font-medium">{item.price} ‚ÇΩ</span></div>
                    </div>
                  </div>
                </div>

                {isProductScanned && scannedData.includes(item.barcode) && (
                  <div className="mt-3 flex items-center gap-2 text-green-700 text-sm">
                    <Icon name="CheckCircle" size={16} />
                    –¢–æ–≤–∞—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ "–í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä" */}
          {isProductScanned && (
            <div className="mt-6 pt-4 border-t border-gray-200">
              <div className="text-center">
                <button
                  onClick={handleDeliverProduct}
                  className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-medium text-lg"
                >
                  –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
                </button>
              </div>
            </div>
          )}
        </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ */}
      {deliveryStep === 'completed' && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
          <Icon name="CheckCircle" size={48} className="text-green-600 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-green-900 mb-2">–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω!</h3>
          <p className="text-green-700">–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
        </div>
      )}

      {/* QR –¥–ª—è –±—Ä–∞–∫–∞ */}
      <div className="bg-gray-50 rounded-lg p-6 text-center">
        <h4 className="font-medium text-gray-900 mb-2">QR-–∫–æ–¥ –¥–ª—è –±—Ä–∞–∫–∞ –¥–æ –ø—Ä–∏–µ–º–∫–∏</h4>
        <div className="inline-block bg-white p-4 rounded-lg border">
          <div className="w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center">
            <Icon name="QrCode" size={48} className="text-gray-400" />
          </div>
        </div>
        <p className="text-sm text-gray-600 mt-2">
          –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –±—Ä–∞–∫–∞: –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ
        </p>
        
        {/* –û–¢–õ–ê–î–ö–ê –û–ó–í–£–ß–ö–ò */}
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="space-y-2">
            <button
              onClick={() => {
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –Ø–ß–ï–ï–ö
                console.log('üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –Ø–ß–ï–ï–ö');
                localStorage.removeItem('cellAudios');
                
                // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤—Å–µ –∫–ª—é—á–∏ —Å —á–∏—Å–ª–∞–º–∏
                const storage = localStorage.getItem('wb-audio-files');
                if (storage) {
                  const files = JSON.parse(storage);
                  const cleanedFiles: {[key: string]: string} = {};
                  
                  Object.entries(files).forEach(([key, value]) => {
                    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏, –ë–ï–ó cell-–Ω–æ–º–µ—Ä–æ–≤
                    if (!key.match(/^\d+$/) && !key.startsWith('cell-') && !key.startsWith('—è—á–µ–π–∫–∞-')) {
                      cleanedFiles[key] = value;
                    }
                  });
                  
                  localStorage.setItem('wb-audio-files', JSON.stringify(cleanedFiles));
                  console.log('üßπ –û—á–∏—â–µ–Ω–æ. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:', Object.keys(cleanedFiles));
                }
                
                alert('üßπ –í–°–ï –Ø–ß–ï–ô–ö–ò –£–î–ê–õ–ï–ù–´!\n\n–°—á–µ—Ç—á–∏–∫ —è—á–µ–µ–∫ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
              }}
              className="bg-orange-500 hover:bg-orange-600 text-white px-3 py-1 rounded text-xs"
            >
              üßπ –û–ß–ò–°–¢–ò–¢–¨ –Ø–ß–ï–ô–ö–ò
            </button>
            
            <button
              onClick={async () => {
                const storage1 = localStorage.getItem('wb-audio-files');
                const storage2 = localStorage.getItem('cellAudios');
                
                console.log('üîä –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û');
                console.log('üìÅ wb-audio-files:', storage1 ? '–ï–°–¢–¨' : '–ù–ï–¢');
                console.log('üì± cellAudios:', storage2 ? '–ï–°–¢–¨' : '–ù–ï–¢');
                
                let report = 'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ó–í–£–ß–ö–ò:\n\n';
                
                if (storage1) {
                  const files = JSON.parse(storage1);
                  const keys = Object.keys(files);
                  report += `üìÅ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: ${keys.length} —à—Ç.\n`;
                  report += `üìã –°–ø–∏—Å–æ–∫: ${keys.join(', ')}\n\n`;
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
                  const firstFile = files[keys[0]];
                  if (firstFile) {
                    report += `üìè –†–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ${(firstFile.length / 1024).toFixed(1)} KB\n`;
                    report += `üíæ –¢–∏–ø: ${firstFile.startsWith('data:audio/') ? 'base64 –∞—É–¥–∏–æ' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n\n`;
                  }
                } else {
                  report += '‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ù–ï –ù–ê–ô–î–ï–ù–´!\n\n';
                }
                
                if (storage2) {
                  const cells = JSON.parse(storage2);
                  const cellKeys = Object.keys(cells);
                  report += `üì± –Ø—á–µ–π–∫–∏: ${cellKeys.length} —à—Ç.\n`;
                  if (cellKeys.length > 10) {
                    report += `üìã –ü–µ—Ä–≤—ã–µ 10: ${cellKeys.slice(0, 10).join(', ')}...\n`;
                  } else {
                    report += `üìã –°–ø–∏—Å–æ–∫: ${cellKeys.join(', ')}\n`;
                  }
                } else {
                  report += '‚ùå –Ø—á–µ–π–∫–∏ –ù–ï –ù–ê–ô–î–ï–ù–´!\n';
                }
                
                alert(report);
              }}
              className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-xs"
            >
              üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
            </button>
            
            <button
              onClick={async () => {
                const storage = localStorage.getItem('wb-audio-files');
                console.log('üîä –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–ê–ô–õ–û–í');
                
                if (storage) {
                  const files = JSON.parse(storage);
                  const keys = Object.keys(files);
                  console.log('üìÇ –í–°–ï –∫–ª—é—á–∏ –≤ storage:', keys);
                  
                  let worked = false;
                  let report = 'üîä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–û–í:\n\n';
                  
                  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
                  for (const key of keys) {
                    try {
                      console.log(`‚ñ∂Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${key}`);
                      const audio = new Audio(files[key]);
                      audio.volume = 0.5; // –¢–∏—Ö–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                      await audio.play();
                      
                      report += `‚úÖ ${key} - –†–ê–ë–û–¢–ê–ï–¢\n`;
                      worked = true;
                      
                      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                      setTimeout(() => audio.pause(), 1000);
                      await new Promise(resolve => setTimeout(resolve, 1500));
                      
                    } catch (error) {
                      report += `‚ùå ${key} - –û–®–ò–ë–ö–ê: ${error.message}\n`;
                      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å ${key}:`, error);
                    }
                  }
                  
                  if (worked) {
                    report += `\nüéâ –§–ê–ô–õ–´ –ó–ê–ì–†–£–ñ–ï–ù–´ –ü–†–ê–í–ò–õ–¨–ù–û!\n–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –º–∞–ø–ø–∏–Ω–≥–µ –∫–ª—é—á–µ–π.`;
                  } else {
                    report += `\n‚ùå –ù–ò –û–î–ò–ù —Ñ–∞–π–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º`;
                  }
                  
                  alert(report);
                } else {
                  alert('‚ùå –§–ê–ô–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´!\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ–ª–æ—Å–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞');
                }
              }}
              className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-xs"
            >
              üîä –ü–û–õ–ù–´–ô –¢–ï–°–¢
            </button>
            
            {/* –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê - –¢–ï–°–¢ –Ø–ß–ï–ô–ö–ò */}
            <button
              onClick={async () => {
                console.log('üß™ === –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –Ø–ß–ï–ô–ö–ò ===');
                
                // –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫—É –∏–∑ –∑–∞–∫–∞–∑–∞
                const testCellNumber = order?.cellNumber || '44';
                console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫—É: ${testCellNumber}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                const storages = [
                  'wb-audio-files',
                  'wb-pvz-cell-audio-settings-permanent',
                  'wb-pvz-cell-audio-cement',
                  'wb-pvz-cell-audio-IMMEDIATE'
                ];
                
                let foundFiles = false;
                let testKeys = [testCellNumber, `cell-${testCellNumber}`, `—è—á–µ–π–∫–∞-${testCellNumber}`];
                
                for (const storageKey of storages) {
                  const storage = localStorage.getItem(storageKey);
                  if (storage) {
                    try {
                      const files = JSON.parse(storage);
                      const keys = Object.keys(files);
                      console.log(`üì¶ ${storageKey}: ${keys.length} —Ñ–∞–π–ª–æ–≤`, keys);
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–ª—é—á–∏
                      for (const testKey of testKeys) {
                        if (files[testKey]) {
                          console.log(`‚úÖ –ù–ê–ô–î–ï–ù: ${testKey} –≤ ${storageKey}`);
                          
                          // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                          try {
                            const audio = new Audio(files[testKey]);
                            audio.volume = 0.7;
                            await audio.play();
                            console.log(`üéµ –ó–í–£–ö –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù: ${testKey}`);
                            foundFiles = true;
                            
                            setTimeout(() => audio.pause(), 2000);
                            alert(`‚úÖ –Ø–ß–ï–ô–ö–ê ${testCellNumber} –†–ê–ë–û–¢–ê–ï–¢!\n\n–ö–ª—é—á: ${testKey}\n–•—Ä–∞–Ω–∏–ª–∏—â–µ: ${storageKey}`);
                            return;
                          } catch (audioError) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${testKey}:`, audioError);
                          }
                        }
                      }
                    } catch (parseError) {
                      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${storageKey}:`, parseError);
                    }
                  }
                }
                
                if (!foundFiles) {
                  alert(`‚ùå –Ø–ß–ï–ô–ö–ê ${testCellNumber} –ù–ï –ù–ê–ô–î–ï–ù–ê!\n\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ ${storages.length} —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö.\n–ö–ª—é—á–∏: ${testKeys.join(', ')}\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —è—á–µ–µ–∫ –∑–∞–Ω–æ–≤–æ.`);
                }
              }}
              className="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded text-xs font-bold"
            >
              üß™ –¢–ï–°–¢ –Ø–ß–ï–ô–ö–ò {order?.cellNumber || '44'}
            </button>
            
            <button
              onClick={() => {
                console.log('üßπ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê - –£–î–ê–õ–Ø–ï–ú –í–°–Å –°–¢–ê–†–û–ï');
                
                // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –í–°–ï–• –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                localStorage.removeItem('wb-audio-files');
                localStorage.removeItem('wb-audio-cell-files');
                localStorage.removeItem('wb-pvz-uploaded-audio-files');
                
                // –û—á–∏—Å—Ç–∫–∞ blob URLs (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (window.URL && window.URL.revokeObjectURL) {
                  console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º blob URLs...');
                }
                
                alert('üßπ –í–°–Å –û–ß–ò–©–ï–ù–û!\n\nüìã –ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:\n\n1Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ–ª–æ—Å–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫–∏ –∑–∞–Ω–æ–≤–æ\n4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîä –ü–û–õ–ù–´–ô –¢–ï–°–¢"\n\n‚ú® –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!');
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫
                setTimeout(() => {
                  window.location.reload();
                }, 2000);
              }}
              className="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-xs font-bold"
            >
              üßπ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DeliveryInterface;