import Icon from '@/components/ui/icon';
import { Order } from '@/data/mockOrders';
import { hasCellAudio } from '@/utils/cellAudioPlayer';

interface DeliveryCellProps {
  order: Order;
  selectedCell: string;
  onCellClick: (cellNumber: string) => void;
}

export const DeliveryCell = ({ order, selectedCell, onCellClick }: DeliveryCellProps) => {
  const handleCellClick = async (cellNumber: string) => {
    console.log(`üéØ DeliveryCell: –ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ ${cellNumber}`);
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø onCellClick, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–∑–≤—É—á–∫–∏
    onCellClick(cellNumber);
  };

  return (
    <div className="bg-white rounded-lg border p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">–Ø—á–µ–π–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏</h3>
      <div className="max-w-sm mx-auto">
        <div
          onClick={() => handleCellClick(order.cellNumber)}
          className={`relative cursor-pointer transition-all duration-200 ${
            selectedCell === order.cellNumber 
              ? 'ring-2 ring-purple-500 bg-purple-50' 
              : 'hover:bg-gray-50'
          }`}
        >
          <div className="bg-gray-100 rounded-lg p-8 text-center border-2 border-gray-200">
            <div className="text-sm text-gray-500 mb-2 flex items-center justify-center gap-2">
              –Ø—á–µ–π–∫–∞
              {hasCellAudio(order.cellNumber) && (
                <Icon name="Volume2" size={16} className="text-green-600" title="–û–∑–≤—É—á–µ–Ω–∞" />
              )}
            </div>
            <div className="text-4xl font-bold text-gray-900">{order.cellNumber}</div>
            <div className="text-sm text-gray-600 mt-3">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∫–ª–∏–µ–Ω—Ç–∞
            </div>
            <div className="text-xs text-gray-500 mt-1">
              –ù–∞ —è—á–µ–π–∫–µ: {order.items.length}
              {hasCellAudio(order.cellNumber) && (
                <span className="text-green-600 ml-2">‚Ä¢ –û–∑–≤—É—á–µ–Ω–∞</span>
              )}
            </div>
          </div>
        </div>
          
        {selectedCell === order.cellNumber && (
          <div className="absolute top-2 right-2">
            <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center">
              <Icon name="Check" size={16} className="text-white" />
            </div>
          </div>
        )}
      </div>

      {/* –í–†–ï–ú–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê */}
      <button
        onClick={async () => {
          const cellNum = order.cellNumber;
          let report = `üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ß–ï–ô–ö–ò ${cellNum}:\n\n`;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
          const mainFiles = localStorage.getItem('wb-audio-files');
          if (mainFiles) {
            const files = JSON.parse(mainFiles);
            const keys = Object.keys(files);
            
            report += `üì¶ wb-audio-files —Å–æ–¥–µ—Ä–∂–∏—Ç ${keys.length} —Ñ–∞–π–ª–æ–≤:\n`;
            
            const cellKeys = keys.filter(k => 
              k.includes(cellNum) || 
              k.startsWith('cell-') || 
              k === cellNum
            );
            
            if (cellKeys.length > 0) {
              report += `‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}:\n`;
              cellKeys.forEach(key => {
                report += `  - ${key}: ${files[key] ? '‚úÖ URL –µ—Å—Ç—å' : '‚ùå URL –ø—É—Å—Ç–æ–π'}\n`;
              });
              
              // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
              const firstKey = cellKeys[0];
              const audioUrl = files[firstKey];
              
              if (audioUrl) {
                report += `\nüéµ –ü—Ä–æ–±—É—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: ${firstKey}\n`;
                try {
                  const audio = new Audio(audioUrl);
                  await audio.play();
                  report += `‚úÖ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!\n`;
                  setTimeout(() => audio.pause(), 2000);
                } catch (playError) {
                  report += `‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}\n`;
                }
              }
            } else {
              report += `‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}\n`;
              report += `üìã –í—Å–µ –∫–ª—é—á–∏: ${keys.slice(0, 10).join(', ')}${keys.length > 10 ? '...' : ''}\n`;
            }
          } else {
            report += `‚ùå wb-audio-files –ü–£–°–¢–û–ï!\n`;
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
          report += `\nüß™ –¢–µ—Å—Ç –ù–û–í–û–ì–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n`;
          try {
            const { playCellAudio } = await import('@/utils/cellAudioPlayer');
            const success = await playCellAudio(cellNum);
            report += success ? `‚úÖ –ù–û–í–´–ô –ú–ï–ù–ï–î–ñ–ï–† –†–ê–ë–û–¢–ê–ï–¢!\n` : `‚ùå –ù–û–í–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ù–ï –ù–ê–®–ï–õ –§–ê–ô–õ\n`;
          } catch (error) {
            report += `‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${error.message}\n`;
          }
          
          alert(report);
        }}
        className="mt-2 px-2 py-1 bg-red-500 text-white text-xs rounded"
      >
        üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê {order.cellNumber}
      </button>
    </div>
  );
};