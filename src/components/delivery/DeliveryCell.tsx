import Icon from '@/components/ui/icon';
import { Order } from '@/data/mockOrders';

interface DeliveryCellProps {
  order: Order;
  selectedCell: string;
  onCellClick: (cellNumber: string) => void;
}

export const DeliveryCell = ({ order, selectedCell, onCellClick }: DeliveryCellProps) => {
  const handleCellClick = async (cellNumber: string) => {
    console.log(`üéØ –ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ ${cellNumber} - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ —è—á–µ–µ–∫`);
    
    try {
      // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ó–í–£–ß–ö–ò –Ø–ß–ï–ï–ö
      const { playCellAudio } = await import('@/utils/cellAudioPlayer');
      
      console.log(`üîä –ü–æ–ø—ã—Ç–∫–∞ –æ–∑–≤—É—á–∏—Ç—å —è—á–µ–π–∫—É ${cellNumber}...`);
      const success = await playCellAudio(cellNumber);
      
      if (success) {
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${cellNumber} —É—Å–ø–µ—à–Ω–æ –æ–∑–≤—É—á–µ–Ω–∞!`);
      } else {
        console.warn(`‚ö†Ô∏è –û–∑–≤—É—á–∫–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const { getAudioEnabledCells } = await import('@/utils/cellAudioPlayer');
        const availableCells = getAudioEnabledCells();
        
        if (availableCells.length === 0) {
          console.warn(`üí° –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫" –≤ —à–∞–ø–∫–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MP3 —Ñ–∞–π–ª–æ–≤.`);
        } else {
          console.warn(`üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏ —Å –æ–∑–≤—É—á–∫–æ–π: ${availableCells.slice(0, 5).join(', ')}`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ ${cellNumber}:`, error);
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    onCellClick(cellNumber);
  };

  const isSelected = selectedCell === order.cellNumber;

  return (
    <div 
      className={`p-6 rounded-lg border-2 cursor-pointer transition-all ${
        isSelected 
          ? 'border-purple-500 bg-purple-50' 
          : 'border-gray-200 bg-white hover:border-gray-300'
      }`}
      onClick={() => handleCellClick(order.cellNumber)}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
            isSelected ? 'bg-purple-600' : 'bg-gray-400'
          }`}>
            {order.cellNumber}
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">–Ø—á–µ–π–∫–∞ {order.cellNumber}</h3>
            <p className="text-sm text-gray-600">–ó–∞–∫–∞–∑ #{order.id}</p>
          </div>
        </div>
        
        {isSelected && (
          <Icon name="Check" size={24} className="text-purple-600" />
        )}
      </div>
      
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700">–¢–æ–≤–∞—Ä—ã:</span>
          <span className="text-sm text-gray-600">{order.items.length} —à—Ç.</span>
        </div>
        
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
          <span className="text-sm font-semibold text-gray-900">{order.totalPrice} ‚ÇΩ</span>
        </div>
        
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700">–°—Ç–∞—Ç—É—Å:</span>
          <span className={`text-xs px-2 py-1 rounded-full ${
            order.status === 'ready' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-yellow-100 text-yellow-800'
          }`}>
            {order.status === 'ready' ? '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ' : '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}
          </span>
        </div>
      </div>
    </div>
  );
};