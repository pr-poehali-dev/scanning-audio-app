import Icon from '@/components/ui/icon';
import { Order } from '@/data/mockOrders';
import { hasCellAudio } from '@/utils/cellAudioPlayer';

interface DeliveryCellProps {
  order: Order;
  selectedCell: string;
  onCellClick: (cellNumber: string) => void;
}

export const DeliveryCell = ({ order, selectedCell, onCellClick }: DeliveryCellProps) => {
  const handleCellClick = async (cellNumber: string) => {
    console.log(`üéØ DeliveryCell: –ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ ${cellNumber}`);
    
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø onCellClick, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–∑–≤—É—á–∫–∏
    onCellClick(cellNumber);
  };

  return (
    <div className="bg-white rounded-lg border p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">–Ø—á–µ–π–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏</h3>
      <div className="max-w-sm mx-auto">
        <div
          onClick={() => handleCellClick(order.cellNumber)}
          className={`relative cursor-pointer transition-all duration-200 ${
            selectedCell === order.cellNumber 
              ? 'ring-2 ring-purple-500 bg-purple-50' 
              : 'hover:bg-gray-50'
          }`}
        >
          <div className="bg-gray-100 rounded-lg p-8 text-center border-2 border-gray-200">
            <div className="text-sm text-gray-500 mb-2 flex items-center justify-center gap-2">
              –Ø—á–µ–π–∫–∞
              {hasCellAudio(order.cellNumber) && (
                <Icon name="Volume2" size={16} className="text-green-600" title="–û–∑–≤—É—á–µ–Ω–∞" />
              )}
            </div>
            <div className="text-4xl font-bold text-gray-900">{order.cellNumber}</div>
            <div className="text-sm text-gray-600 mt-3">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∫–ª–∏–µ–Ω—Ç–∞
            </div>
            <div className="text-xs text-gray-500 mt-1">
              –ù–∞ —è—á–µ–π–∫–µ: {order.items.length}
              {hasCellAudio(order.cellNumber) && (
                <span className="text-green-600 ml-2">‚Ä¢ –û–∑–≤—É—á–µ–Ω–∞</span>
              )}
            </div>
          </div>
        </div>
          
        {selectedCell === order.cellNumber && (
          <div className="absolute top-2 right-2">
            <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center">
              <Icon name="Check" size={16} className="text-white" />
            </div>
          </div>
        )}
      </div>

      {/* –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê + –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò */}
      <div className="mt-2 flex gap-1">
        <button
          onClick={async () => {
            const cellNum = order.cellNumber;
            let report = `üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ß–ï–ô–ö–ò ${cellNum}:\n\n`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const mainFiles = localStorage.getItem('wb-audio-files');
            if (mainFiles) {
              const files = JSON.parse(mainFiles);
              const keys = Object.keys(files);
              
              report += `üì¶ wb-audio-files —Å–æ–¥–µ—Ä–∂–∏—Ç ${keys.length} —Ñ–∞–π–ª–æ–≤:\n`;
              
              const cellKeys = keys.filter(k => 
                k.includes(cellNum) || 
                k.startsWith('cell-') || 
                k === cellNum
              );
              
              if (cellKeys.length > 0) {
                report += `‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}:\n`;
                cellKeys.forEach(key => {
                  const url = files[key];
                  const urlType = url ? (url.startsWith('data:') ? 'DATA' : url.startsWith('blob:') ? 'BLOB' : 'OTHER') : 'EMPTY';
                  report += `  - ${key}: ${urlType} (${url ? url.substring(0, 30) + '...' : '–ø—É—Å—Ç–æ–π'})\n`;
                });
              } else {
                report += `‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}\n`;
                report += `üìã –í—Å–µ –∫–ª—é—á–∏: ${keys.slice(0, 10).join(', ')}${keys.length > 10 ? '...' : ''}\n`;
              }
            } else {
              report += `‚ùå wb-audio-files –ü–£–°–¢–û–ï!\n`;
            }
            
            alert(report);
          }}
          className="px-2 py-1 bg-red-500 text-white text-xs rounded"
        >
          üîç
        </button>
        
        <input
          type="file"
          accept="audio/*"
          onChange={async (e) => {
            const file = e.target.files?.[0];
            if (!file) return;
            
            const cellNum = order.cellNumber;
            console.log(`üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò: ${file.name} ‚Üí —è—á–µ–π–∫–∞ ${cellNum}`);
            
            try {
              const { saveCellAudioToMainSystem } = await import('@/utils/cellAudioIntegration');
              const success = await saveCellAudioToMainSystem(cellNum, file);
              
              if (success) {
                alert(`‚úÖ –§–∞–π–ª ${file.name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}!\n\n–¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —è—á–µ–π–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);
              } else {
                alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —è—á–µ–π–∫–∏ ${cellNum}`);
              }
            } catch (error) {
              alert(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            }
          }}
          className="text-xs w-20"
        />
      </div>
    </div>
  );
};