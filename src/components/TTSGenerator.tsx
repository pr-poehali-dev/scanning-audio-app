import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import Icon from '@/components/ui/icon';
import { audioStorage } from '@/utils/audioStorage';

interface TTSGeneratorProps {
  uploadedFiles: { [key: string]: string };
  setUploadedFiles: (files: { [key: string]: string }) => void;
}

export const TTSGenerator = ({ uploadedFiles, setUploadedFiles }: TTSGeneratorProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [status, setStatus] = useState('');

  const textToAudioBlob = async (text: string): Promise<Blob> => {
    return new Promise((resolve, reject) => {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      utterance.pitch = 1;

      const chunks: BlobPart[] = [];
      const mediaRecorder = new MediaRecorder(new MediaStream());

      mediaRecorder.ondataavailable = (e) => {
        if (e.data.size > 0) chunks.push(e.data);
      };

      mediaRecorder.onstop = () => {
        resolve(new Blob(chunks, { type: 'audio/webm' }));
      };

      utterance.onend = () => {
        mediaRecorder.stop();
      };

      utterance.onerror = (err) => {
        reject(err);
      };

      mediaRecorder.start();
      speechSynthesis.speak(utterance);
    });
  };

  const blobToBase64 = (blob: Blob): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  };

  const generateAllAudio = async (variant: 'v1' | 'v2') => {
    setIsGenerating(true);
    setProgress(0);
    
    const newFiles = { ...uploadedFiles };
    const phrasesCount = variant === 'v1' ? 4 : 3; // v1: 4 —Ñ—Ä–∞–∑—ã, v2: 3 —Ñ—Ä–∞–∑—ã
    const totalFiles = 482 + phrasesCount; // —è—á–µ–π–∫–∏ + —Ñ—Ä–∞–∑—ã (–±–µ–∑ count)

    let processed = 0;

    try {
      // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      setStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑...');

      if (variant === 'v1') {
        const goodsBlob = await textToAudioBlob('—Ç–æ–≤–∞—Ä—ã');
        newFiles['goods'] = await blobToBase64(goodsBlob);
        await audioStorage.saveFile('goods', new File([goodsBlob], 'goods.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));

        const paymentBlob = await textToAudioBlob('–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏');
        newFiles['payment_on_delivery'] = await blobToBase64(paymentBlob);
        await audioStorage.saveFile('payment_on_delivery', new File([paymentBlob], 'payment_on_delivery.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));

        const checkProductBlob = await textToAudioBlob('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
        newFiles['please_check_good_under_camera'] = await blobToBase64(checkProductBlob);
        await audioStorage.saveFile('please_check_good_under_camera', new File([checkProductBlob], 'please_check_good_under_camera.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));

        const thanksBlob = await textToAudioBlob('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
        newFiles['thanks_for_order_rate_pickpoint'] = await blobToBase64(thanksBlob);
        await audioStorage.saveFile('thanks_for_order_rate_pickpoint', new File([thanksBlob], 'thanks_for_order_rate_pickpoint.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));
      } else {
        const checkWBWalletBlob = await textToAudioBlob('–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ –∫–æ—à–µ–ª—ë–∫');
        newFiles['checkWBWallet'] = await blobToBase64(checkWBWalletBlob);
        await audioStorage.saveFile('checkWBWallet', new File([checkWBWalletBlob], 'checkWBWallet.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));

        const scanAfterQrBlob = await textToAudioBlob('–æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –∫—é–∞—Ä –∫–ª–∏–µ–Ω—Ç–∞');
        newFiles['scanAfterQrClient'] = await blobToBase64(scanAfterQrBlob);
        await audioStorage.saveFile('scanAfterQrClient', new File([scanAfterQrBlob], 'scanAfterQrClient.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));

        const askRateBlob = await textToAudioBlob('–æ—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏');
        newFiles['askRatePickPoint'] = await blobToBase64(askRateBlob);
        await audioStorage.saveFile('askRatePickPoint', new File([askRateBlob], 'askRatePickPoint.webm'));
        processed++;
        setProgress(Math.round((processed / totalFiles) * 100));
      }

      // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ (1-482) - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–≤–æ—è –æ–∑–≤—É—á–∫–∞
      setStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ (—ç—Ç–æ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç)...');
      const cellPrefix = variant === 'v1' ? 'cell_v1_' : 'cell_v2_';
      for (let i = 1; i <= 482; i++) {
        const text = String(i);
        const blob = await textToAudioBlob(text);
        newFiles[`${cellPrefix}${i}`] = await blobToBase64(blob);
        await audioStorage.saveFile(`${cellPrefix}${i}`, new File([blob], `${cellPrefix}${i}.webm`));
        processed++;
        if (processed % 10 === 0) {
          setProgress(Math.round((processed / totalFiles) * 100));
          setStatus(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —è—á–µ–µ–∫ (${variant}): ${i}/482...`);
        }
      }

      setUploadedFiles(newFiles);
      setStatus('‚úÖ –ì–æ—Ç–æ–≤–æ! –û–∑–≤—É—á–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
      setProgress(100);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      setStatus('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏');
    } finally {
      setIsGenerating(false);
    }
  };

  const cellV1Count = Object.keys(uploadedFiles).filter(k => k.startsWith('cell_v1_')).length;
  const cellV2Count = Object.keys(uploadedFiles).filter(k => k.startsWith('cell_v2_')).length;
  
  // –í–∞—Ä–∏–∞–Ω—Ç 1
  const hasGoods = !!uploadedFiles['goods'];
  const hasPayment = !!uploadedFiles['payment_on_delivery'];
  const hasCheckProduct = !!uploadedFiles['please_check_good_under_camera'];
  const hasThanks = !!uploadedFiles['thanks_for_order_rate_pickpoint'];
  
  // –í–∞—Ä–∏–∞–Ω—Ç 2
  const hasCheckWBWallet = !!uploadedFiles['checkWBWallet'];
  const hasScanAfterQr = !!uploadedFiles['scanAfterQrClient'];
  const hasAskRate = !!uploadedFiles['askRatePickPoint'];

  const isV1Complete = cellV1Count === 482 && hasPayment && hasGoods && hasCheckProduct && hasThanks;
  const isV2Complete = cellV2Count === 482 && hasCheckWBWallet && hasScanAfterQr && hasAskRate;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="Mic" className="w-5 h-5" />
          –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Alert>
          <AlertDescription>
            <p className="text-sm font-medium mb-2">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</p>
            <p className="text-xs">
              –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –æ–∑–≤—É—á–∫—É 482 —è—á–µ–µ–∫ + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
              –≠—Ç–æ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç. –û–∑–≤—É—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.
            </p>
          </AlertDescription>
        </Alert>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 space-y-2">
          <div className="text-sm font-medium">üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</div>
          <div className="text-xs space-y-1">
            <div className="font-semibold mt-2">–í–∞—Ä–∏–∞–Ω—Ç 1:</div>
            <div className="ml-2">‚Ä¢ –Ø—á–µ–π–∫–∏ v1: {cellV1Count}/482</div>
            <div className="ml-2">‚Ä¢ goods: {hasGoods ? '‚úÖ' : '‚ùå'}</div>
            <div className="ml-2">‚Ä¢ payment_on_delivery: {hasPayment ? '‚úÖ' : '‚ùå'}</div>
            <div className="ml-2">‚Ä¢ please_check_good_under_camera: {hasCheckProduct ? '‚úÖ' : '‚ùå'}</div>
            <div className="ml-2">‚Ä¢ thanks_for_order_rate_pickpoint: {hasThanks ? '‚úÖ' : '‚ùå'}</div>
            <div className="font-semibold mt-2">–í–∞—Ä–∏–∞–Ω—Ç 2:</div>
            <div className="ml-2">‚Ä¢ –Ø—á–µ–π–∫–∏ v2: {cellV2Count}/482</div>
            <div className="ml-2">‚Ä¢ checkWBWallet: {hasCheckWBWallet ? '‚úÖ' : '‚ùå'}</div>
            <div className="ml-2">‚Ä¢ scanAfterQrClient: {hasScanAfterQr ? '‚úÖ' : '‚ùå'}</div>
            <div className="ml-2">‚Ä¢ askRatePickPoint: {hasAskRate ? '‚úÖ' : '‚ùå'}</div>
          </div>
        </div>

        {isGenerating && (
          <div className="space-y-2">
            <div className="text-sm font-medium">{status}</div>
            <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
              <div 
                className="bg-blue-600 h-4 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
            <div className="text-xs text-center text-gray-600">{progress}%</div>
          </div>
        )}

        <div className="grid grid-cols-2 gap-2">
          <Button
            onClick={() => generateAllAudio('v1')}
            disabled={isGenerating || isV1Complete}
            className="w-full"
            size="lg"
            variant="outline"
          >
            {isGenerating ? (
              <>
                <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                {progress}%
              </>
            ) : isV1Complete ? (
              <>
                <Icon name="Check" className="w-4 h-4 mr-2" />
                V1 –≥–æ—Ç–æ–≤–æ
              </>
            ) : (
              <>
                <Icon name="Mic" className="w-4 h-4 mr-2" />
                –í–∞—Ä–∏–∞–Ω—Ç 1
              </>
            )}
          </Button>
          <Button
            onClick={() => generateAllAudio('v2')}
            disabled={isGenerating || isV2Complete}
            className="w-full"
            size="lg"
          >
            {isGenerating ? (
              <>
                <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                {progress}%
              </>
            ) : isV2Complete ? (
              <>
                <Icon name="Check" className="w-4 h-4 mr-2" />
                V2 –≥–æ—Ç–æ–≤–æ
              </>
            ) : (
              <>
                <Icon name="Mic" className="w-4 h-4 mr-2" />
                –í–∞—Ä–∏–∞–Ω—Ç 2
              </>
            )}
          </Button>
        </div>
        
        <Alert className="bg-gray-50">
          <AlertDescription>
            <div className="text-xs space-y-1">
              <div><strong>–í–∞—Ä–∏–∞–Ω—Ç 1:</strong> –Ø—á–µ–π–∫–∏ cell_v1_1...482 + goods, payment_on_delivery, please_check_good_under_camera, thanks_for_order_rate_pickpoint</div>
              <div><strong>–í–∞—Ä–∏–∞–Ω—Ç 2:</strong> –Ø—á–µ–π–∫–∏ cell_v2_1...482 + checkWBWallet, scanAfterQrClient, askRatePickPoint</div>
            </div>
          </AlertDescription>
        </Alert>

        {(isV1Complete || isV2Complete) && (
          <Alert className="bg-green-50 border-green-200">
            <AlertDescription>
              <div className="flex items-center gap-2 text-green-800">
                <Icon name="CheckCircle" className="w-4 h-4" />
                <span className="text-sm font-medium">
                  {isV1Complete && isV2Complete ? '–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–∑–≤—É—á–∫–∏ –≥–æ—Ç–æ–≤—ã!' : isV1Complete ? '–í–∞—Ä–∏–∞–Ω—Ç 1 –≥–æ—Ç–æ–≤!' : '–í–∞—Ä–∏–∞–Ω—Ç 2 –≥–æ—Ç–æ–≤!'}
                </span>
              </div>
            </AlertDescription>
          </Alert>
        )}

        <Alert>
          <AlertDescription>
            <p className="text-xs text-gray-600">
              ‚ö†Ô∏è –û–∑–≤—É—á–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–º –±—Ä–∞—É–∑–µ—Ä–∞. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∑–≤—É—á–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä.
            </p>
          </AlertDescription>
        </Alert>
      </CardContent>
    </Card>
  );
};