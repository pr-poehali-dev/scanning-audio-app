import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

interface CellAudio {
  cellNumber: string;
  audioFile: File | null;
  audioUrl?: string;
}

interface CellAudioManagerProps {
  cellAudios: CellAudio[];
  onCellAudiosUpdate: (cellAudios: CellAudio[]) => void;
}

export const CellAudioManager = ({ cellAudios, onCellAudiosUpdate }: CellAudioManagerProps) => {
  const [newCellNumber, setNewCellNumber] = useState('');
  const fileInputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({});

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —è—á–µ–π–∫—É
  const addNewCell = () => {
    if (!newCellNumber.trim()) return;
    
    const exists = cellAudios.some(cell => cell.cellNumber === newCellNumber.toUpperCase());
    if (exists) {
      alert('–Ø—á–µ–π–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      return;
    }

    const newCell: CellAudio = {
      cellNumber: newCellNumber.toUpperCase(),
      audioFile: null
    };

    onCellAudiosUpdate([...cellAudios, newCell]);
    setNewCellNumber('');
  };

  // –£–¥–∞–ª–∏—Ç—å —è—á–µ–π–∫—É
  const removeCell = (cellNumber: string) => {
    const updatedCells = cellAudios.filter(cell => cell.cellNumber !== cellNumber);
    onCellAudiosUpdate(updatedCells);
  };

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏
  const handleAudioUpload = (cellNumber: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('audio/') && 
        !/\.(mp3|wav|ogg|m4a|aac|flac)$/i.test(file.name)) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª (MP3, WAV, OGG, M4A, AAC, FLAC)');
      return;
    }

    const audioUrl = URL.createObjectURL(file);
    
    const updatedCells = cellAudios.map(cell => 
      cell.cellNumber === cellNumber 
        ? { ...cell, audioFile: file, audioUrl }
        : cell
    );
    
    onCellAudiosUpdate(updatedCells);
  };

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
  const playAudio = (audioUrl: string) => {
    const audio = new Audio(audioUrl);
    audio.play();
  };

  // –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —è—á–µ–π–∫–∏
  const removeAudio = (cellNumber: string) => {
    const updatedCells = cellAudios.map(cell => 
      cell.cellNumber === cellNumber 
        ? { ...cell, audioFile: null, audioUrl: undefined }
        : cell
    );
    
    onCellAudiosUpdate(updatedCells);
  };

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏
  const clearAllCells = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏ –∏ –∏—Ö –æ–∑–≤—É—á–∫—É?')) {
      onCellAudiosUpdate([]);
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
  const addStandardCells = () => {
    const standardCells = [];
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ A1-A10, B1-B10, C1-C10
    for (let row of ['A', 'B', 'C']) {
      for (let num = 1; num <= 10; num++) {
        const cellNumber = `${row}${num}`;
        if (!cellAudios.some(cell => cell.cellNumber === cellNumber)) {
          standardCells.push({
            cellNumber,
            audioFile: null
          });
        }
      }
    }
    
    if (standardCells.length > 0) {
      onCellAudiosUpdate([...cellAudios, ...standardCells]);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="font-medium text-lg flex items-center gap-2">
          <Icon name="Grid3X3" size={20} className="text-purple-600" />
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–æ–π —è—á–µ–µ–∫
          <Badge variant="secondary">{cellAudios.length} —è—á–µ–µ–∫</Badge>
        </h3>
        
        {cellAudios.length > 0 && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllCells}
            className="text-red-500 hover:text-red-700"
          >
            <Icon name="Trash2" size={16} className="mr-1" />
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </Button>
        )}
      </div>

      {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ */}
      <div className="border rounded-lg p-4 space-y-3">
        <h4 className="font-medium flex items-center gap-2">
          <Icon name="Plus" size={16} className="text-green-600" />
          –î–æ–±–∞–≤–∏—Ç—å —è—á–µ–π–∫—É
        </h4>
        
        <div className="flex gap-2">
          <Input
            placeholder="–ù–æ–º–µ—Ä —è—á–µ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: A1, B15)"
            value={newCellNumber}
            onChange={(e) => setNewCellNumber(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addNewCell()}
            className="flex-1"
          />
          <Button onClick={addNewCell} disabled={!newCellNumber.trim()}>
            <Icon name="Plus" size={16} className="mr-1" />
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </div>

        <Button
          variant="outline"
          onClick={addStandardCells}
          className="w-full"
        >
          <Icon name="Grid3X3" size={16} className="mr-2" />
          –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —è—á–µ–π–∫–∏ (A1-A10, B1-B10, C1-C10)
        </Button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ */}
      {cellAudios.length > 0 ? (
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {cellAudios.map((cell, index) => (
            <div key={cell.cellNumber} className="border rounded-lg p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                    <Icon name="MapPin" size={16} className="text-purple-600" />
                  </div>
                  <span className="font-medium text-lg">–Ø—á–µ–π–∫–∞ {cell.cellNumber}</span>
                  {cell.audioFile && (
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      <Icon name="Volume2" size={12} className="mr-1" />
                      –û–∑–≤—É—á–µ–Ω–∞
                    </Badge>
                  )}
                </div>
                
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => removeCell(cell.cellNumber)}
                  className="text-red-500 hover:text-red-700"
                >
                  <Icon name="X" size={16} />
                </Button>
              </div>

              <div className="flex gap-2">
                <input
                  ref={(el) => fileInputRefs.current[cell.cellNumber] = el}
                  type="file"
                  accept="audio/*"
                  onChange={(e) => handleAudioUpload(cell.cellNumber, e)}
                  className="hidden"
                />
                
                {cell.audioFile ? (
                  <>
                    <Button
                      variant="outline"
                      onClick={() => cell.audioUrl && playAudio(cell.audioUrl)}
                      className="flex-1"
                    >
                      <Icon name="Play" size={16} className="mr-2" />
                      –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {cell.audioFile.name}
                    </Button>
                    <Button
                      variant="ghost"
                      onClick={() => removeAudio(cell.cellNumber)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Icon name="Trash2" size={16} />
                    </Button>
                  </>
                ) : (
                  <Button
                    variant="outline"
                    onClick={() => fileInputRefs.current[cell.cellNumber]?.click()}
                    className="flex-1"
                  >
                    <Icon name="Upload" size={16} className="mr-2" />
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–ª—è —è—á–µ–π–∫–∏ {cell.cellNumber}
                  </Button>
                )}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          <Icon name="Grid3X3" size={48} className="mx-auto mb-2 text-gray-300" />
          <p>–Ø—á–µ–π–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
          <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Ö –æ–∑–≤—É—á–∫–∏</p>
        </div>
      )}

      <div className="space-y-3">
        <div className="bg-blue-50 p-4 rounded-lg">
          <div className="flex items-start gap-3">
            <Icon name="Info" size={20} className="text-blue-600 mt-0.5" />
            <div className="text-sm text-blue-800">
              <p className="font-medium mb-1">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫:</p>
              <ul className="space-y-1 text-blue-700">
                <li>‚Ä¢ –ü—Ä–∏ –ø—Ä–∏–µ–º–∫–µ –∏–ª–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —è—á–µ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –µ—ë –∞—É–¥–∏–æ</li>
                <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, OGG, M4A, AAC, FLAC</li>
                <li>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –≥–æ–ª–æ—Å–æ–º: "–Ø—á–µ–π–∫–∞ –ê –æ–¥–∏–Ω" –¥–ª—è A1</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="bg-green-50 p-4 rounded-lg border border-green-200">
          <div className="flex items-start gap-3">
            <Icon name="CheckCircle" size={20} className="text-green-600 mt-0.5" />
            <div className="text-sm text-green-800">
              <p className="font-medium mb-1">üíæ –ì–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫:</p>
              <ul className="space-y-1 text-green-700">
                <li>‚Ä¢ –û–∑–≤—É—á–∫–∞ —è—á–µ–µ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ <strong>"–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤"</strong></li>
                <li>‚Ä¢ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "delivery-cell-" (–Ω–∞–ø—Ä–∏–º–µ—Ä: delivery-cell-A1)</li>
                <li>‚Ä¢ –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º</li>
                <li>‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ–∑–≤—É—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};