import React, { useState } from 'react';
import { ArrowLeft } from 'lucide-react';
import QRScanner from './QRScanner';
import { Button } from '@/components/ui/button';

// –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import AcceptanceSteps from './acceptance/AcceptanceSteps';
import AcceptanceAnalyzer from './acceptance/AcceptanceAnalyzer';
import { createAcceptanceAudioUtils } from './acceptance/AcceptanceAudioUtils';
import { 
  AcceptanceTabProps, 
  AcceptanceStep, 
  AcceptanceItem 
} from './acceptance/AcceptanceTypes';

const AcceptanceTab = ({ playAudio, customAudioFiles }: AcceptanceTabProps) => {
  const [currentStep, setCurrentStep] = useState<AcceptanceStep>('box');
  const [boxBarcode, setBoxBarcode] = useState('');
  const [showScanner, setShowScanner] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [scannedCode, setScannedCode] = useState('');
  const [acceptanceItems, setAcceptanceItems] = useState<AcceptanceItem[]>([]);
  const [audioTranscriptions, setAudioTranscriptions] = useState<Record<string, string>>({});
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // –°–æ–∑–¥–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
  const audioUtils = createAcceptanceAudioUtils({ playAudio, customAudioFiles });

  // üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  React.useEffect(() => {
    console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–©–ï–ù–ù–´–• –ê–£–î–ò–û–§–ê–ô–õ–û–í');
    try {
      const protectedFiles = localStorage.getItem('wb-pvz-cell-audio-settings-permanent');
      const lock = localStorage.getItem('wb-pvz-cell-audio-lock');
      
      if (protectedFiles && lock === 'LOCKED') {
        const savedFiles = JSON.parse(protectedFiles);
        console.log('üîì –ù–ê–ô–î–ï–ù–´ –ó–ê–©–ò–©–ï–ù–ù–´–ï –§–ê–ô–õ–´:', Object.keys(savedFiles));
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        const mergedFiles = { ...customAudioFiles, ...savedFiles };
        console.log('üîó –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –§–ê–ô–õ–´:', Object.keys(mergedFiles));
      } else {
        console.log('‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }, [customAudioFiles]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const generateRandomProductName = () => {
    const productNames = [
      '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy',
      '–ù–∞—É—à–Ω–∏–∫–∏ Apple AirPods',  
      '–ö—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è Nike',
      '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Adidas',
      '–†—é–∫–∑–∞–∫ —à–∫–æ–ª—å–Ω—ã–π',
      '–ü–ª–∞–Ω—à–µ—Ç iPad',
      '–ö–Ω–∏–≥–∞ "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"',
      '–ò–≥—Ä—É—à–∫–∞ –º—è–≥–∫–∞—è –º–µ–¥–≤–µ–¥—å',
      '–ß–∞—Å—ã Xiaomi Mi Band',
      '–¢–µ—Ä–º–æ—Å Stanley',
      '–î–∂–∏–Ω—Å—ã Levi\'s 501',
      '–§—É—Ç–±–æ–ª–∫–∞ —Å –ø—Ä–∏–Ω—Ç–æ–º'
    ];
    
    return productNames[Math.floor(Math.random() * productNames.length)];
  };

  // üì¶ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–µ–º–∫–µ
  const handleQRScan = (data: string) => {
    console.log('üì¶ === –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í –ü–†–ò–ï–ú–ö–ï ===');
    console.log('üîç –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–æ–¥:', data);
    setScannedCode(data);
    setShowScanner(false);
    
    if (currentStep === 'box') {
      // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏
      console.log('üì¶ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ö–û–†–û–ë–ö–ò');
      setBoxBarcode(data);
      audioUtils.playAcceptanceAudio('box-scanned');
      setCurrentStep('items');
    } else if (currentStep === 'items') {
      // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      console.log('üì± –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏–Ω—è—Ç
      const existingItem = acceptanceItems.find(item => item.barcode === data);
      if (existingItem) {
        audioUtils.playAcceptanceAudio('already-accepted');
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ô –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è)
      const usedCells = acceptanceItems.map(item => item.cellNumber).filter(Boolean);
      let cellNumber;
      do {
        cellNumber = Math.floor(Math.random() * 482) + 1;
      } while (usedCells.includes(cellNumber));
      
      console.log(`üîÑ –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:`, usedCells);
      console.log(`‚ú® –ù–æ–≤–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è —è—á–µ–π–∫–∞: ${cellNumber}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º —è—á–µ–π–∫–∏
      const newItem: AcceptanceItem = {
        id: `item-${Date.now()}`,
        barcode: data,
        productName: generateRandomProductName(),
        quantity: 1,
        status: 'accepted',
        timestamp: new Date().toISOString(),
        cellNumber: cellNumber // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
      };
      
      console.log(`üì± –¢–û–í–ê–† –ü–†–ò–ù–Ø–¢ –í –Ø–ß–ï–ô–ö–£ ${cellNumber}:`, newItem);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      setAcceptanceItems(prev => [...prev, newItem]);
      
      // –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ (—É–±–∏—Ä–∞–µ–º "—Ç–æ–≤–∞—Ä –¥–ª—è –ø–≤–∑")
      setTimeout(async () => {
        await audioUtils.playCellAudio(cellNumber.toString());
        setTimeout(() => {
          audioUtils.playAcceptanceAudio('scan-next');
        }, 1000);
      }, 500);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
      if (acceptanceItems.length === 0) {
        setTimeout(() => {
          setCurrentStep('location');
        }, 3000);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
  const testAcceptanceAudio = () => {
    const testSounds = ['accepted', 'damaged', 'rejected'];
    testSounds.forEach((sound, index) => {
      setTimeout(() => {
        audioUtils.playAcceptanceAudio(sound);
      }, index * 1000);
    });
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
  const changeItemStatus = (itemId: string, status: AcceptanceItem['status']) => {
    setAcceptanceItems(items => 
      items.map(item => 
        item.id === itemId ? { ...item, status } : item
      )
    );
  };

  // –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ–∑–≤—É—á–∫–æ–π
  const handleBulkAccept = () => {
    const pendingItems = acceptanceItems.filter(item => item.status === 'pending');
    if (pendingItems.length > 0) {
      pendingItems.forEach(item => {
        changeItemStatus(item.id, 'accepted');
      });
      setTimeout(() => audioUtils.playAcceptanceAudio('bulk_accepted'), 300);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const startScanning = () => {
    audioUtils.playAcceptanceAudio('start_scanning');
    setShowScanner(true);
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = acceptanceItems.reduce((acc, item) => {
    acc[item.status] = (acc[item.status] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* –•–µ–¥–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ */}
      <div className="flex items-center justify-between mb-6">
        <Button variant="ghost" className="mr-4">
          <ArrowLeft className="w-5 h-5 mr-2" />
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–µ–º–∫–µ
        </Button>
        
        {/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∫–∏ */}
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              console.log('üß™ –¢–ï–°–¢ –û–ó–í–£–ß–ö–ò –ö–û–†–û–ë–ö–ò');
              audioUtils.playAcceptanceAudio('box-scanned');
            }}
          >
            üß™ –¢–µ—Å—Ç –∫–æ—Ä–æ–±–∫–∞
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              console.log('üß™ –¢–ï–°–¢ –û–ó–í–£–ß–ö–ò –¢–û–í–ê–†–ê');
              audioUtils.playAcceptanceAudio('item-for-pvz');
            }}
          >
            üß™ –¢–µ—Å—Ç —Ç–æ–≤–∞—Ä
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              console.log('üß™ –¢–ï–°–¢ –û–ó–í–£–ß–ö–ò –Ø–ß–ï–ô–ö–ò');
              audioUtils.playCellAudio('123');
            }}
          >
            üß™ –¢–µ—Å—Ç —è—á–µ–π–∫–∞
          </Button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –ø—Ä–∏–µ–º–∫–∏ */}
      <AcceptanceSteps
        currentStep={currentStep}
        setCurrentStep={setCurrentStep}
        boxBarcode={boxBarcode}
        acceptanceItems={acceptanceItems}
        setShowScanner={setShowScanner}
        searchValue={searchValue}
        setSearchValue={setSearchValue}
        handleQRScan={handleQRScan}
        playAcceptanceAudio={audioUtils.playAcceptanceAudio}
        setAcceptanceItems={setAcceptanceItems}
      />

      {/* –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ */}
      <AcceptanceAnalyzer
        customAudioFiles={customAudioFiles}
        audioTranscriptions={audioTranscriptions}
        setAudioTranscriptions={setAudioTranscriptions}
        isAnalyzing={isAnalyzing}
        setIsAnalyzing={setIsAnalyzing}
        acceptanceItems={acceptanceItems}
        changeItemStatus={changeItemStatus}
        playAcceptanceAudio={audioUtils.playAcceptanceAudio}
      />

      {/* QR –°–∫–∞–Ω–µ—Ä */}
      <QRScanner
        isOpen={showScanner}
        onScan={handleQRScan}
        onClose={() => setShowScanner(false)}
      />
    </div>
  );
};

export default AcceptanceTab;