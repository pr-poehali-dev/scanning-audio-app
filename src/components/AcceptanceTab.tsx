import React, { useState } from 'react';
import Icon from '@/components/ui/icon';
import QRScanner from './QRScanner';

interface AcceptanceItem {
  id: string;
  barcode: string;
  productName: string;
  quantity: number;
  status: 'pending' | 'accepted' | 'rejected' | 'damaged';
  timestamp: string;
  cellNumber?: number;
}

type AcceptanceStep = 'box' | 'items' | 'location' | 'complete';

const AcceptanceTab = () => {
  const [currentStep, setCurrentStep] = useState<AcceptanceStep>('box');
  const [boxBarcode, setBoxBarcode] = useState('');
  const [showScanner, setShowScanner] = useState(false);
  const [acceptanceItems, setAcceptanceItems] = useState<AcceptanceItem[]>([]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const generateRandomProductName = () => {
    const productNames = [
      '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy',
      '–ù–∞—É—à–Ω–∏–∫–∏ Apple AirPods',  
      '–ö—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è Nike',
      '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Adidas',
      '–†—é–∫–∑–∞–∫ —à–∫–æ–ª—å–Ω—ã–π',
      '–ü–ª–∞–Ω—à–µ—Ç iPad',
      '–ö–Ω–∏–≥–∞ "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"',
      '–ò–≥—Ä—É—à–∫–∞ –º—è–≥–∫–∞—è –º–µ–¥–≤–µ–¥—å',
      '–ß–∞—Å—ã Xiaomi Mi Band',
      '–¢–µ—Ä–º–æ—Å Stanley',
      '–î–∂–∏–Ω—Å—ã Levi\'s 501',
      '–§—É—Ç–±–æ–ª–∫–∞ —Å –ø—Ä–∏–Ω—Ç–æ–º'
    ];
    
    return productNames[Math.floor(Math.random() * productNames.length)];
  };

  const handleQRScan = (data: string) => {
    console.log('üì¶ === –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í –ü–†–ò–ï–ú–ö–ï ===');
    console.log('üîç –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–æ–¥:', data);
    setShowScanner(false);
    
    if (currentStep === 'box') {
      // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏
      console.log('üì¶ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ö–û–†–û–ë–ö–ò');
      setBoxBarcode(data);
      setCurrentStep('items');
    } else if (currentStep === 'items') {
      // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      console.log('üì± –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–ê');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏–Ω—è—Ç
      const existingItem = acceptanceItems.find(item => item.barcode === data);
      if (existingItem) {
        console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–∏–Ω—è—Ç');
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ô –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è)
      const usedCells = acceptanceItems.map(item => item.cellNumber).filter(Boolean);
      let cellNumber;
      do {
        cellNumber = Math.floor(Math.random() * 482) + 1;
      } while (usedCells.includes(cellNumber));
      
      console.log(`üîÑ –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:`, usedCells);
      console.log(`‚ú® –ù–æ–≤–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è —è—á–µ–π–∫–∞: ${cellNumber}`);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º —è—á–µ–π–∫–∏
      const newItem: AcceptanceItem = {
        id: `item-${Date.now()}`,
        barcode: data,
        productName: generateRandomProductName(),
        quantity: 1,
        status: 'accepted',
        timestamp: new Date().toISOString(),
        cellNumber: cellNumber
      };
      
      console.log(`üì± –¢–û–í–ê–† –ü–†–ò–ù–Ø–¢ –í –Ø–ß–ï–ô–ö–£ ${cellNumber}:`, newItem);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      setAcceptanceItems(prev => [...prev, newItem]);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
      if (acceptanceItems.length === 0) {
        setTimeout(() => {
          setCurrentStep('location');
        }, 3000);
      }
    }
  };

  const changeItemStatus = (itemId: string, status: AcceptanceItem['status']) => {
    setAcceptanceItems(items => 
      items.map(item => 
        item.id === itemId ? { ...item, status } : item
      )
    );
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = acceptanceItems.reduce((acc, item) => {
    acc[item.status] = (acc[item.status] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–∏–µ–º–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</h1>
        <p className="text-gray-600">–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –ü–í–ó</p>
      </div>

      {/* –≠—Ç–∞–ø—ã –ø—Ä–∏–µ–º–∫–∏ */}
      <div className="bg-white rounded-lg p-6 mb-6">
        <div className="flex items-center justify-between mb-4">
          <div className={`flex items-center gap-2 ${currentStep === 'box' ? 'text-purple-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep === 'box' ? 'bg-purple-600 text-white' : 'bg-gray-200'}`}>1</div>
            <span>–ö–æ—Ä–æ–±–∫–∞</span>
          </div>
          <div className={`flex items-center gap-2 ${currentStep === 'items' ? 'text-purple-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep === 'items' ? 'bg-purple-600 text-white' : 'bg-gray-200'}`}>2</div>
            <span>–¢–æ–≤–∞—Ä—ã</span>
          </div>
          <div className={`flex items-center gap-2 ${currentStep === 'location' ? 'text-purple-600' : 'text-gray-400'}`}>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep === 'location' ? 'bg-purple-600 text-white' : 'bg-gray-200'}`}>3</div>
            <span>–†–∞–∑–º–µ—â–µ–Ω–∏–µ</span>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∞–ø–∞ */}
        {currentStep === 'box' && (
          <div className="text-center py-8">
            <Icon name="Package" size={48} className="text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ–±–∫—É</h3>
            <p className="text-gray-600 mb-4">–ù–∞—á–Ω–∏—Ç–µ —Å QR-–∫–æ–¥–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ</p>
            <button
              onClick={() => setShowScanner(true)}
              className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-medium"
            >
              –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ–±–∫—É
            </button>
          </div>
        )}

        {currentStep === 'items' && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</h3>
              <button
                onClick={() => setShowScanner(true)}
                className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg"
              >
                –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
              </button>
            </div>
            
            {boxBarcode && (
              <div className="bg-gray-50 p-3 rounded-lg">
                <span className="text-sm text-gray-600">–ö–æ—Ä–æ–±–∫–∞: </span>
                <span className="font-mono">{boxBarcode}</span>
              </div>
            )}

            {acceptanceItems.length > 0 && (
              <div className="space-y-2">
                {acceptanceItems.map(item => (
                  <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <div className="font-medium">{item.productName}</div>
                      <div className="text-sm text-gray-600">–Ø—á–µ–π–∫–∞: {item.cellNumber}</div>
                      <div className="text-xs text-gray-500">{item.barcode}</div>
                    </div>
                    <div className={`px-2 py-1 rounded text-xs font-medium ${
                      item.status === 'accepted' ? 'bg-green-100 text-green-700' :
                      item.status === 'rejected' ? 'bg-red-100 text-red-700' :
                      'bg-yellow-100 text-yellow-700'
                    }`}>
                      {item.status === 'accepted' ? '–ü—Ä–∏–Ω—è—Ç' :
                       item.status === 'rejected' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {currentStep === 'location' && (
          <div className="text-center py-8">
            <Icon name="MapPin" size={48} className="text-green-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã</h3>
            <p className="text-gray-600">–ü—Ä–∏–Ω—è—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤: {acceptanceItems.length}</p>
            <div className="mt-4">
              <button
                onClick={() => {
                  setCurrentStep('box');
                  setBoxBarcode('');
                  setAcceptanceItems([]);
                }}
                className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium"
              >
                –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–µ–º–∫—É
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {acceptanceItems.length > 0 && (
        <div className="bg-white rounded-lg p-6">
          <h3 className="text-lg font-medium mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∫–∏</h3>
          <div className="grid grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{stats.accepted || 0}</div>
              <div className="text-sm text-gray-600">–ü—Ä–∏–Ω—è—Ç–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{stats.pending || 0}</div>
              <div className="text-sm text-gray-600">–û–∂–∏–¥–∞–Ω–∏–µ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{stats.rejected || 0}</div>
              <div className="text-sm text-gray-600">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{stats.damaged || 0}</div>
              <div className="text-sm text-gray-600">–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–æ</div>
            </div>
          </div>
        </div>
      )}

      {/* QR –°–∫–∞–Ω–µ—Ä */}
      <QRScanner
        isOpen={showScanner}
        onScan={handleQRScan}
        onClose={() => setShowScanner(false)}
      />
    </div>
  );
};

export default AcceptanceTab;